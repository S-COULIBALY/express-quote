/**
 * üöÄ INTERFACES DE NOTIFICATION MODERNES - Architecture Simplifi√©e
 * 
 * Points d'entr√©e simplifi√©s pour le syst√®me de notifications Express Quote.
 * Plus d'InversifyJS - architecture directe et moderne.
 * 
 * Contient :
 * - Contr√¥leur HTTP simplifi√© pour les APIs
 * - Syst√®me de t√¢ches programm√©es (cron)
 * - Utilitaires de configuration
 */

// ============================================================================
// EXPORTS HTTP - API REST MODERNE
// ============================================================================

// Contr√¥leur principal (architecture simple sans DI)
export { NotificationController } from './http/NotificationController';

// ============================================================================
// EXPORTS CRON - SYST√àME DE T√ÇCHES PROGRAMM√âES
// ============================================================================

// Scheduler et utilitaires
export {
  ReminderScheduler,
  createReminderScheduler,
  setupScheduler,
  testTask,
  getSchedulerStats,
  SchedulerManager,
  getSchedulerManager,
  EnvironmentConfig,
  getCurrentEnvironmentConfig,
  type CronTaskConfig,
  type TaskResult,
  type TaskStats
} from './cron';

// ============================================================================
// FACTORY SIMPLIFI√âE POUR CONFIGURATION RAPIDE
// ============================================================================

/**
 * Configuration simplifi√©e du syst√®me d'interfaces
 */
export interface SimpleNotificationConfig {
  cron?: {
    enabled?: boolean;
    autoStart?: boolean;
    environment?: 'development' | 'production' | 'test';
  };
}

/**
 * Gestionnaire simplifi√© pour Next.js
 * 
 * Usage :
 * ```typescript
 * import { setupSimpleNotifications } from '@/notifications/interfaces';
 * 
 * // Au d√©marrage de l'application
 * const { controller, scheduler } = await setupSimpleNotifications({
 *   cron: { enabled: true, autoStart: true }
 * });
 * ```
 */
export async function setupSimpleNotifications(
  config: SimpleNotificationConfig = {}
): Promise<{
  controller: NotificationController;
  scheduler?: SchedulerManager;
}> {
  console.log('üöÄ Initialisation du syst√®me de notifications simplifi√©...');

  const controller = new NotificationController();
  let scheduler: SchedulerManager | undefined;

  // Configuration des t√¢ches programm√©es si demand√©
  if (config.cron?.enabled) {
    const { getSchedulerManager } = await import('./cron');
    scheduler = getSchedulerManager();
    await scheduler.initialize();

    if (config.cron.autoStart) {
      await scheduler.start();
      console.log('‚úÖ T√¢ches programm√©es d√©marr√©es');
    }
  }

  console.log('‚úÖ Syst√®me de notifications pr√™t !');
  return { controller, scheduler };
}

/**
 * Configuration pour tests automatis√©s
 */
export async function setupForTesting(): Promise<{
  controller: NotificationController;
}> {
  return {
    controller: new NotificationController()
  };
}

// ============================================================================
// EXPORT PAR D√âFAUT
// ============================================================================

export default {
  NotificationController,
  setupSimpleNotifications,
  setupForTesting
};