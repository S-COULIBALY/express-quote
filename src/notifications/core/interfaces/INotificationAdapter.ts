// =============================================================================
// üì° INTERFACE ADAPTATEUR DE NOTIFICATION - Abstraction des Canaux
// =============================================================================
//
// Utilit√©:
// - Abstraction des services externes (SMTP, WhatsApp Business API, SMS)
// - Interface uniforme pour tous les canaux de communication
// - D√©couplage entre logique m√©tier et impl√©mentations techniques
// - Support des fallbacks et multi-providers par canal
// - Gestion centralis√©e des credentials et configurations
//
// Pattern Adapter:
// - Adapte les APIs externes vers interface unifi√©e Express Quote
// - Conversion des formats de donn√©es (HTML ‚Üí WhatsApp, etc.)
// - Gestion des particularit√©s de chaque canal
// - Normalisation des erreurs et statuts de retour
// - Health monitoring des services externes
// =============================================================================

import { Notification, NotificationChannel } from '../entities/Notification';

/**
 * üìä R√©sultat de livraison d'un adaptateur
 * 
 * Utilit√©:
 * - Retour standardis√© de tous les adaptateurs
 * - Informations de tracking sp√©cifiques √† chaque canal
 * - M√©tadonn√©es techniques pour debugging et optimisation
 * - Support des r√©ponses asynchrones (webhooks)
 */
export interface AdapterDeliveryResult {
  /** Succ√®s de la livraison */
  success: boolean;
  
  /** Canal utilis√© pour la livraison */
  channel: NotificationChannel;
  
  /** ID externe fourni par le service */
  externalId?: string;
  
  /** Message de statut */
  message: string;
  
  /** M√©tadonn√©es de livraison */
  deliveryMetadata: {
    /** Fournisseur utilis√© */
    provider: string;
    
    /** Endpoint API utilis√© */
    endpoint?: string;
    
    /** Latence de la requ√™te (ms) */
    latency: number;
    
    /** Code de statut HTTP */
    httpStatus?: number;
    
    /** Co√ªt de l'envoi si applicable */
    cost?: {
      amount: number;
      currency: string;
      unitType: 'message' | 'character' | 'minute';
    };
    
    /** Informations de routage */
    routing?: {
      /** R√©gion/datacenter utilis√© */
      region?: string;
      
      /** Version d'API */
      apiVersion?: string;
      
      /** Rate limiting info */
      rateLimiting?: {
        remaining: number;
        resetTime: Date;
      };
    };
    
    /** Donn√©es brutes de la r√©ponse (debugging) */
    rawResponse?: any;
  };
  
  /** Erreur d√©taill√©e si √©chec */
  error?: {
    /** Code d'erreur normalis√© */
    code: string;
    
    /** Message d'erreur */
    message: string;
    
    /** Erreur temporaire (retry possible) */
    temporary: boolean;
    
    /** Erreur c√¥t√© client (4xx) ou serveur (5xx) */
    type: 'client' | 'server' | 'network' | 'config';
    
    /** Code d'erreur du provider */
    providerCode?: string;
    
    /** D√©tails sp√©cifiques au provider */
    providerDetails?: Record<string, any>;
  };
  
  /** Tracking avanc√© (selon les capacit√©s du canal) */
  trackingInfo?: {
    /** URL de tracking si fournie */
    trackingUrl?: string;
    
    /** Webhook URL pour mises √† jour de statut */
    webhookUrl?: string;
    
    /** Support du read receipt */
    supportsReadReceipt: boolean;
    
    /** Support du delivery receipt */
    supportsDeliveryReceipt: boolean;
    
    /** Estimation de livraison */
    estimatedDelivery?: Date;
  };
}

/**
 * ‚öôÔ∏è Configuration d'un adaptateur
 * 
 * Utilit√©:
 * - Configuration sp√©cifique √† chaque canal
 * - Credentials et endpoints s√©par√©s par environnement
 * - Param√®tres de performance et reliability
 * - Feature flags pour activation progressive
 */
export interface AdapterConfig {
  /** Identifiant unique de l'adaptateur */
  adapterId: string;
  
  /** Canal de communication g√©r√© */
  channel: NotificationChannel;
  
  /** Nom du fournisseur (gmail, whatsapp-business, twilio) */
  provider: string;
  
  /** Configuration active */
  enabled: boolean;
  
  /** Credentials et authentification */
  auth: {
    /** Type d'authentification */
    type: 'api-key' | 'oauth2' | 'basic' | 'bearer' | 'custom';
    
    /** Credentials (chiffr√©es) */
    credentials: Record<string, any>;
    
    /** URL de renouvellement des tokens si OAuth2 */
    tokenRefreshUrl?: string;
    
    /** Expiration du token actuel */
    tokenExpiresAt?: Date;
  };
  
  /** Endpoints et URLs */
  endpoints: {
    /** URL principale d'envoi */
    sendUrl: string;
    
    /** URL de v√©rification de statut */
    statusUrl?: string;
    
    /** URL des webhooks entrants */
    webhookUrl?: string;
    
    /** URL de sant√©/ping */
    healthUrl?: string;
  };
  
  /** Param√®tres de performance */
  performance: {
    /** Timeout par d√©faut (ms) */
    timeout: number;
    
    /** Nombre maximum de connexions concurrentes */
    maxConcurrency: number;
    
    /** Intervalle entre requ√™tes (rate limiting) */
    rateLimitInterval: number;
    
    /** Nombre de requ√™tes par intervalle */
    rateLimitRequests: number;
    
    /** Taille maximale des messages */
    maxMessageSize: number;
  };
  
  /** Configuration de retry */
  retryConfig: {
    /** Tentatives maximum */
    maxAttempts: number;
    
    /** D√©lai initial (ms) */
    initialDelay: number;
    
    /** Facteur de backoff */
    backoffFactor: number;
    
    /** D√©lai maximum (ms) */
    maxDelay: number;
    
    /** Codes d'erreur pour retry automatique */
    retryableCodes: string[];
  };
  
  /** Features sp√©cifiques au canal */
  features: {
    /** Support des pi√®ces jointes */
    supportsAttachments: boolean;
    
    /** Support des images inline */
    supportsInlineImages: boolean;
    
    /** Support du HTML */
    supportsHtml: boolean;
    
    /** Support des templates */
    supportsTemplates: boolean;
    
    /** Support du tracking */
    supportsTracking: boolean;
    
    /** Support des boutons d'action */
    supportsButtons: boolean;
    
    /** Taille max des pi√®ces jointes (bytes) */
    maxAttachmentSize?: number;
    
    /** Formats d'image support√©s */
    supportedImageFormats?: string[];
  };
  
  /** M√©tadonn√©es additionnelles */
  metadata: {
    /** Version de l'adaptateur */
    version: string;
    
    /** Environnement (dev, staging, prod) */
    environment: string;
    
    /** Tags pour organisation */
    tags: string[];
    
    /** Derni√®re mise √† jour de config */
    lastUpdated: Date;
    
    /** Notes de configuration */
    notes?: string;
  };
}

/**
 * üè• √âtat de sant√© d'un adaptateur
 * 
 * Utilit√©:
 * - Monitoring continu des services externes
 * - D√©tection proactive des pannes
 * - M√©triques de fiabilit√© pour SLA
 * - D√©cision automatique de fallback
 */
export interface AdapterHealthStatus {
  /** Identifiant de l'adaptateur */
  adapterId: string;
  
  /** Canal g√©r√© */
  channel: NotificationChannel;
  
  /** √âtat global */
  status: 'healthy' | 'degraded' | 'down' | 'maintenance';
  
  /** Horodatage du check */
  timestamp: Date;
  
  /** Latence du dernier check (ms) */
  latency: number;
  
  /** Tests de sant√© d√©taill√©s */
  checks: Array<{
    /** Nom du test */
    name: string;
    
    /** Statut du test */
    status: 'pass' | 'fail' | 'warn';
    
    /** Message d√©taill√© */
    message: string;
    
    /** Latence de ce test (ms) */
    latency?: number;
    
    /** M√©tadonn√©es du test */
    metadata?: Record<string, any>;
  }>;
  
  /** M√©triques de performance r√©centes */
  metrics: {
    /** Taux de succ√®s derni√®res 24h (%) */
    successRate24h: number;
    
    /** Latence moyenne derni√®re heure (ms) */
    avgLatency1h: number;
    
    /** Nombre d'erreurs derni√®re heure */
    errors1h: number;
    
    /** Disponibilit√© derniers 7 jours (%) */
    uptime7d: number;
    
    /** Dernier incident */
    lastIncident?: {
      timestamp: Date;
      duration: number; // ms
      cause: string;
    };
  };
  
  /** Rate limiting status */
  rateLimiting?: {
    /** Requ√™tes restantes */
    remaining: number;
    
    /** Reset du compteur */
    resetTime: Date;
    
    /** Limite par p√©riode */
    limit: number;
  };
  
  /** Informations sur les quotas */
  quotas?: {
    /** Usage actuel */
    current: number;
    
    /** Limite maximale */
    limit: number;
    
    /** P√©riode de reset */
    period: 'hour' | 'day' | 'month';
    
    /** Prochain reset */
    nextReset: Date;
  };
}

/**
 * üìä M√©triques d√©taill√©es d'un adaptateur
 * 
 * Utilit√©:
 * - Analytics de performance par canal
 * - Optimisation des configurations
 * - Reporting pour les SLA clients
 * - D√©tection des patterns d'usage
 */
export interface AdapterMetrics {
  /** Identifiant de l'adaptateur */
  adapterId: string;
  
  /** Canal g√©r√© */
  channel: NotificationChannel;
  
  /** P√©riode des m√©triques */
  period: {
    start: Date;
    end: Date;
    duration: number; // ms
  };
  
  /** Volume d'envois */
  volume: {
    /** Total envoy√© */
    total: number;
    
    /** Succ√®s */
    success: number;
    
    /** √âchecs */
    failed: number;
    
    /** En cours */
    pending: number;
    
    /** Taux de succ√®s (%) */
    successRate: number;
  };
  
  /** Performance temporelle */
  performance: {
    /** Latence moyenne (ms) */
    avgLatency: number;
    
    /** Latence P50 (ms) */
    p50Latency: number;
    
    /** Latence P95 (ms) */
    p95Latency: number;
    
    /** Latence P99 (ms) */
    p99Latency: number;
    
    /** Timeout occurrences */
    timeouts: number;
    
    /** D√©bit (msg/min) */
    throughput: number;
  };
  
  /** Erreurs par cat√©gorie */
  errors: {
    /** Erreurs client (4xx) */
    clientErrors: number;
    
    /** Erreurs serveur (5xx) */
    serverErrors: number;
    
    /** Erreurs r√©seau */
    networkErrors: number;
    
    /** Erreurs d'authentification */
    authErrors: number;
    
    /** Rate limiting hits */
    rateLimitErrors: number;
    
    /** Top 5 des codes d'erreur */
    topErrorCodes: Array<{
      code: string;
      count: number;
      percentage: number;
    }>;
  };
  
  /** Co√ªts (si applicable) */
  costs?: {
    /** Co√ªt total */
    total: number;
    
    /** Devise */
    currency: string;
    
    /** Co√ªt par message moyen */
    avgPerMessage: number;
    
    /** R√©partition par type */
    breakdown: Record<string, number>;
  };
  
  /** Engagement (selon les capacit√©s du canal) */
  engagement?: {
    /** Messages ouverts */
    opens: number;
    
    /** Taux d'ouverture (%) */
    openRate: number;
    
    /** Clics sur liens */
    clicks: number;
    
    /** Taux de clic (%) */
    clickRate: number;
    
    /** R√©ponses re√ßues */
    replies: number;
    
    /** D√©sabonnements */
    unsubscribes: number;
  };
}

/**
 * üì° INTERFACE PRINCIPALE - Adaptateur de Canal de Notification
 * 
 * Cette interface d√©finit le contrat que doivent respecter tous
 * les adaptateurs de canaux de communication (Email, SMS, WhatsApp, etc.).
 * Elle standardise les interactions avec les services externes.
 * 
 * Responsabilit√©s contractuelles:
 * - Envoi de notifications via le canal sp√©cifique
 * - Conversion des formats de donn√©es
 * - Gestion des erreurs et retry sp√©cifique au canal
 * - Tracking et webhooks selon les capacit√©s
 * - Health monitoring du service externe
 * - Gestion des credentials et authentification
 */
export interface INotificationAdapter {
  /**
   * üì§ Envoyer une notification
   * 
   * M√©thode principale pour l'envoi via ce canal.
   * G√®re la conversion de format et l'appel au service externe.
   * 
   * @param notification Notification compl√®te √† envoyer
   * @param config Configuration sp√©cifique √† cet envoi
   * @returns R√©sultat d√©taill√© de la livraison
   * 
   * @throws AdapterError Si l'envoi √©choue de fa√ßon non r√©cup√©rable
   */
  send(
    notification: Notification, 
    config?: Partial<AdapterConfig>
  ): Promise<AdapterDeliveryResult>;
  
  /**
   * üì¶ Envoyer plusieurs notifications en lot
   * 
   * Optimis√© pour l'envoi en volume quand support√© par le canal.
   * Fallback automatique vers envois individuels si pas de support batch.
   * 
   * @param notifications Liste des notifications √† envoyer
   * @param config Configuration commune
   * @returns R√©sultats individuels pour chaque notification
   */
  sendBatch(
    notifications: Notification[], 
    config?: Partial<AdapterConfig>
  ): Promise<AdapterDeliveryResult[]>;
  
  /**
   * üìä V√©rifier le statut d'une notification
   * 
   * Interroge le service externe pour l'√©tat de livraison.
   * Pas support√© par tous les canaux.
   * 
   * @param externalId ID externe retourn√© lors de l'envoi
   * @returns Statut de livraison ou null si non support√©
   */
  getDeliveryStatus(externalId: string): Promise<{
    status: 'pending' | 'delivered' | 'failed' | 'read';
    timestamp: Date;
    details?: Record<string, any>;
  } | null>;
  
  /**
   * ‚úÖ Valider une notification pour ce canal
   * 
   * V√©rifie que la notification est compatible avec ce canal.
   * Appel√© avant l'envoi pour validation pr√©coce.
   * 
   * @param notification Notification √† valider
   * @returns R√©sultat de validation avec erreurs d√©taill√©es
   */
  validateNotification(notification: Notification): Promise<{
    valid: boolean;
    errors: Array<{
      field: string;
      message: string;
      severity: 'error' | 'warning';
    }>;
    warnings: string[];
    estimatedCost?: number;
  }>;
  
  /**
   * üîÑ Convertir le contenu pour ce canal
   * 
   * Adapte le format du contenu aux contraintes du canal.
   * Ex: HTML ‚Üí texte pour SMS, HTML ‚Üí WhatsApp formatting.
   * 
   * @param notification Notification avec contenu source
   * @returns Contenu adapt√© au canal
   */
  convertContent(notification: Notification): Promise<{
    subject?: string;
    body: string;
    attachments?: Array<{
      filename: string;
      content: Buffer;
      mimeType: string;
    }>;
    metadata?: Record<string, any>;
  }>;
  
  /**
   * üè• V√©rifier la sant√© du service externe
   * 
   * Health check complet de la connectivit√© et des fonctionnalit√©s.
   * 
   * @returns √âtat de sant√© d√©taill√©
   */
  healthCheck(): Promise<AdapterHealthStatus>;
  
  /**
   * üìà Obtenir les m√©triques de performance
   * 
   * Statistiques d'usage et de performance sur une p√©riode.
   * 
   * @param period P√©riode d'analyse
   * @returns M√©triques compl√®tes
   */
  getMetrics(period?: { start: Date; end: Date }): Promise<AdapterMetrics>;
  
  /**
   * ‚öôÔ∏è Recharger la configuration
   * 
   * Recharge les param√®tres sans red√©marrer l'adaptateur.
   * Utile pour rotation des credentials, mise √† jour des endpoints.
   * 
   * @param newConfig Nouvelle configuration
   * @returns true si rechargement r√©ussi
   */
  reloadConfig(newConfig: AdapterConfig): Promise<boolean>;
  
  /**
   * üîê Renouveler les tokens d'authentification
   * 
   * Gestion automatique du renouvellement des tokens OAuth2, etc.
   * Appel√© automatiquement avant expiration.
   * 
   * @returns true si renouvellement r√©ussi
   */
  refreshCredentials(): Promise<boolean>;
  
  /**
   * üìû Traiter un webhook entrant
   * 
   * Gestion des notifications de statut du service externe.
   * Mise √† jour automatique des statuts de livraison.
   * 
   * @param payload Donn√©es du webhook
   * @param signature Signature pour validation
   * @returns √âv√©nements de mise √† jour extraits
   */
  processWebhook(payload: any, signature?: string): Promise<Array<{
    externalId: string;
    status: 'delivered' | 'failed' | 'read' | 'replied';
    timestamp: Date;
    metadata?: Record<string, any>;
  }>>;
  
  /**
   * üß™ Envoyer une notification de test
   * 
   * Envoi de test pour validation de configuration.
   * 
   * @param testRecipient Destinataire de test
   * @param testMessage Message de test
   * @returns R√©sultat du test
   */
  sendTest(
    testRecipient: string, 
    testMessage: string
  ): Promise<AdapterDeliveryResult>;
  
  /**
   * üìã Lister les templates disponibles
   * 
   * Pour les canaux supportant les templates (WhatsApp Business).
   * 
   * @returns Liste des templates approuv√©s
   */
  getAvailableTemplates?(): Promise<Array<{
    id: string;
    name: string;
    language: string;
    status: 'approved' | 'pending' | 'rejected';
    category: string;
    components: any[];
  }>>;
  
  /**
   * üîç Rechercher dans l'historique
   * 
   * Recherche dans les logs d'envoi de l'adaptateur.
   * 
   * @param criteria Crit√®res de recherche
   * @returns R√©sultats pagin√©s
   */
  searchHistory(criteria: {
    externalIds?: string[];
    status?: string;
    dateRange?: { start: Date; end: Date };
    recipient?: string;
    limit?: number;
    offset?: number;
  }): Promise<{
    results: Array<{
      externalId: string;
      status: string;
      timestamp: Date;
      recipient: string;
      metadata?: Record<string, any>;
    }>;
    totalCount: number;
    hasMore: boolean;
  }>;
}

/**
 * üö® Exceptions sp√©cifiques aux adaptateurs
 */
export class AdapterError extends Error {
  constructor(
    message: string,
    public readonly code: string,
    public readonly channel: NotificationChannel,
    public readonly temporary: boolean = false,
    public readonly details?: Record<string, any>
  ) {
    super(message);
    this.name = 'AdapterError';
  }
}

export class AdapterConfigError extends AdapterError {
  constructor(message: string, channel: NotificationChannel, details?: Record<string, any>) {
    super(message, 'ADAPTER_CONFIG_ERROR', channel, false, details);
    this.name = 'AdapterConfigError';
  }
}

export class AdapterAuthError extends AdapterError {
  constructor(message: string, channel: NotificationChannel, details?: Record<string, any>) {
    super(message, 'ADAPTER_AUTH_ERROR', channel, true, details);
    this.name = 'AdapterAuthError';
  }
}

export class AdapterRateLimitError extends AdapterError {
  constructor(
    message: string,
    channel: NotificationChannel,
    public readonly resetTime: Date,
    details?: Record<string, any>
  ) {
    super(message, 'ADAPTER_RATE_LIMIT_ERROR', channel, true, details);
    this.name = 'AdapterRateLimitError';
  }
}

export class AdapterQuotaExceededError extends AdapterError {
  constructor(
    message: string,
    channel: NotificationChannel,
    public readonly resetTime: Date,
    details?: Record<string, any>
  ) {
    super(message, 'ADAPTER_QUOTA_EXCEEDED_ERROR', channel, false, details);
    this.name = 'AdapterQuotaExceededError';
  }
}

export class AdapterServiceUnavailableError extends AdapterError {
  constructor(message: string, channel: NotificationChannel, details?: Record<string, any>) {
    super(message, 'ADAPTER_SERVICE_UNAVAILABLE_ERROR', channel, true, details);
    this.name = 'AdapterServiceUnavailableError';
  }
}

// =============================================================================
// üè≠ FACTORY D'ADAPTATEURS
// =============================================================================

/**
 * üè≠ Interface pour Factory d'adaptateurs
 * 
 * Utilit√©:
 * - Cr√©ation standardis√©e des adaptateurs
 * - Injection de d√©pendances
 // - Configuration centralis√©e
 * - Support du hot-swapping d'adaptateurs
 */
export interface INotificationAdapterFactory {
  /**
   * üèóÔ∏è Cr√©er un adaptateur pour un canal
   * 
   * @param channel Canal de notification
   * @param config Configuration sp√©cifique
   * @returns Instance d'adaptateur configur√©
   */
  createAdapter(channel: NotificationChannel, config: AdapterConfig): Promise<INotificationAdapter>;
  
  /**
   * üìã Lister les adaptateurs disponibles
   * 
   * @returns Liste des canaux support√©s avec leurs providers
   */
  getAvailableAdapters(): Promise<Array<{
    channel: NotificationChannel;
    providers: Array<{
      name: string;
      description: string;
      features: string[];
      pricing: string;
    }>;
  }>>;
  
  /**
   * ‚úÖ Valider une configuration d'adaptateur
   * 
   * @param config Configuration √† valider
   * @returns R√©sultat de validation
   */
  validateConfig(config: AdapterConfig): Promise<{
    valid: boolean;
    errors: string[];
    warnings: string[];
  }>;
}

// =============================================================================
// üìù EXEMPLE D'UTILISATION
// =============================================================================
/*
import { INotificationAdapter, AdapterConfig, AdapterDeliveryResult } from './INotificationAdapter';
import { Notification, NotificationChannel } from '../entities/Notification';

// Exemple d'impl√©mentation d'un adaptateur Email SMTP
class SmtpEmailAdapter implements INotificationAdapter {
  private config: AdapterConfig;
  
  constructor(config: AdapterConfig) {
    this.config = config;
  }
  
  async send(notification: Notification): Promise<AdapterDeliveryResult> {
    const startTime = Date.now();
    
    try {
      // 1. Validation pr√©alable
      const validation = await this.validateNotification(notification);
      if (!validation.valid) {
        throw new AdapterError(
          `Validation failed: ${validation.errors.map(e => e.message).join(', ')}`,
          'VALIDATION_ERROR',
          NotificationChannel.EMAIL
        );
      }
      
      // 2. Conversion du contenu
      const content = await this.convertContent(notification);
      
      // 3. Envoi via SMTP
      const smtpResult = await this.sendViaSMTP({
        to: notification.recipient.email,
        subject: content.subject,
        html: content.body,
        attachments: content.attachments
      });
      
      const latency = Date.now() - startTime;
      
      // 4. Retour du r√©sultat
      return {
        success: true,
        channel: NotificationChannel.EMAIL,
        externalId: smtpResult.messageId,
        message: 'Email sent successfully',
        deliveryMetadata: {
          provider: 'smtp-gmail',
          latency,
          httpStatus: 200,
          routing: {
            region: 'eu-west-1',
            apiVersion: 'smtp-v1'
          }
        },
        trackingInfo: {
          supportsReadReceipt: true,
          supportsDeliveryReceipt: true,
          estimatedDelivery: new Date(Date.now() + 5000)
        }
      };
      
    } catch (error) {
      const latency = Date.now() - startTime;
      
      return {
        success: false,
        channel: NotificationChannel.EMAIL,
        message: 'Failed to send email',
        deliveryMetadata: {
          provider: 'smtp-gmail',
          latency
        },
        error: {
          code: 'SMTP_ERROR',
          message: error.message,
          temporary: this.isTemporaryError(error),
          type: 'server',
          providerCode: error.responseCode,
          providerDetails: {
            smtpResponse: error.response
          }
        }
      };
    }
  }
  
  async sendBatch(notifications: Notification[]): Promise<AdapterDeliveryResult[]> {
    // Gmail SMTP ne supporte pas le batch, envoi s√©quentiel
    const results: AdapterDeliveryResult[] = [];
    
    for (const notification of notifications) {
      const result = await this.send(notification);
      results.push(result);
      
      // Rate limiting - attendre 100ms entre envois
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    return results;
  }
  
  async validateNotification(notification: Notification) {
    const errors = [];
    const warnings = [];
    
    // Validation email
    if (!notification.recipient.email) {
      errors.push({
        field: 'recipient.email',
        message: 'Email address required',
        severity: 'error' as const
      });
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(notification.recipient.email)) {
      errors.push({
        field: 'recipient.email',
        message: 'Invalid email format',
        severity: 'error' as const
      });
    }
    
    // Validation taille
    const contentSize = notification.content.htmlBody?.length || 0;
    if (contentSize > 1024 * 1024) { // 1MB
      errors.push({
        field: 'content.htmlBody',
        message: 'Email content too large (max 1MB)',
        severity: 'error' as const
      });
    }
    
    // Validation pi√®ces jointes
    if (notification.content.attachments) {
      for (const attachment of notification.content.attachments) {
        if (attachment.size > 25 * 1024 * 1024) { // 25MB
          errors.push({
            field: 'content.attachments',
            message: `Attachment ${attachment.filename} too large (max 25MB)`,
            severity: 'error' as const
          });
        }
      }
    }
    
    return {
      valid: errors.length === 0,
      errors,
      warnings,
      estimatedCost: 0.001 // $0.001 per email
    };
  }
  
  async convertContent(notification: Notification) {
    return {
      subject: notification.content.subject,
      body: notification.content.htmlBody || notification.content.textBody,
      attachments: notification.content.attachments?.map(att => ({
        filename: att.filename,
        content: Buffer.from(att.content || '', 'base64'),
        mimeType: att.mimeType
      }))
    };
  }
  
  async healthCheck(): Promise<AdapterHealthStatus> {
    const checks = [];
    const startTime = Date.now();
    
    try {
      // Test connexion SMTP
      await this.testSmtpConnection();
      checks.push({
        name: 'smtp-connection',
        status: 'pass' as const,
        message: 'SMTP connection successful'
      });
      
      // Test authentification
      await this.testAuthentication();
      checks.push({
        name: 'authentication',
        status: 'pass' as const,
        message: 'Authentication successful'
      });
      
    } catch (error) {
      checks.push({
        name: 'smtp-connection',
        status: 'fail' as const,
        message: `Connection failed: ${error.message}`
      });
    }
    
    const latency = Date.now() - startTime;
    const allPassed = checks.every(check => check.status === 'pass');
    
    return {
      adapterId: this.config.adapterId,
      channel: NotificationChannel.EMAIL,
      status: allPassed ? 'healthy' : 'down',
      timestamp: new Date(),
      latency,
      checks,
      metrics: {
        successRate24h: 99.2,
        avgLatency1h: 250,
        errors1h: 2,
        uptime7d: 99.8
      }
    };
  }
  
  private async sendViaSMTP(emailData: any) {
    // Impl√©mentation SMTP r√©elle avec nodemailer ou autre
    return { messageId: `msg-${Date.now()}` };
  }
  
  private async testSmtpConnection() {
    // Test de connexion SMTP
  }
  
  private async testAuthentication() {
    // Test d'authentification
  }
  
  private isTemporaryError(error: any): boolean {
    // Logique pour d√©terminer si l'erreur est temporaire
    const temporaryCodes = ['421', '450', '451', '452'];
    return temporaryCodes.includes(error.responseCode);
  }
  
  // Autres m√©thodes de l'interface...
  getMetrics(): Promise<AdapterMetrics>;
  reloadConfig(): Promise<void>;
  refreshCredentials(): Promise<boolean>;
  processWebhook(webhook: any): Promise<boolean>;
  sendTest(recipient: string): Promise<boolean>;
  searchHistory(criteria: any): Promise<any[]>;
  getDeliveryStatus(notificationId: string): Promise<any>;
}

// Utilisation dans le service principal
class NotificationService {
  private adapters: Map<NotificationChannel, INotificationAdapter> = new Map();
  
  async initializeAdapters() {
    // Configuration des adaptateurs
    const emailConfig: AdapterConfig = {
      adapterId: 'smtp-gmail-prod',
      channel: NotificationChannel.EMAIL,
      provider: 'gmail-smtp',
      enabled: true,
      auth: {
        type: 'oauth2',
        credentials: {
          clientId: process.env.GMAIL_CLIENT_ID,
          clientSecret: process.env.GMAIL_CLIENT_SECRET,
          refreshToken: process.env.GMAIL_REFRESH_TOKEN
        }
      },
      endpoints: {
        sendUrl: 'smtp.gmail.com:587'
      },
      performance: {
        timeout: 30000,
        maxConcurrency: 10,
        rateLimitInterval: 60000,
        rateLimitRequests: 100,
        maxMessageSize: 25 * 1024 * 1024
      },
      // ... autres configs
    };
    
    const emailAdapter = new SmtpEmailAdapter(emailConfig);
    this.adapters.set(NotificationChannel.EMAIL, emailAdapter);
  }
  
  async sendNotification(notification: Notification) {
    const adapter = this.adapters.get(notification.deliveryConfig.primaryChannel);
    if (!adapter) {
      throw new Error(`No adapter for channel: ${notification.deliveryConfig.primaryChannel}`);
    }
    
    // Health check avant envoi
    const health = await adapter.healthCheck();
    if (health.status === 'down') {
      // Fallback vers autre canal
      return await this.handleFallback(notification);
    }
    
    // Envoi principal
    const result = await adapter.send(notification);
    
    if (!result.success && result.error?.temporary) {
      // Retry automatique pour erreurs temporaires
      await new Promise(resolve => setTimeout(resolve, 1000));
      return await adapter.send(notification);
    }
    
    return result;
  }
  
  private async handleFallback(notification: Notification) {
    const fallbackChannels = notification.deliveryConfig.fallbackChannels || [];
    
    for (const channel of fallbackChannels) {
      const adapter = this.adapters.get(channel);
      if (adapter) {
        const health = await adapter.healthCheck();
        if (health.status === 'healthy') {
          return await adapter.send(notification);
        }
      }
    }
    
    throw new Error('No healthy adapter available');
  }
}
*/
