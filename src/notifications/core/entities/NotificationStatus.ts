// =============================================================================
// üîî STATUTS DE NOTIFICATION - Gestion des √âtats
// =============================================================================
//
// Utilit√©:
// - D√©finit tous les √©tats possibles d'une notification dans le syst√®me
// - G√®re les transitions d'√©tats avec validation
// - Fournit la logique m√©tier pour le cycle de vie des notifications
// - Supporte la tra√ßabilit√© et l'audit des changements d'√©tat
//
// Architecture:
// - Enum TypeScript strict pour type safety
// - Classe NotificationStatus avec m√©thodes de validation
// - Historique des transitions pour debug et monitoring
// - Support multi-langues pour les libell√©s
// =============================================================================

/**
 * üéØ √ânum√©ration des statuts de notification
 * 
 * √âtats du cycle de vie d'une notification:
 * - CREATED: Notification cr√©√©e mais pas encore trait√©e
 * - QUEUED: En attente dans la queue BullMQ  
 * - PROCESSING: En cours de traitement par un worker
 * - SENT: Envoy√©e avec succ√®s vers le service externe
 * - DELIVERED: Confirm√©e comme livr√©e au destinataire
 * - FAILED: √âchec d'envoi apr√®s toutes les tentatives
 * - CANCELLED: Annul√©e avant envoi
 * - EXPIRED: Expir√©e (d√©passement de TTL)
 */
export enum NotificationStatusEnum {
  // √âtats initiaux
  CREATED = 'CREATED',
  QUEUED = 'QUEUED',
  
  // √âtats de traitement  
  PROCESSING = 'PROCESSING',
  
  // √âtats terminaux de succ√®s
  SENT = 'SENT',
  DELIVERED = 'DELIVERED',
  
  // √âtats terminaux d'√©chec
  FAILED = 'FAILED',
  CANCELLED = 'CANCELLED',
  EXPIRED = 'EXPIRED'
}

/**
 * üìã Interface pour l'historique des transitions
 * 
 * Utilit√©:
 * - Tra√ßabilit√© compl√®te des changements d'√©tat
 * - Debug des probl√®mes de notification
 * - M√©triques de performance (temps entre √©tats)
 * - Audit pour conformit√© r√©glementaire
 */
export interface StatusTransition {
  /** √âtat source de la transition */
  from: NotificationStatusEnum;
  
  /** √âtat destination de la transition */
  to: NotificationStatusEnum;
  
  /** Timestamp de la transition (ISO 8601) */
  timestamp: Date;
  
  /** Raison de la transition (optionnel) */
  reason?: string;
  
  /** M√©tadonn√©es additionnelles (erreurs, IDs externes) */
  metadata?: Record<string, any>;
  
  /** ID du worker qui a effectu√© la transition */
  workerId?: string;
  
  /** Dur√©e √©coul√©e depuis l'√©tat pr√©c√©dent (ms) */
  duration?: number;
}

/**
 * üè∑Ô∏è Configuration des libell√©s et descriptions
 * 
 * Utilit√©:
 * - Interface utilisateur multilingue
 * - Messages d'erreur contextualis√©s
 * - Notifications push avec textes appropri√©s
 * - Documentation auto-g√©n√©r√©e
 */
interface StatusLabel {
  label: string;
  description: string;
  color: 'info' | 'warning' | 'success' | 'error' | 'default';
  icon: string;
}

/**
 * üé® Configuration des libell√©s par statut
 */
const STATUS_LABELS: Record<NotificationStatusEnum, StatusLabel> = {
  [NotificationStatusEnum.CREATED]: {
    label: 'Cr√©√©e',
    description: 'Notification cr√©√©e et en attente de traitement',
    color: 'info',
    icon: 'üìù'
  },
  [NotificationStatusEnum.QUEUED]: {
    label: 'En file d\'attente',
    description: 'Notification ajout√©e √† la queue de traitement',
    color: 'info', 
    icon: '‚è≥'
  },
  [NotificationStatusEnum.PROCESSING]: {
    label: 'En traitement',
    description: 'Notification en cours de traitement par un worker',
    color: 'warning',
    icon: '‚öôÔ∏è'
  },
  [NotificationStatusEnum.SENT]: {
    label: 'Envoy√©e',
    description: 'Notification envoy√©e avec succ√®s au service externe',
    color: 'success',
    icon: 'üì§'
  },
  [NotificationStatusEnum.DELIVERED]: {
    label: 'Livr√©e',
    description: 'Notification confirm√©e comme re√ßue par le destinataire',
    color: 'success',
    icon: '‚úÖ'
  },
  [NotificationStatusEnum.FAILED]: {
    label: '√âchec',
    description: '√âchec d\'envoi apr√®s toutes les tentatives',
    color: 'error',
    icon: '‚ùå'
  },
  [NotificationStatusEnum.CANCELLED]: {
    label: 'Annul√©e',
    description: 'Notification annul√©e avant envoi',
    color: 'default',
    icon: 'üö´'
  },
  [NotificationStatusEnum.EXPIRED]: {
    label: 'Expir√©e',
    description: 'Notification expir√©e (d√©passement de TTL)',
    color: 'warning',
    icon: '‚è∞'
  }
};

/**
 * üîÑ Matrice des transitions autoris√©es
 * 
 * Utilit√©:
 * - Validation des changements d'√©tat
 * - Pr√©vention des √©tats incoh√©rents
 * - Logique m√©tier centralis√©e
 * - Debugging facilit√©
 */
const ALLOWED_TRANSITIONS: Record<NotificationStatusEnum, NotificationStatusEnum[]> = {
  [NotificationStatusEnum.CREATED]: [
    NotificationStatusEnum.QUEUED,
    NotificationStatusEnum.CANCELLED
  ],
  [NotificationStatusEnum.QUEUED]: [
    NotificationStatusEnum.PROCESSING,
    NotificationStatusEnum.CANCELLED,
    NotificationStatusEnum.EXPIRED
  ],
  [NotificationStatusEnum.PROCESSING]: [
    NotificationStatusEnum.SENT,
    NotificationStatusEnum.FAILED,
    NotificationStatusEnum.CANCELLED
  ],
  [NotificationStatusEnum.SENT]: [
    NotificationStatusEnum.DELIVERED,
    NotificationStatusEnum.FAILED  // En cas de bounce/erreur tardive
  ],
  [NotificationStatusEnum.DELIVERED]: [], // √âtat terminal
  [NotificationStatusEnum.FAILED]: [],    // √âtat terminal  
  [NotificationStatusEnum.CANCELLED]: [], // √âtat terminal
  [NotificationStatusEnum.EXPIRED]: []    // √âtat terminal
};

/**
 * üéØ Classe principale de gestion des statuts
 * 
 * Responsabilit√©s:
 * - Encapsuler la logique des √©tats de notification
 * - Valider les transitions d'√©tats
 * - Maintenir l'historique des changements
 * - Fournir des m√©thodes utilitaires pour les √©tats
 * - Calculer des m√©triques temporelles
 * 
 * Utilit√© pour Express Quote:
 * - Suivi en temps r√©el des notifications booking/payment
 * - Debug des probl√®mes d'envoi d'email
 * - M√©triques de performance du syst√®me
 * - Interface admin pour monitoring
 */
export class NotificationStatus {
  private _currentStatus: NotificationStatusEnum;
  private _history: StatusTransition[];
  private _createdAt: Date;
  
  /**
   * Constructeur avec √©tat initial
   * 
   * @param initialStatus √âtat initial (d√©faut: CREATED)
   */
  constructor(initialStatus: NotificationStatusEnum = NotificationStatusEnum.CREATED) {
    this._currentStatus = initialStatus;
    this._createdAt = new Date();
    this._history = [{
      from: initialStatus,
      to: initialStatus,
      timestamp: this._createdAt,
      reason: 'Cr√©ation initiale',
      workerId: 'system'
    }];
  }
  
  /**
   * üìä Propri√©t√©s de lecture seule
   */
  get currentStatus(): NotificationStatusEnum {
    return this._currentStatus;
  }
  
  get history(): ReadonlyArray<StatusTransition> {
    return this._history;
  }
  
  get createdAt(): Date {
    return this._createdAt;
  }
  
  get lastTransition(): StatusTransition | undefined {
    return this._history[this._history.length - 1];
  }
  
  /**
   * üîÑ Changement d'√©tat avec validation
   * 
   * @param newStatus Nouvel √©tat souhait√©
   * @param reason Raison du changement (optionnel)
   * @param metadata M√©tadonn√©es additionnelles
   * @param workerId ID du worker effectuant le changement
   * @returns true si la transition est r√©ussie, false sinon
   */
  transitionTo(
    newStatus: NotificationStatusEnum,
    reason?: string,
    metadata?: Record<string, any>,
    workerId?: string
  ): boolean {
    // Validation: √©tat identique
    if (this._currentStatus === newStatus) {
      return false;
    }
    
    // Validation: transition autoris√©e
    const allowedTargets = ALLOWED_TRANSITIONS[this._currentStatus] || [];
    if (!allowedTargets.includes(newStatus)) {
      throw new Error(
        `Transition invalide: ${this._currentStatus} ‚Üí ${newStatus}. ` +
        `Transitions autoris√©es: ${allowedTargets.join(', ')}`
      );
    }
    
    // Calcul de la dur√©e depuis derni√®re transition
    const duration = this.lastTransition ? 
      Date.now() - this.lastTransition.timestamp.getTime() : 
      0;
    
    // Cr√©ation de la transition
    const transition: StatusTransition = {
      from: this._currentStatus,
      to: newStatus,
      timestamp: new Date(),
      reason,
      metadata,
      workerId: workerId || 'unknown',
      duration
    };
    
    // Application du changement
    this._currentStatus = newStatus;
    this._history.push(transition);
    
    return true;
  }
  
  /**
   * ‚úÖ M√©thodes de v√©rification d'√©tat
   */
  isTerminal(): boolean {
    return [
      NotificationStatusEnum.DELIVERED,
      NotificationStatusEnum.FAILED,
      NotificationStatusEnum.CANCELLED,
      NotificationStatusEnum.EXPIRED
    ].includes(this._currentStatus);
  }
  
  isSuccess(): boolean {
    return [
      NotificationStatusEnum.SENT,
      NotificationStatusEnum.DELIVERED
    ].includes(this._currentStatus);
  }
  
  isError(): boolean {
    return [
      NotificationStatusEnum.FAILED,
      NotificationStatusEnum.EXPIRED
    ].includes(this._currentStatus);
  }
  
  isActive(): boolean {
    return [
      NotificationStatusEnum.QUEUED,
      NotificationStatusEnum.PROCESSING
    ].includes(this._currentStatus);
  }
  
  /**
   * üè∑Ô∏è R√©cup√©ration des m√©tadonn√©es d'affichage
   */
  getLabel(): StatusLabel {
    return STATUS_LABELS[this._currentStatus];
  }
  
  /**
   * ‚è±Ô∏è Calcul du temps total de traitement
   * 
   * @returns Dur√©e en millisecondes depuis la cr√©ation
   */
  getTotalDuration(): number {
    return Date.now() - this._createdAt.getTime();
  }
  
  /**
   * üìà Calcul du temps dans un √©tat sp√©cifique
   * 
   * @param status √âtat √† analyser
   * @returns Dur√©e totale en millisecondes dans cet √©tat
   */
  getTimeInStatus(status: NotificationStatusEnum): number {
    let totalTime = 0;
    let currentTime = 0;
    
    for (let i = 0; i < this._history.length; i++) {
      const transition = this._history[i];
      
      if (transition.to === status) {
        currentTime = transition.timestamp.getTime();
      } else if (transition.from === status && currentTime > 0) {
        totalTime += transition.timestamp.getTime() - currentTime;
        currentTime = 0;
      }
    }
    
    // Si encore dans l'√©tat, ajouter le temps jusqu'√† maintenant
    if (this._currentStatus === status && currentTime > 0) {
      totalTime += Date.now() - currentTime;
    }
    
    return totalTime;
  }
  
  /**
   * üìã Export pour s√©rialisation
   * 
   * Utilit√©:
   * - Sauvegarde en base de donn√©es
   * - Export JSON pour APIs
   * - Logs structur√©s
   * - Cache Redis
   */
  toJSON(): {
    currentStatus: NotificationStatusEnum;
    createdAt: string;
    history: StatusTransition[];
    isTerminal: boolean;
    totalDuration: number;
  } {
    return {
      currentStatus: this._currentStatus,
      createdAt: this._createdAt.toISOString(),
      history: this._history.map(h => ({
        ...h,
        timestamp: h.timestamp.toISOString()
      })) as StatusTransition[],
      isTerminal: this.isTerminal(),
      totalDuration: this.getTotalDuration()
    };
  }
  
  /**
   * üîÑ Import depuis JSON
   * 
   * @param json Donn√©es JSON s√©rialis√©es
   * @returns Instance NotificationStatus restaur√©e
   */
  static fromJSON(json: any): NotificationStatus {
    const status = new NotificationStatus();
    status._currentStatus = json.currentStatus;
    status._createdAt = new Date(json.createdAt);
    status._history = json.history.map((h: any) => ({
      ...h,
      timestamp: new Date(h.timestamp)
    }));
    
    return status;
  }
  
  /**
   * üéØ M√©thodes statiques utilitaires
   */
  static getAllStatuses(): NotificationStatusEnum[] {
    return Object.values(NotificationStatusEnum);
  }
  
  static getTerminalStatuses(): NotificationStatusEnum[] {
    return [
      NotificationStatusEnum.DELIVERED,
      NotificationStatusEnum.FAILED,
      NotificationStatusEnum.CANCELLED,
      NotificationStatusEnum.EXPIRED
    ];
  }
  
  static getActiveStatuses(): NotificationStatusEnum[] {
    return [
      NotificationStatusEnum.QUEUED,
      NotificationStatusEnum.PROCESSING
    ];
  }
}

/**
 * üîß Utilitaires de validation
 * 
 * Utilit√©:
 * - Validation des donn√©es entrantes
 * - Middleware de validation API
 * - Tests automatis√©s
 * - Documentation des contrats
 */
export const StatusValidators = {
  /**
   * Valide qu'une cha√Æne est un statut valide
   */
  isValidStatus(status: string): status is NotificationStatusEnum {
    return Object.values(NotificationStatusEnum).includes(status as NotificationStatusEnum);
  },
  
  /**
   * Valide qu'une transition est autoris√©e
   */
  canTransition(from: NotificationStatusEnum, to: NotificationStatusEnum): boolean {
    const allowed = ALLOWED_TRANSITIONS[from] || [];
    return allowed.includes(to);
  },
  
  /**
   * R√©cup√®re les transitions possibles depuis un √©tat
   */
  getAllowedTransitions(from: NotificationStatusEnum): NotificationStatusEnum[] {
    return ALLOWED_TRANSITIONS[from] || [];
  }
};

/**
 * üìä Factory pour cr√©ation d'instances
 * 
 * Utilit√©:
 * - Cr√©ation standardis√©e des statuts
 * - Injection de d√©pendances
 * - Tests avec donn√©es mock√©es  
 * - Migrations de donn√©es
 */
export class NotificationStatusFactory {
  /**
   * Cr√©e un statut avec √©tat CREATED
   */
  static createNew(): NotificationStatus {
    return new NotificationStatus(NotificationStatusEnum.CREATED);
  }
  
  /**
   * Cr√©e un statut directement en QUEUED
   * (pour notifications urgentes)
   */
  static createQueued(reason?: string): NotificationStatus {
    const status = new NotificationStatus(NotificationStatusEnum.QUEUED);
    if (reason) {
      status.transitionTo(NotificationStatusEnum.QUEUED, reason, { priority: 'high' });
    }
    return status;
  }
  
  /**
   * Cr√©e un statut en √©tat d'√©chec pour tests
   */
  static createFailed(reason?: string): NotificationStatus {
    const status = new NotificationStatus();
    status.transitionTo(NotificationStatusEnum.QUEUED, 'Test setup');
    status.transitionTo(NotificationStatusEnum.PROCESSING, 'Test processing');
    status.transitionTo(NotificationStatusEnum.FAILED, reason || 'Test failure');
    return status;
  }
}

// =============================================================================
// üìù EXEMPLE D'UTILISATION
// =============================================================================
/*
import { NotificationStatus, NotificationStatusEnum, StatusValidators } from './NotificationStatus';

// Cr√©ation d'une nouvelle notification
const status = new NotificationStatus();
console.log(status.currentStatus); // 'CREATED'

// Progression normale
status.transitionTo(NotificationStatusEnum.QUEUED, 'Ajout√©e √† la queue email', { queueName: 'email' });
status.transitionTo(NotificationStatusEnum.PROCESSING, 'Worker email-1 traite', { workerId: 'email-1' });
status.transitionTo(NotificationStatusEnum.SENT, 'Envoy√©e via SMTP', { provider: 'smtp.gmail.com' });

// V√©rifications
console.log(status.isSuccess()); // true
console.log(status.getTotalDuration()); // Dur√©e totale en ms
console.log(status.getTimeInStatus(NotificationStatusEnum.PROCESSING)); // Temps de traitement

// Export pour sauvegarde
const json = status.toJSON();
const restored = NotificationStatus.fromJSON(json);

// Validation
console.log(StatusValidators.isValidStatus('SENT')); // true
console.log(StatusValidators.canTransition('QUEUED', 'PROCESSING')); // true
*/
