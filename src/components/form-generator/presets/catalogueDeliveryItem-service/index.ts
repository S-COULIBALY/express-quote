import { FormConfig } from '../../types';
import { CatalogueDeliveryItem } from '@/types/booking';

export interface CatalogueDeliveryItemServicePresetOptions {
  service: CatalogueDeliveryItem;
  onPriceCalculated?: (price: number, details: any) => void;
  onSubmitSuccess?: (response: any) => void;
  onError?: (error: any) => void;
  editMode?: boolean;
  sessionStorageKey?: string;
}

export const getCatalogueDeliveryItemServiceConfig = (options: CatalogueDeliveryItemServicePresetOptions): FormConfig => {
  const { service, onPriceCalculated, onSubmitSuccess, onError, editMode, sessionStorageKey } = options;

  // Auto-d√©tection des valeurs par d√©faut depuis sessionStorage si en mode √©dition
  const getDefaultValues = () => {
    if (editMode && sessionStorageKey && typeof window !== 'undefined') {
      const storedData = window.sessionStorage.getItem(sessionStorageKey);
      if (storedData) {
        try {
          const parsedData = JSON.parse(storedData);
          window.sessionStorage.removeItem(sessionStorageKey);
          return parsedData;
        } catch (error) {
          console.error('Erreur lors du parsing des donn√©es stock√©es:', error);
        }
      }
    }
    
      return {
    pickupTime: '',
    deliveryTime: '',
    packageType: 'colis',
    weight: '',
    isFragile: false,
    deliveryType: 'standard',
    // Ajouter les donn√©es du service au contexte
    serviceName: service.name,
    serviceDescription: service.description,
    basePrice: service.price,
    defaultPrice: service.price
  };
  };

  const config: FormConfig = {
    title: `R√©server votre livraison ${service.name}`,
    description: "Personnalisez votre livraison selon vos besoins",
    serviceType: "general",
    customDefaults: getDefaultValues(),
    
    layout: {
      type: "sidebar",
      showPriceCalculation: true,
      showConstraintsByAddress: true,
      showModificationsSummary: true,
      onPriceCalculated: onPriceCalculated ? (price: number) => onPriceCalculated(price, {}) : undefined,
      initialPrice: service.price
    },

    sections: [
      {
        title: "üìÖ Planning et Service",
        columns: 2,
        fields: [
          {
            name: "scheduledDate",
            type: "date",
            label: "Date de livraison",
            required: true,
            validation: {
              custom: (value: any) => {
                if (!value) return "La date est requise";
                const selectedDate = new Date(value);
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                return selectedDate >= today || "La date ne peut pas √™tre dans le pass√©";
              }
            }
          },
          {
            name: "deliveryType",
            type: "select",
            label: "Type de livraison",
            required: true,
            options: [
              { value: "standard", label: "Standard" },
              { value: "express", label: "Express" },
              { value: "urgent", label: "Urgent" }
            ]
          }
        ]
      },
      {
        title: "üì¶ Objet √† livrer",
        columns: 2,
        fields: [
          {
            name: "packageType",
            type: "select",
            label: "Type de colis",
            required: true,
            options: [
              { value: "colis", label: "Colis standard" },
              { value: "meuble", label: "Meuble" },
              { value: "electromenager", label: "√âlectrom√©nager" },
              { value: "fragile", label: "Objet fragile" },
              { value: "document", label: "Document" }
            ]
          },
          {
            name: "weight",
            type: "number",
            label: "Poids (kg)",
            required: true,
            validation: {
              min: 0.1,
              max: 1000,
              custom: (value: any) => {
                if (!value || value <= 0) return "Le poids doit √™tre sup√©rieur √† 0";
                if (value > 1000) return "Le poids ne peut pas d√©passer 1000 kg";
                return true;
              }
            },
            componentProps: {
              placeholder: "5.5"
            }
          },
          {
            name: "isFragile",
            type: "checkbox",
            label: "Objet fragile",
            columnSpan: 2,
            componentProps: {
              helpText: "Cochez si l'objet n√©cessite une attention particuli√®re"
            }
          }
        ]
      },
      {
        title: "üìç Adresse de r√©cup√©ration",
        className: "pickup-section",
        fields: [
          {
            name: "pickupAddress",
            type: "address-pickup",
            label: "Adresse de r√©cup√©ration",
            required: true,
            columnSpan: 2,
            validation: {
              custom: (value: any) => value?.trim() || "L'adresse de r√©cup√©ration est requise"
            }
          },
          {
            name: "pickupTime",
            type: "text",
            label: "Heure d'enl√®vement",
            required: true,
            componentProps: {
              placeholder: "14:30"
            },
            validation: {
              custom: (value: any) => {
                if (!value) return "L'heure d'enl√®vement est requise";
                const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
                return timeRegex.test(value) || "Format attendu: HH:MM (ex: 14:30)";
              }
            }
          },
          {
            name: "pickupFloor",
            type: "select",
            label: "√âtage",
            options: [
              { value: "0", label: "Rez-de-chauss√©e" },
              { value: "1", label: "1er √©tage" },
              { value: "2", label: "2√®me √©tage" },
              { value: "3", label: "3√®me √©tage" },
              { value: "4", label: "4√®me √©tage" },
              { value: "5+", label: "5√®me √©tage et plus" }
            ]
          },
          {
            name: "pickupElevator",
            type: "select",
            label: "Ascenseur",
            options: [
              { value: "yes", label: "Oui" },
              { value: "no", label: "Non" }
            ]
          }
        ]
      },
      {
        title: "üöö Adresse de livraison",
        className: "delivery-section",
        fields: [
          {
            name: "deliveryAddress",
            type: "address-delivery",
            label: "Adresse de livraison",
            required: true,
            columnSpan: 2,
            validation: {
              custom: (value: any) => value?.trim() || "L'adresse de livraison est requise"
            }
          },
          {
            name: "deliveryTime",
            type: "text",
            label: "Heure de livraison",
            required: true,
            componentProps: {
              placeholder: "16:00"
            },
            validation: {
              custom: (value: any) => {
                if (!value) return "L'heure de livraison est requise";
                const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
                return timeRegex.test(value) || "Format attendu: HH:MM (ex: 16:00)";
              }
            }
          },
          {
            name: "deliveryFloor",
            type: "select",
            label: "√âtage",
            options: [
              { value: "0", label: "Rez-de-chauss√©e" },
              { value: "1", label: "1er √©tage" },
              { value: "2", label: "2√®me √©tage" },
              { value: "3", label: "3√®me √©tage" },
              { value: "4", label: "4√®me √©tage" },
              { value: "5+", label: "5√®me √©tage et plus" }
            ]
          },
          {
            name: "deliveryElevator",
            type: "select",
            label: "Ascenseur",
            options: [
              { value: "yes", label: "Oui" },
              { value: "no", label: "Non" }
            ]
          }
        ]
      },
      {
        title: "üìù Informations suppl√©mentaires",
        fields: [
          {
            name: "additionalInfo",
            type: "textarea",
            label: "Informations suppl√©mentaires",
            columnSpan: 2,
            componentProps: {
              rows: 3,
              placeholder: "Instructions sp√©ciales, contraintes d'acc√®s, horaires pr√©f√©r√©s..."
            }
          }
        ]
      },
      {
        title: "üì± Notifications",
        fields: [
          {
            name: "whatsappOptIn",
            type: "whatsapp-consent",
            label: "Notifications WhatsApp",
            columnSpan: 2
          }
        ]
      }
    ],

    // Handlers qui utilisent les callbacks (fonctionnalit√© pr√©serv√©e)
    onChange: onPriceCalculated ? async (fieldName: string, value: any, formData: any) => {
      const priceRelevantFields = [
        'packageType', 'weight', 'isFragile', 'deliveryType',
        'pickupAddress', 'deliveryAddress', 'pickupFloor', 'deliveryFloor',
        'pickupElevator', 'deliveryElevator', 'pickupTime', 'deliveryTime'
      ];
      
      if (priceRelevantFields.includes(fieldName)) {
        try {
          // Le hook externe g√©rera le calcul r√©el (avec distance d√©j√† calcul√©e dans DetailForm)
          onPriceCalculated(0, formData);
        } catch (error) {
          onError?.(error);
        }
      }
    } : undefined,

    onSubmit: async (data: any) => {
      console.log('üöÄ [CatalogueDeliveryItemPreset] onSubmit appel√© avec:', data);
      try {
        if (onSubmitSuccess) {
          console.log('‚úÖ [CatalogueDeliveryItemPreset] Appel onSubmitSuccess');
          await onSubmitSuccess(data);
        } else {
          console.log('‚ö†Ô∏è [CatalogueDeliveryItemPreset] onSubmitSuccess non d√©fini');
          console.error('‚ùå [CatalogueDeliveryItemPreset] onSubmitSuccess callback manquant');
          throw new Error('Gestionnaire de soumission non configur√©');
        }
      } catch (error) {
        console.error('‚ùå [CatalogueDeliveryItemPreset] Erreur dans onSubmit:', error);
        onError?.(error);
        throw error;
      }
    },

    submitLabel: "R√©server",
    cancelLabel: "Annuler"
  };

  return config;
}; 