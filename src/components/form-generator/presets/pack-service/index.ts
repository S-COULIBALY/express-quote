import { FormConfig } from '../../types';
import { Pack } from '@/types/booking';
import { PackPreset } from './packPresets';

export interface PackServicePresetOptions {
  pack: Pack;
  onPriceCalculated?: (price: number, details: any) => void;
  onSubmitSuccess?: (response: any) => void;
  onError?: (error: any) => void;
  editMode?: boolean;
  sessionStorageKey?: string;
}

export const getPackServiceConfig = (options: PackServicePresetOptions): FormConfig => {
  const { pack, onPriceCalculated, onSubmitSuccess, onError, editMode, sessionStorageKey } = options;

  // Auto-d√©tection des valeurs par d√©faut depuis sessionStorage si en mode √©dition
  const getDefaultValues = () => {
    if (editMode && sessionStorageKey && typeof window !== 'undefined') {
      const storedData = window.sessionStorage.getItem(sessionStorageKey);
      if (storedData) {
        try {
          const parsedData = JSON.parse(storedData);
          window.sessionStorage.removeItem(sessionStorageKey);
          return parsedData;
        } catch (error) {
          console.error('Erreur lors du parsing des donn√©es stock√©es:', error);
        }
      }
    }
    
    // Utiliser les valeurs par d√©faut du PackPreset + donn√©es du pack
    return {
      ...PackPreset.defaultValues,
      duration: pack.duration.toString(),
      workers: pack.workers.toString(),
      // Ajouter les donn√©es du pack au contexte
      packName: pack.name,
      packDescription: pack.description,
      basePrice: pack.price
    };
  };

  // Configuration de base utilisant PackPreset
  const baseConfig: FormConfig = {
    title: `R√©server votre pack ${pack.name}`,
    description: "Personnalisez votre r√©servation selon vos besoins",
    serviceType: "package",
    customDefaults: getDefaultValues(),
    
    layout: {
      type: "sidebar",
      // Nouvelles fonctionnalit√©s du SidebarLayout am√©lior√©
      showPriceCalculation: true,
      showConstraintsByAddress: true,
      showModificationsSummary: true,
      initialPrice: pack.price,
      serviceInfo: {
        name: pack.name,
        description: pack.description,
        icon: "üì¶",
        features: pack.includes || [
          `${pack.duration} jour${pack.duration > 1 ? 's' : ''} de d√©m√©nagement`,
          `${pack.workers} d√©m√©nageur${pack.workers > 1 ? 's' : ''} professionnel${pack.workers > 1 ? 's' : ''}`,
          `${pack.includedDistance || 20} km inclus`,
          "Mat√©riel de d√©m√©nagement fourni",
          "Assurance transport incluse"
        ]
      },
      summaryConfig: {
        ...PackPreset.summary,
        title: pack.name,
        sections: [
          // Section Pack enrichie avec les donn√©es dynamiques
          {
            title: "Pack",
            icon: "üì¶",
            fields: [
              { key: "packName", label: "Pack s√©lectionn√©", format: () => pack.name },
              { key: "packDescription", label: "Description", format: () => pack.description },
              { 
                key: "duration", 
                label: "Dur√©e totale", 
                format: (value: any) => `${value || pack.duration} jour${(value || pack.duration) > 1 ? 's' : ''}`,
                style: "font-medium text-gray-700"
              },
              { 
                key: "workers", 
                label: "D√©m√©nageurs", 
                format: (value: any) => `${value || pack.workers} d√©m√©nageur${(value || pack.workers) > 1 ? 's' : ''}`,
                style: "font-medium text-gray-700"
              }
            ]
          },
          // R√©utiliser les sections du PackPreset
          ...PackPreset.summary!.sections.slice(1), // Exclure la premi√®re section "Pack S√©lectionn√©"
          // Ajouter section prix dynamique
          {
            title: "Prix",
            icon: "üí∞",
            fields: [
              { key: "basePrice", label: "Prix de base", format: () => `${pack.price}‚Ç¨ HT` },
              { 
                key: "totalPrice", 
                label: "Total TTC", 
                format: () => "Calcul en cours...", // Sera mis √† jour dynamiquement
                style: "font-bold text-emerald-600"
              }
            ]
          }
        ]
      }
    },

    sections: [
      {
        title: "üìÖ Planification",
        fields: [
          {
            name: "scheduledDate",
            type: "date",
            label: "Date souhait√©e",
            required: true,
            validation: {
              custom: (value: any) => {
                if (!value) return "La date est requise";
                const selectedDate = new Date(value);
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                return selectedDate >= today || "La date ne peut pas √™tre dans le pass√©";
              }
            }
          }
        ]
      },
      {
        title: "üó∫Ô∏è Adresses",
        fields: [
          // üì¶ Section D√âPART avec styling sp√©cial
          {
            name: "pickupAddress",
            type: "address-pickup",
            label: "üìç Adresse de d√©part",
            required: true,
            columnSpan: 2,
            className: "pickup-section",
            componentProps: {
              iconColor: "#10b981" // Vert pour le d√©part
            }
          },
          {
            name: "pickupFloor",
            type: "select",
            label: "√âtage d√©part",
            className: "pickup-field",
            options: [
              { value: '-1', label: 'Sous-sol' },
              { value: '0', label: 'RDC' },
              { value: '1', label: '1er √©tage' },
              { value: '2', label: '2√®me √©tage' },
              { value: '3', label: '3√®me √©tage' },
              { value: '4', label: '4√®me √©tage' },
              { value: '5', label: '5√®me √©tage' },
              { value: '6', label: '6√®me √©tage' },
              { value: '7', label: '7√®me √©tage' },
              { value: '8', label: '8√®me √©tage' },
              { value: '9', label: '9√®me √©tage' },
              { value: '10', label: '10√®me √©tage' }
            ]
          },
          {
            name: "pickupElevator",
            type: "select",
            label: "Ascenseur d√©part",
            className: "pickup-field",
            options: [
              { value: 'no', label: 'Aucun' },
              { value: 'small', label: 'Petit (1-3 pers)' },
              { value: 'medium', label: 'Moyen (3-6 pers)' },
              { value: 'large', label: 'Grand (+6 pers)' }
            ]
          },
          // üì¶ Ligne combin√©e: Distance + Contraintes D√âPART
          {
            name: "pickupCarryDistance",
            type: "select",
            label: "Distance de portage d√©part",
            className: "pickup-field",
            options: [
              { value: '', label: '-- S√©lectionnez une option --' },
              { value: '0-10', label: '0-10m' },
              { value: '10-30', label: '10-30m' },
              { value: '30+', label: '30m+' }
            ]
          },
          {
            name: "pickupLogisticsConstraints",
            type: "logistics-modal",
            label: "Contraintes d'acc√®s au d√©part",
            className: "pickup-field",
            componentProps: {
              id: "pickup",
              buttonLabel: "Contraintes d'acc√®s au d√©part",
              modalTitle: "Contraintes d'acc√®s et services - Logement de d√©part"
            }
          },
          // S√©parateur entre d√©part et arriv√©e
          {
            name: "address-separator",
            type: "separator",
            columnSpan: 2
          },
          // üöö Section ARRIV√âE avec styling diff√©rentiel  
          {
            name: "deliveryAddress",
            type: "address-delivery",
            label: "üìç Adresse d'arriv√©e",
            required: true,
            columnSpan: 2,
            className: "delivery-section",
            componentProps: {
              iconColor: "#ef4444" // Rouge pour l'arriv√©e
            }
          },
          {
            name: "deliveryFloor",
            type: "select",
            label: "√âtage arriv√©e",
            className: "delivery-field",
            options: [
              { value: '-1', label: 'Sous-sol' },
              { value: '0', label: 'RDC' },
              { value: '1', label: '1er √©tage' },
              { value: '2', label: '2√®me √©tage' },
              { value: '3', label: '3√®me √©tage' },
              { value: '4', label: '4√®me √©tage' },
              { value: '5', label: '5√®me √©tage' },
              { value: '6', label: '6√®me √©tage' },
              { value: '7', label: '7√®me √©tage' },
              { value: '8', label: '8√®me √©tage' },
              { value: '9', label: '9√®me √©tage' },
              { value: '10', label: '10√®me √©tage' }
            ]
          },
          {
            name: "deliveryElevator",
            type: "select",
            label: "Ascenseur arriv√©e",
            className: "delivery-field",
            options: [
              { value: 'no', label: 'Aucun' },
              { value: 'small', label: 'Petit (1-3 pers)' },
              { value: 'medium', label: 'Moyen (3-6 pers)' },
              { value: 'large', label: 'Grand (+6 pers)' }
            ]
          },
          // üöö Ligne combin√©e: Distance + Contraintes ARRIV√âE
          {
            name: "deliveryCarryDistance",
            type: "select",
            label: "Distance de portage arriv√©e",
            className: "delivery-field",
            options: [
              { value: '', label: '-- S√©lectionnez une option --' },
              { value: '0-10', label: '0-10m' },
              { value: '10-30', label: '10-30m' },
              { value: '30+', label: '30m+' }
            ]
          },
          {
            name: "deliveryLogisticsConstraints",
            type: "logistics-modal",
            label: "Contraintes d'acc√®s √† l'arriv√©e",
            className: "delivery-field",
            componentProps: {
              id: "delivery",
              buttonLabel: "Contraintes d'acc√®s √† l'arriv√©e",
              modalTitle: "Contraintes d'acc√®s et services - Logement d'arriv√©e"
            }
          }
        ]
      },
      {
        title: "‚öôÔ∏è Configuration du pack",
        columns: 2,
        fields: [
          {
            name: "duration",
            type: "number",
            label: "Dur√©e (en jours)",
            required: true,
            validation: {
              min: pack.duration,
              custom: (value: any) => value >= pack.duration || `Minimum ${pack.duration} jour${pack.duration > 1 ? 's' : ''}`
            },
            componentProps: {
              helpText: `Minimum ${pack.duration} jour${pack.duration > 1 ? 's' : ''} pour ce pack`
            }
          },
          {
            name: "workers", 
            type: "number",
            label: "Nombre de travailleurs",
            required: true,
            validation: {
              min: pack.workers,
              custom: (value: any) => value >= pack.workers || `Minimum ${pack.workers} travailleur${pack.workers > 1 ? 's' : ''}`
            },
            componentProps: {
              helpText: `Minimum ${pack.workers} travailleur${pack.workers > 1 ? 's' : ''} pour ce pack`
            }
          }
        ]
      },
      {
        title: "üìù Informations suppl√©mentaires",
        fields: [
          {
            name: "additionalInfo",
            type: "textarea",
            label: "Informations suppl√©mentaires",
            columnSpan: 2,
            componentProps: {
              rows: 3,
              placeholder: "D√©part: digicode, stationnement... / Arriv√©e: interphone, acc√®s..."
            }
          }
        ]
      },
      {
        title: "üì± Notifications",
        fields: [
          {
            name: "whatsappOptIn",
            type: "whatsapp-consent",
            label: "Notifications WhatsApp",
            columnSpan: 2
          }
        ]
      }
    ],

    // Handlers qui utilisent les callbacks (fonctionnalit√© pr√©serv√©e)
    onChange: onPriceCalculated ? async (fieldName: string, value: any, formData: any) => {
      const priceRelevantFields = [
        'duration', 'workers', 'pickupAddress', 'deliveryAddress',
        'pickupFloor', 'deliveryFloor', 'pickupElevator', 'deliveryElevator',
        'pickupCarryDistance', 'deliveryCarryDistance',
        'pickupLogisticsConstraints', 'deliveryLogisticsConstraints'
      ];
      
      if (priceRelevantFields.includes(fieldName)) {
        try {
          // Le hook externe g√©rera le calcul r√©el
          onPriceCalculated(0, formData);
        } catch (error) {
          onError?.(error);
        }
      }
    } : undefined,

    onSubmit: onSubmitSuccess ? async (data: any) => {
      try {
        // Le hook externe g√©rera la soumission r√©elle
        onSubmitSuccess(data);
      } catch (error) {
        onError?.(error);
      }
    } : undefined,

    submitLabel: "R√©server",
    cancelLabel: "Annuler"
  };

      // Les styles sont maintenant int√©gr√©s dans globals.css pour √©viter les conflits de priorit√© CSS
    // Cela assure un chargement plus fiable et √©vite les probl√®mes de flash content

  return baseConfig;
}; 