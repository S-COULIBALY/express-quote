import { FormConfig } from '../../types';
import { AutoDetectionService, AddressData } from '@/quotation/domain/services/AutoDetectionService';

// üè∑Ô∏è Mapping centralis√© des contraintes et services pour l'affichage
const getConstraintLabel = (constraintId: string): string => {
  const constraintLabels: Record<string, string> = {
    // üöõ Contraintes d'acc√®s v√©hicule
    'pedestrian_zone': 'Zone pi√©tonne avec restrictions',
    'narrow_inaccessible_street': 'Rue √©troite ou inaccessible au camion',
    'difficult_parking': 'Stationnement difficile ou payant',
    'complex_traffic': 'Sens unique ou circulation complexe',
    
    // üè¢ Contraintes b√¢timent
    'elevator_unavailable': 'Ascenseur en panne ou hors service',
    'elevator_unsuitable_size': 'Ascenseur trop petit pour les meubles',
    'elevator_forbidden_moving': 'Ascenseur interdit pour d√©m√©nagement',
    'difficult_stairs': 'Escalier √©troit, en colima√ßon ou dangereux',
    'narrow_corridors': 'Couloirs √©troits ou encombr√©s (< 1m de large)',
    
    // üìè Distance et portage
    'long_carrying_distance': 'Distance immeuble-camion sup√©rieure √† 30m',
    'indirect_exit': 'Passage par cour, jardin ou sous-sol obligatoire',
    'complex_multilevel_access': 'Acc√®s complexe multi-niveaux',
    
    // üõ°Ô∏è S√©curit√© et autorisations
    'access_control': 'Contr√¥le d\'acc√®s strict (gardien/interphone)',
    'administrative_permit': 'Autorisation administrative obligatoire',
    'time_restrictions': 'Restrictions horaires strictes',
    'fragile_floor': 'Sol fragile ou d√©licat (parquet ancien, marbre)',
    
    // üîß Services de manutention
    'bulky_furniture': 'Meubles encombrants ou non d√©montables',
    'furniture_disassembly': 'D√©montage de meubles au d√©part',
    'furniture_reassembly': 'Remontage de meubles √† l\'arriv√©e',
    
    // üì¶ Services d'emballage
    'professional_packing_departure': 'Emballage professionnel au d√©part',
    'professional_unpacking_arrival': 'D√©ballage professionnel √† l\'arriv√©e',
    'packing_supplies': 'Fournitures d\'emballage compl√®tes',
    
    // üõ°Ô∏è Services de protection
    'fragile_valuable_items': 'Objets fragiles ou de grande valeur',
    'heavy_items': 'Objets tr√®s lourds (piano, coffre-fort, etc.)',
    'additional_insurance': 'Assurance compl√©mentaire renforc√©e',
    
    // üè™ Services annexes
    'temporary_storage_service': 'Stockage temporaire s√©curis√©',
    
    // Contrainte sp√©ciale
    'furniture_lift_required': 'Monte-meuble',
    
    // Anciennes contraintes pour compatibilit√©
    'narrow_street': 'Rue √©troite',
    'parking_issue': 'Stationnement difficile',
    'loading_zone': 'Zone de chargement',
    'one_way_street': 'Sens unique',
    'busy_street': 'Rue passante',
    'slope_or_stairs': 'Pente / escalier',
    'courtyard_to_cross': 'Cour √† traverser',
    'narrow_corridor': 'Couloir √©troit',
    'narrow_door': 'Porte √©troite',
    'spiral_staircase': 'Escalier colima√ßon',
    'multiple_doors': 'Plusieurs portes',
    'time_restriction': 'Restriction horaire',
    'security_check': 'Contr√¥le s√©curit√©',
    'permit_required': 'Autorisation',
    'interphone': 'Interphone',
    'weather_sensitive': 'Expos√© intemp√©ries',
    'shared_access': 'Acc√®s partag√©',
    'construction_work': 'Travaux',
    'limited_parking': 'Stationnement limit√©',
    'no_elevator': 'Absence d\'ascenseur',
    'difficult_building_access': 'Acc√®s difficile au b√¢timent',
    'difficult_access': 'Acc√®s difficile',
    'restricted_hours': 'Horaires restreints',
    'animal_presence': 'Pr√©sence d\'animaux',
    'mandatory_intercom': 'Interphone obligatoire',
    'intercom_required': 'Interphone obligatoire',
    'pets_present': 'Pr√©sence d\'animaux',
    'children_present': 'Pr√©sence d\'enfants',
    'fragile_items': 'Objets fragiles',
    'heavy_furniture': 'Meubles lourds',
    'limited_space': 'Espace restreint'
  };
  
  return constraintLabels[constraintId] || constraintId;
};

export interface MovingServicePresetOptions {
  onPriceCalculated?: (price: number, details: any) => void;
  onSubmitSuccess?: (response: any) => void;
  onError?: (error: any) => void;
  editMode?: boolean;
  sessionStorageKey?: string;
}

export const getMovingServiceConfig = (options: MovingServicePresetOptions = {}): FormConfig => {
  const { onPriceCalculated, onSubmitSuccess, onError, editMode, sessionStorageKey } = options;

  // Auto-d√©tection des valeurs par d√©faut depuis sessionStorage si en mode √©dition
  const getDefaultValues = () => {
    if (editMode && sessionStorageKey && typeof window !== 'undefined') {
      const storedData = window.sessionStorage.getItem(sessionStorageKey);
      if (storedData) {
        try {
          const parsedData = JSON.parse(storedData);
          return parsedData;
        } catch (error) {
          console.error('Erreur lors de la lecture du sessionStorage:', error);
        }
      }
    }
    return {};
  };

  // Configuration de base utilisant MovingPreset
  const baseConfig: FormConfig = {
    title: "Devis D√©m√©nagement",
    description: "Obtenez votre devis personnalis√© en quelques minutes",
    serviceType: "moving",
    preset: "moving",
    customDefaults: getDefaultValues(),
    
    layout: {
      type: "sidebar",
      showPriceCalculation: true,
      showConstraintsByAddress: true,
      showModificationsSummary: false, // Pas de modifications pr√©d√©finies pour d√©m√©nagement
      onPriceCalculated: onPriceCalculated ? (price: number) => onPriceCalculated(price, {}) : undefined,
      initialPrice: 0, // Pas de prix de base pr√©d√©fini, calcul√© selon les caract√©ristiques
      // Pas de serviceInfo car le client d√©finit ses propres caract√©ristiques
      summaryConfig: {
        title: "Votre D√©m√©nagement", // Titre neutre
        sections: [
          // Section Planification (Date + Volume)
          {
            title: "",
            icon: "",
            fields: [
              {
                key: "movingDate",
                label: "",
                format: (value: any, formData: any) => {
                  const parts = [];
                  if (value) {
                    const dateFormatted = new Date(value).toLocaleDateString('fr-FR', { 
                      weekday: 'long', 
                      day: 'numeric', 
                      month: 'long', 
                      year: 'numeric' 
                    });
                    parts.push(`üìÖ Date : ${dateFormatted}`);
                  }
                  if (formData.volume) {
                    parts.push(`üì¶ Volume : ${formData.volume} m¬≥`);
                  }
                  return parts.join(' ‚Ä¢ ');
                },
                condition: (value: any, formData: any) => !!value || !!formData.volume
              }
            ]
          },
          // Section Logement
          {
            title: "Logement",
            icon: "üè†",
            fields: [
              {
                key: "propertyType",
                label: "Type",
                format: (value: any, formData: any) => {
                  const types: Record<string, string> = {
                    'apartment': 'Appartement',
                    'house': 'Maison',
                    'office': 'Bureau'
                  };
                  const result = types[value] || value;
                  
                  const details = [];
                  if (formData.surface) details.push(`${formData.surface} m¬≤`);
                  if (formData.rooms) details.push(`${formData.rooms} pi√®ces`);
                  if (formData.occupants) details.push(`${formData.occupants} occupants`);
                  
                  return details.length > 0 ? `${result}\n${details.join(' ‚Ä¢ ')}` : result;
                },
                condition: (value: any) => !!value
              }
            ]
          },
          // Section Adresses (sera fusionn√©e avec les contraintes affich√©es automatiquement)
          {
            title: "Adresses",
            icon: "üìç",
            fields: [
              {
                key: "pickupAddress",
                label: "Adresse de d√©part",
                format: (value: any, formData: any) => {
                  const result = value;
                  const details = [];
                  
                  if (formData.pickupFloor && formData.pickupFloor !== '0') {
                    details.push(`√âtage ${formData.pickupFloor}`);
                  }
                  if (formData.pickupElevator && formData.pickupElevator !== 'no') {
                    const elevatorLabels: Record<string, string> = {
                      'small': 'Petit ascenseur',
                      'medium': 'Ascenseur moyen',
                      'large': 'Grand ascenseur'
                    };
                    details.push(elevatorLabels[formData.pickupElevator] || 'Ascenseur');
                  }
                  if (formData.pickupCarryDistance) {
                    details.push(`Portage ${formData.pickupCarryDistance.replace('-', ' √† ').replace('+', '+ de ')}m`);
                  }
                  
                  // Ajouter les contraintes logistiques de d√©part
                  if (formData.pickupLogisticsConstraints && formData.pickupLogisticsConstraints.length > 0) {
                    const constraints = formData.pickupLogisticsConstraints.map((c: string) => 
                      getConstraintLabel(c)
                    );
                    if (constraints.length > 0) {
                      const constraintsText = constraints.map((c: string) => `üî∏ ${c}`).join('\n');
                      details.push(`\nContraintes de d√©part :\n${constraintsText}`);
                    }
                  }
                  
                  return details.length > 0 ? `${result}\n${details.join(' ‚Ä¢ ')}` : result;
                },
                condition: (value: any) => !!value
              },
              {
                key: "deliveryAddress",
                label: "Adresse d'arriv√©e",
                format: (value: any, formData: any) => {
                  const result = value;
                  const details = [];
                  
                  if (formData.deliveryFloor && formData.deliveryFloor !== '0') {
                    details.push(`√âtage ${formData.deliveryFloor}`);
                  }
                  if (formData.deliveryElevator && formData.deliveryElevator !== 'no') {
                    const elevatorLabels: Record<string, string> = {
                      'small': 'Petit ascenseur',
                      'medium': 'Ascenseur moyen',
                      'large': 'Grand ascenseur'
                    };
                    details.push(elevatorLabels[formData.deliveryElevator] || 'Ascenseur');
                  }
                  if (formData.deliveryCarryDistance) {
                    details.push(`Portage ${formData.deliveryCarryDistance.replace('-', ' √† ').replace('+', '+ de ')}m`);
                  }
                  
                  // Ajouter les contraintes logistiques d'arriv√©e
                  if (formData.deliveryLogisticsConstraints && formData.deliveryLogisticsConstraints.length > 0) {
                    const constraints = formData.deliveryLogisticsConstraints.map((c: string) => 
                      getConstraintLabel(c)
                    );
                    if (constraints.length > 0) {
                      const constraintsText = constraints.map((c: string) => `üî∏ ${c}`).join('\n');
                      details.push(`\nContraintes d'arriv√©e :\n${constraintsText}`);
                    }
                  }
                  
                  return details.length > 0 ? `${result}\n${details.join(' ‚Ä¢ ')}` : result;
                },
                condition: (value: any) => !!value
              }
            ]
          },
          // Section Informations compl√©mentaires
          {
            title: "Commentaires",
            icon: "üìù",
            fields: [
              {
                key: "additionalInfo",
                label: "Commentaires et questions",
                format: (value: any) => value || "Aucun commentaire",
                condition: (value: any) => !!value
              }
            ]
          },
          // Section Notifications
          {
            title: "Notifications",
            icon: "üì±",
            fields: [
              {
                key: "whatsappOptIn",
                label: "Notifications WhatsApp",
                format: (value: any) => value ? "‚úÖ Activ√©es" : "‚ùå √Ä cocher pour recevoir votre devis et rappels (facultatif)",
                condition: () => true
              }
            ]
          },
          // Section Prix dynamique qui se remplit au fur et √† mesure
          {
            title: "Estimation",
            icon: "üí∞",
            fields: [
              { 
                key: "totalPrice", 
                label: "Prix estim√©", 
                format: () => "Compl√©tez le formulaire pour voir l'estimation", // Message initial
                style: "font-bold text-emerald-600",
                condition: () => true // Toujours afficher le champ prix
              }
            ]
          }
        ]
      }
    },

    sections: [
      {
        title: "üìÖ Date et Volume",
        columns: 2,
        fields: [
          {
            name: "movingDate",
            type: "date",
            label: "Date de d√©m√©nagement",
            required: true,
            validation: {
              custom: (value: any) => {
                if (!value) return "La date est requise";
                const selectedDate = new Date(value);
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                return selectedDate >= today || "La date ne peut pas √™tre dans le pass√©";
              }
            }
          },
          {
            name: "volume",
            type: "number",
            label: "Volume (m¬≥)",
            required: true,
            validation: {
              min: 1,
              custom: (value: any) => value >= 1 || "Le volume doit √™tre d'au moins 1 m¬≥"
            },
            componentProps: {
              placeholder: "30"
            }
          }
        ]
      },
      {
        title: "üó∫Ô∏è Adresses",
        fields: [
          // üì¶ Section D√âPART avec styling sp√©cial
          {
            name: "pickupAddress",
            type: "address-pickup",
            label: "üìç Adresse de d√©part",
            required: true,
            columnSpan: 2,
            className: "pickup-section",
            componentProps: {
              iconColor: "#10b981" // Vert pour le d√©part
            }
          },
          {
            name: "pickupFloor",
            type: "select",
            label: "√âtage d√©part",
            className: "pickup-field",
            options: [
              { value: '-1', label: 'Sous-sol' },
              { value: '0', label: 'RDC' },
              { value: '1', label: '1er √©tage' },
              { value: '2', label: '2√®me √©tage' },
              { value: '3', label: '3√®me √©tage' },
              { value: '4', label: '4√®me √©tage' },
              { value: '5', label: '5√®me √©tage' },
              { value: '6', label: '6√®me √©tage' },
              { value: '7', label: '7√®me √©tage' },
              { value: '8', label: '8√®me √©tage' },
              { value: '9', label: '9√®me √©tage' },
              { value: '10', label: '10√®me √©tage' }
            ]
          },
          {
            name: "pickupElevator",
            type: "select",
            label: "Ascenseur d√©part",
            className: "pickup-field",
            options: [
              { value: 'no', label: 'Aucun' },
              { value: 'small', label: 'Petit (1-3 pers)' },
              { value: 'medium', label: 'Moyen (3-6 pers)' },
              { value: 'large', label: 'Grand (+6 pers)' }
            ]
          },
          // üöö Ligne combin√©e: Distance + Contraintes D√âPART
          {
            name: "pickupCarryDistance",
            type: "select",
            label: "Distance de portage d√©part",
            className: "pickup-field",
            options: [
              { value: '', label: 'Aucune' },
              { value: '0-10', label: '0-10m' },
              { value: '10-30', label: '10-30m' },
              { value: '30+', label: '30m+' }
            ]
          },
          {
            name: "pickupLogisticsConstraints",
            type: "service-constraints",
            label: "Contraintes d'acc√®s au d√©part",
            className: "pickup-field",
            componentProps: {
              id: "pickup",
              buttonLabel: "Contraintes d'acc√®s au d√©part",
              modalTitle: "Contraintes d'acc√®s et services - Logement de d√©part"
            }
          },
          // S√©parateur entre d√©part et arriv√©e
          {
            name: "address-separator",
            type: "separator",
            columnSpan: 2
          },
          // üöö Section ARRIV√âE avec styling diff√©rentiel  
          {
            name: "deliveryAddress",
            type: "address-delivery",
            label: "üìç Adresse d'arriv√©e",
            required: true,
            columnSpan: 2,
            className: "delivery-section",
            componentProps: {
              iconColor: "#ef4444" // Rouge pour l'arriv√©e
            }
          },
          {
            name: "deliveryFloor",
            type: "select",
            label: "√âtage arriv√©e",
            className: "delivery-field",
            options: [
              { value: '-1', label: 'Sous-sol' },
              { value: '0', label: 'RDC' },
              { value: '1', label: '1er √©tage' },
              { value: '2', label: '2√®me √©tage' },
              { value: '3', label: '3√®me √©tage' },
              { value: '4', label: '4√®me √©tage' },
              { value: '5', label: '5√®me √©tage' },
              { value: '6', label: '6√®me √©tage' },
              { value: '7', label: '7√®me √©tage' },
              { value: '8', label: '8√®me √©tage' },
              { value: '9', label: '9√®me √©tage' },
              { value: '10', label: '10√®me √©tage' }
            ]
          },
          {
            name: "deliveryElevator",
            type: "select",
            label: "Ascenseur arriv√©e",
            className: "delivery-field",
            options: [
              { value: 'no', label: 'Aucun' },
              { value: 'small', label: 'Petit (1-3 pers)' },
              { value: 'medium', label: 'Moyen (3-6 pers)' },
              { value: 'large', label: 'Grand (+6 pers)' }
            ]
          },
          // üöö Ligne combin√©e: Distance + Contraintes ARRIV√âE
          {
            name: "deliveryCarryDistance",
            type: "select",
            label: "Distance de portage arriv√©e",
            className: "delivery-field",
            options: [
              { value: '', label: 'Aucune' },
              { value: '0-10', label: '0-10m' },
              { value: '10-30', label: '10-30m' },
              { value: '30+', label: '30m+' }
            ]
          },
          {
            name: "deliveryLogisticsConstraints",
            type: "service-constraints",
            label: "Contraintes d'acc√®s √† l'arriv√©e",
            className: "delivery-field",
            componentProps: {
              id: "delivery",
              buttonLabel: "Contraintes d'acc√®s √† l'arriv√©e",
              modalTitle: "Contraintes d'acc√®s et services - Logement d'arriv√©e"
            }
          }
        ]
      },
      {
        title: "üìù Informations compl√©mentaires",
        fields: [
          {
            name: "additionalInfo",
            type: "textarea",
            label: "Commentaires et questions",
            columnSpan: 2,
            componentProps: {
              rows: 4,
              placeholder: "Informations compl√©mentaires: type de meubles, contraintes sp√©cifiques, vos coordonn√©es..."
            }
          }
        ]
      },
      {
        title: "üì± Notifications",
        fields: [
          {
            name: "whatsappOptIn",
            type: "whatsapp-consent",
            label: "Notifications WhatsApp",
            columnSpan: 2
          }
        ]
      }
    ],

    // ‚úÖ REFACTORIS√â: Handlers qui utilisent le service centralis√© AutoDetectionService
    onChange: onPriceCalculated ? async (fieldName: string, value: any, formData: any) => {
      const priceRelevantFields = [
        'volume', 'movingDate', 'pickupAddress', 'deliveryAddress',
        'pickupFloor', 'deliveryFloor', 'pickupElevator', 'deliveryElevator',
        'pickupCarryDistance', 'deliveryCarryDistance',
        'pickupLogisticsConstraints', 'deliveryLogisticsConstraints'
      ];

      // ‚úÖ REFACTORIS√â: Logique automatique utilisant AutoDetectionService
      const autoDetectionRelevantFields = [
        'pickupFloor', 'deliveryFloor', 'pickupElevator', 'deliveryElevator',
        'pickupCarryDistance', 'deliveryCarryDistance',
        'pickupLogisticsConstraints', 'deliveryLogisticsConstraints'
      ];

      if (autoDetectionRelevantFields.includes(fieldName)) {
        try {
          // Construire les donn√©es d'adresse pour le service centralis√©
          const pickupAddressData: AddressData = {
            floor: parseInt(formData.pickupFloor) || 0,
            elevator: (formData.pickupElevator || 'no') as 'no' | 'small' | 'medium' | 'large',
            carryDistance: formData.pickupCarryDistance as '0-10' | '10-30' | '30+' | undefined,
            constraints: formData.pickupLogisticsConstraints || []
          };

          const deliveryAddressData: AddressData = {
            floor: parseInt(formData.deliveryFloor) || 0,
            elevator: (formData.deliveryElevator || 'no') as 'no' | 'small' | 'medium' | 'large',
            carryDistance: formData.deliveryCarryDistance as '0-10' | '10-30' | '30+' | undefined,
            constraints: formData.deliveryLogisticsConstraints || []
          };

          // Utiliser le service centralis√© pour d√©tecter les contraintes automatiques
          const detectionResult = AutoDetectionService.detectAutomaticConstraints(
            pickupAddressData,
            deliveryAddressData,
            formData.volume ? parseFloat(formData.volume) : undefined
          );

          // Appliquer les contraintes d√©tect√©es
          const updatedPickupConstraints = [...(formData.pickupLogisticsConstraints || [])];
          const updatedDeliveryConstraints = [...(formData.deliveryLogisticsConstraints || [])];

          // Ajouter monte-meuble au d√©part si requis
          if (detectionResult.pickup.furnitureLiftRequired &&
              !updatedPickupConstraints.includes('furniture_lift_required')) {
            updatedPickupConstraints.push('furniture_lift_required');
            formData.pickupLogisticsConstraints = updatedPickupConstraints;
            console.log('üèóÔ∏è [PICKUP] Monte-meuble ajout√©:', detectionResult.pickup.furnitureLiftReason);
          }

          // Ajouter monte-meuble √† l'arriv√©e si requis
          if (detectionResult.delivery.furnitureLiftRequired &&
              !updatedDeliveryConstraints.includes('furniture_lift_required')) {
            updatedDeliveryConstraints.push('furniture_lift_required');
            formData.deliveryLogisticsConstraints = updatedDeliveryConstraints;
            console.log('üèóÔ∏è [DELIVERY] Monte-meuble ajout√©:', detectionResult.delivery.furnitureLiftReason);
          }

          // Ajouter distance portage au d√©part si requise
          if (detectionResult.pickup.longCarryingDistance &&
              !updatedPickupConstraints.includes('long_carrying_distance')) {
            updatedPickupConstraints.push('long_carrying_distance');
            formData.pickupLogisticsConstraints = updatedPickupConstraints;
            console.log('üìè [PICKUP] Distance portage ajout√©e:', detectionResult.pickup.carryingDistanceReason);
          }

          // Ajouter distance portage √† l'arriv√©e si requise
          if (detectionResult.delivery.longCarryingDistance &&
              !updatedDeliveryConstraints.includes('long_carrying_distance')) {
            updatedDeliveryConstraints.push('long_carrying_distance');
            formData.deliveryLogisticsConstraints = updatedDeliveryConstraints;
            console.log('üìè [DELIVERY] Distance portage ajout√©e:', detectionResult.delivery.carryingDistanceReason);
          }

          // Afficher le r√©sum√© des d√©tections
          const summary = AutoDetectionService.getSummary(detectionResult);
          console.log('‚úÖ Auto-d√©tection compl√®te:', summary);

        } catch (error) {
          console.error('‚ùå Erreur lors de l\'auto-d√©tection:', error);
        }
      }

      if (priceRelevantFields.includes(fieldName)) {
        try {
          // Le hook externe g√©rera le calcul r√©el
          onPriceCalculated(0, formData);
        } catch (error) {
          onError?.(error);
        }
      }
    } : undefined,

    onSubmit: async (data: any) => {
      try {
        console.log('üì§ Soumission du formulaire de d√©m√©nagement:', data);
        
        // 1. Validation des donn√©es
        if (!data.volume || !data.pickupAddress || !data.deliveryAddress) {
          throw new Error('Veuillez remplir tous les champs obligatoires');
        }
        
        // 2. Pr√©parer les donn√©es pour l'API
        const submissionData = {
          // Donn√©es de base
          movingDate: data.movingDate,
          volume: parseFloat(data.volume),
          pickupAddress: data.pickupAddress,
          deliveryAddress: data.deliveryAddress,
          
          // Donn√©es d'√©tage et ascenseur
          pickupFloor: data.pickupFloor,
          deliveryFloor: data.deliveryFloor,
          pickupElevator: data.pickupElevator,
          deliveryElevator: data.deliveryElevator,
          
          // Distances de portage
          pickupCarryDistance: data.pickupCarryDistance,
          deliveryCarryDistance: data.deliveryCarryDistance,
          
          // Contraintes
          pickupLogisticsConstraints: data.pickupLogisticsConstraints || [],
          deliveryLogisticsConstraints: data.deliveryLogisticsConstraints || [],
          
          // Informations additionnelles
          additionalInfo: data.additionalInfo,
          whatsappOptIn: data.whatsappOptIn,
          
          // Donn√©es du logement
          propertyType: data.propertyType,
          surface: data.surface,
          rooms: data.rooms,
          occupants: data.occupants
        };
        
        // 3. Appel API pour cr√©er le devis
        console.log('üåê Appel API pour cr√©er le devis de d√©m√©nagement...');
        const response = await fetch('/api/bookings', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            type: 'MOVING',
            data: submissionData
          })
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Erreur lors de la cr√©ation du devis');
        }
        
        const result = await response.json();
        console.log('‚úÖ Devis cr√©√© avec succ√®s:', result);
        
        // 4. Appeler le callback de succ√®s si fourni
        if (onSubmitSuccess) {
          onSubmitSuccess(result);
        }
        
      } catch (error) {
        console.error('‚ùå Erreur lors de la soumission:', error);
        if (onError) {
          onError(error);
        } else {
          alert('Erreur lors de la cr√©ation du devis: ' + (error instanceof Error ? error.message : 'Erreur inconnue'));
        }
      }
    },

    submitLabel: "Valider le devis",
    cancelLabel: "Annuler"
  };

  return baseConfig;
}; 