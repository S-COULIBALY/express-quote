import { NextRequest, NextResponse } from 'next/server';
import { headers } from 'next/headers';
import { PrismaClient } from '@prisma/client';
import { logger } from '@/lib/logger';
import { abandonTracker } from '@/lib/abandonTracking';
import { incentiveSystem } from '@/lib/incentiveSystem';
import { abandonAnalytics } from '@/lib/abandonAnalytics';
import { BookingService } from '@/quotation/application/services/BookingService';
import { CustomerService } from '@/quotation/application/services/CustomerService';
import { PrismaBookingRepository } from '@/quotation/infrastructure/repositories/PrismaBookingRepository';
import { PrismaCustomerRepository } from '@/quotation/infrastructure/repositories/PrismaCustomerRepository';
import { PrismaMovingRepository } from '@/quotation/infrastructure/repositories/PrismaMovingRepository';
import { PrismaItemRepository } from '@/quotation/infrastructure/repositories/PrismaItemRepository';
import { PrismaQuoteRequestRepository } from '@/quotation/infrastructure/repositories/PrismaQuoteRequestRepository';

// Import du syst√®me de notifications
let notificationSystemPromise: Promise<any> | null = null;

async function getNotificationSystem() {
  if (!notificationSystemPromise) {
    try {
      const { default: NotificationSystem } = await import('@/notifications');
      notificationSystemPromise = NotificationSystem.initialize();
    } catch (error) {
      console.warn('‚ö†Ô∏è Syst√®me de notifications non disponible:', error);
      return null;
    }
  }
  
  try {
    return await notificationSystemPromise;
  } catch (error) {
    console.warn('‚ö†Ô∏è Erreur initialisation notifications:', error);
    return null;
  }
}

const prisma = new PrismaClient();

// Instance partag√©e du BookingService pour le webhook
let bookingServiceInstance: BookingService | null = null;

function getBookingService(): BookingService {
  if (!bookingServiceInstance) {
    // Injection de d√©pendances selon l'architecture DDD
    const bookingRepository = new PrismaBookingRepository();
    const customerRepository = new PrismaCustomerRepository();
    const movingRepository = new PrismaMovingRepository();
    const itemRepository = new PrismaItemRepository();
    const quoteRequestRepository = new PrismaQuoteRequestRepository();
    
    const customerService = new CustomerService(customerRepository);
    bookingServiceInstance = new BookingService(
      bookingRepository,
      movingRepository,
      itemRepository,
      customerRepository,
      undefined, // QuoteCalculator - sera inject√© par d√©faut
      quoteRequestRepository,
      customerService
    );
    
    logger.info('üèóÔ∏è BookingService initialis√© pour webhook Stripe');
  }
  
  return bookingServiceInstance;
}

/**
 * Webhook Stripe pour g√©rer les √©v√©nements de paiement
 * D√©clenche la r√©cup√©ration automatique en cas d'√©chec
 */
export async function POST(req: NextRequest) {
  try {
    const body = await req.text();
    const signature = headers().get('stripe-signature') || '';

    // V√©rification de la signature Stripe
    const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET;
    if (!endpointSecret) {
      logger.error('STRIPE_WEBHOOK_SECRET non configur√©');
      return NextResponse.json({ error: 'Configuration manquante' }, { status: 500 });
    }

    // En production, utiliser la v√©rification Stripe r√©elle
    // const event = stripe.webhooks.constructEvent(body, signature, endpointSecret);
    
    // Simulation pour le d√©veloppement
    const event = JSON.parse(body);

    logger.info(`üì• Webhook Stripe re√ßu: ${event.type}`, {
      eventId: event.id,
      objectId: event.data.object.id
    });

    // Traitement selon le type d'√©v√©nement
    switch (event.type) {
      case 'payment_intent.payment_failed':
        await handlePaymentFailed(event);
        break;
      
      case 'payment_intent.canceled':
        await handlePaymentCanceled(event);
        break;
      
      case 'checkout.session.expired':
        await handleCheckoutExpired(event);
        break;
      
      case 'payment_intent.succeeded':
        await handlePaymentSucceeded(event);
        break;
      
      case 'payment_method.attached':
        await handlePaymentMethodAttached(event);
        break;
      
      case 'customer.subscription.deleted':
        await handleSubscriptionDeleted(event);
        break;
      
      default:
        logger.info(`Type d'√©v√©nement non trait√©: ${event.type}`);
    }

    return NextResponse.json({ received: true });

  } catch (error) {
    logger.error('Erreur webhook Stripe:', error);
    return NextResponse.json({ error: 'Erreur serveur' }, { status: 500 });
  }
}

/**
 * G√©rer les √©checs de paiement
 */
async function handlePaymentFailed(event: any): Promise<void> {
  try {
    const paymentIntent = event.data.object;
    const bookingId = paymentIntent.metadata?.bookingId;
    
    if (!bookingId) {
      logger.warn('Booking ID manquant dans les m√©tadonn√©es du paiement');
      return;
    }

    // R√©cup√©rer la r√©servation
    const booking = await prisma.booking.findUnique({
      where: { id: bookingId },
      include: { customer: true }
    });

    if (!booking) {
      logger.warn(`R√©servation non trouv√©e: ${bookingId}`);
      return;
    }

    // Mettre √† jour le statut de la r√©servation
    await prisma.booking.update({
      where: { id: bookingId },
      data: { status: 'PAYMENT_FAILED' }
    });

    // Enregistrer la transaction √©chou√©e
    await prisma.transaction.create({
      data: {
        bookingId,
        amount: paymentIntent.amount / 100, // Convertir centimes en euros
        currency: paymentIntent.currency,
        status: 'FAILED',
        paymentIntentId: paymentIntent.id,
        errorMessage: paymentIntent.last_payment_error?.message || '√âchec de paiement'
      }
    });

    // Tracking d'abandon
    await abandonTracker.trackPaymentFailure(bookingId, {
      amount: paymentIntent.amount / 100,
      currency: paymentIntent.currency,
      errorCode: paymentIntent.last_payment_error?.code,
      errorMessage: paymentIntent.last_payment_error?.message,
      paymentMethod: paymentIntent.payment_method_types?.[0]
    });

    // Analytics
    await abandonAnalytics.recordAbandonEvent({
      id: `payment_failed_${bookingId}`,
      sessionId: booking.customer.id,
      stage: 'payment_failed',
      timestamp: new Date(),
      timeSpent: 0,
      data: {
        bookingId,
        amount: paymentIntent.amount / 100,
        errorCode: paymentIntent.last_payment_error?.code
      },
      userAgent: 'stripe-webhook',
      recoveryAttempts: 0,
      isRecovered: false,
      metadata: {
        bookingId,
        priceAtAbandon: paymentIntent.amount / 100,
        contactInfo: {
          hasEmail: !!booking.customer.email,
          hasPhone: !!booking.customer.phone
        }
      }
    });

    // D√©clencher la r√©cup√©ration d'urgence
    await triggerPaymentFailureRecovery(booking, paymentIntent);

    logger.info(`üí≥ √âchec de paiement trait√© pour la r√©servation ${bookingId}`);

  } catch (error) {
    logger.error('Erreur lors du traitement d\'√©chec de paiement:', error);
  }
}

/**
 * G√©rer les paiements annul√©s
 */
async function handlePaymentCanceled(event: any): Promise<void> {
  try {
    const paymentIntent = event.data.object;
    const bookingId = paymentIntent.metadata?.bookingId;
    
    if (!bookingId) return;

    const booking = await prisma.booking.findUnique({
      where: { id: bookingId },
      include: { customer: true }
    });

    if (!booking) return;

    // Mettre √† jour le statut
    await prisma.booking.update({
      where: { id: bookingId },
      data: { status: 'PAYMENT_FAILED' }
    });

    // Tracking d'abandon
    await abandonTracker.trackPaymentAbandon(bookingId, {
      amount: paymentIntent.amount / 100,
      currency: paymentIntent.currency,
      reason: 'user_canceled'
    });

    // D√©clencher la r√©cup√©ration
    await triggerPaymentCancelRecovery(booking, paymentIntent);

    logger.info(`üö´ Paiement annul√© trait√© pour la r√©servation ${bookingId}`);

  } catch (error) {
    logger.error('Erreur lors du traitement d\'annulation de paiement:', error);
  }
}

/**
 * G√©rer les sessions checkout expir√©es
 */
async function handleCheckoutExpired(event: any): Promise<void> {
  try {
    const session = event.data.object;
    const bookingId = session.metadata?.bookingId;
    
    if (!bookingId) return;

    const booking = await prisma.booking.findUnique({
      where: { id: bookingId },
      include: { customer: true }
    });

    if (!booking) return;

    // Mettre √† jour le statut
    await prisma.booking.update({
      where: { id: bookingId },
      data: { status: 'PAYMENT_FAILED' }
    });

    // Tracking d'abandon
    await abandonTracker.trackPaymentAbandon(bookingId, {
      amount: session.amount_total / 100,
      currency: session.currency,
      reason: 'session_expired'
    });

    // D√©clencher la r√©cup√©ration
    await triggerSessionExpiredRecovery(booking, session);

    logger.info(`‚è∞ Session checkout expir√©e trait√©e pour la r√©servation ${bookingId}`);

  } catch (error) {
    logger.error('Erreur lors du traitement de session expir√©e:', error);
  }
}

/**
 * G√©rer les paiements r√©ussis
 */
async function handlePaymentSucceeded(event: any): Promise<void> {
  try {
    const paymentIntent = event.data.object;
    const bookingId = paymentIntent.metadata?.bookingId;
    
    if (!bookingId) return;

    // R√©cup√©rer la r√©servation avec les d√©tails du client
    const booking = await prisma.booking.findUnique({
      where: { id: bookingId },
      include: { 
        customer: true,
        quoteRequest: {
          select: {
            id: true,
            type: true,
            temporaryId: true
          }
        }
      }
    });

    if (!booking) {
      logger.warn(`R√©servation non trouv√©e pour paiement r√©ussi: ${bookingId}`);
      return;
    }

    // Mettre √† jour le statut de la r√©servation
    await prisma.booking.update({
      where: { id: bookingId },
      data: { status: 'PAYMENT_COMPLETED' }
    });

    // Enregistrer la transaction r√©ussie
    await prisma.transaction.upsert({
      where: { paymentIntentId: paymentIntent.id },
      update: { status: 'COMPLETED' },
      create: {
        bookingId,
        amount: paymentIntent.amount / 100,
        currency: paymentIntent.currency,
        status: 'COMPLETED',
        paymentIntentId: paymentIntent.id,
        paymentMethod: paymentIntent.payment_method_types?.[0]
      }
    });

    // Marquer les abandons ant√©rieurs comme r√©cup√©r√©s
    await abandonAnalytics.recordRecoveryEvent(
      `payment_failed_${bookingId}`,
      'payment_retry',
      'stripe_retry',
      true,
      0
    );

    // üöÄ UTILISER BOOKINGSERVICE POUR G√âRER LE PAIEMENT AVEC DOCUMENTORCHESTRATIONSERVICE
    try {
      const bookingService = getBookingService();
      await bookingService.confirmPaymentSuccess(bookingId, {
        paymentIntentId: paymentIntent.id,
        amount: paymentIntent.amount / 100, // Convertir centimes en euros
        status: 'completed'
      });
      
      logger.info('üéâ Paiement trait√© via BookingService avec g√©n√©ration de documents');
    } catch (serviceError) {
      logger.warn('‚ö†Ô∏è Erreur lors du traitement via BookingService, fallback vers notifications directes:', serviceError);
      
      // Fallback : utiliser l'ancien syst√®me si BookingService √©choue
      try {
        await sendPaymentConfirmationNotifications(booking, paymentIntent);
        logger.info('‚úÖ Fallback notifications envoy√©es');
      } catch (fallbackError) {
        logger.error('‚ùå M√™me le fallback a √©chou√©:', fallbackError);
      }
    }

    logger.info(`‚úÖ Paiement r√©ussi trait√© pour la r√©servation ${bookingId}`);

  } catch (error) {
    logger.error('Erreur lors du traitement de paiement r√©ussi:', error);
  }
}

/**
 * G√©rer les m√©thodes de paiement attach√©es
 */
async function handlePaymentMethodAttached(event: any): Promise<void> {
  try {
    const paymentMethod = event.data.object;
    
    logger.info(`üí≥ M√©thode de paiement attach√©e: ${paymentMethod.type}`, {
      paymentMethodId: paymentMethod.id,
      customerId: paymentMethod.customer
    });

    // Potentiellement d√©clencher des actions sp√©cifiques
    // Par exemple, proposer des offres pour fid√©liser
    
  } catch (error) {
    logger.error('Erreur lors du traitement de m√©thode de paiement:', error);
  }
}

/**
 * G√©rer les suppressions d'abonnement
 */
async function handleSubscriptionDeleted(event: any): Promise<void> {
  try {
    const subscription = event.data.object;
    
    logger.info(`üîö Abonnement supprim√©: ${subscription.id}`, {
      customerId: subscription.customer,
      reason: subscription.cancellation_details?.reason
    });

    // D√©clencher la r√©cup√©ration d'abonnement
    await triggerSubscriptionRecovery(subscription);
    
  } catch (error) {
    logger.error('Erreur lors du traitement de suppression d\'abonnement:', error);
  }
}

/**
 * D√©clencher la r√©cup√©ration d'urgence pour √©chec de paiement
 */
async function triggerPaymentFailureRecovery(booking: any, paymentIntent: any): Promise<void> {
  try {
    const customer = booking.customer;
    const amount = paymentIntent.amount / 100;
    const errorMessage = paymentIntent.last_payment_error?.message || '√âchec de paiement';

    // √âvaluer les incentives d'urgence
    const incentives = await incentiveSystem.evaluateIncentives({
      trigger: 'payment_abandoned',
      userId: customer.id,
      bookingId: booking.id,
      originalAmount: amount,
      serviceType: booking.type,
      customerSegment: 'payment_failed'
    });

    // Ancien syst√®me de notification supprim√©
    logger.info('üí≥ Paiement √©chou√© - notification non envoy√©e (ancien syst√®me supprim√©)', { 
      bookingId, 
      amount,
      errorMessage 
    });

    // Programmer des tentatives de r√©cup√©ration
    await schedulePaymentRecoverySequence(booking, amount, errorMessage);

    logger.info(`üö® R√©cup√©ration d'urgence d√©clench√©e pour √©chec de paiement: ${booking.id}`);

  } catch (error) {
    logger.error('Erreur lors du d√©clenchement de r√©cup√©ration d\'√©chec:', error);
  }
}

/**
 * D√©clencher la r√©cup√©ration pour paiement annul√©
 */
async function triggerPaymentCancelRecovery(booking: any, paymentIntent: any): Promise<void> {
  try {
    const customer = booking.customer;
    const amount = paymentIntent.amount / 100;

    // Notification plus douce pour annulation
    const notification = {
      id: `cancel_recovery_${booking.id}`,
      type: 'payment_recovery' as const,
      priority: 'high' as const,
      channels: ['email', 'sms'] as const,
      recipient: {
        email: customer.email,
        phone: customer.phone,
        userId: customer.id
      },
      content: {
        title: 'Reprenez votre r√©servation',
        message: `Votre r√©servation de ${amount}‚Ç¨ vous attend. Finalisez-la maintenant.`,
        actionText: 'Finaliser le paiement',
        actionUrl: `/payment/${booking.id}`,
        incentive: 'Assistance gratuite disponible'
      },
      metadata: { bookingId: booking.id, amount }
    };

    // Ancien syst√®me de notification supprim√©

    logger.info(`üîÑ R√©cup√©ration d√©clench√©e pour paiement annul√©: ${booking.id}`);

  } catch (error) {
    logger.error('Erreur lors du d√©clenchement de r√©cup√©ration d\'annulation:', error);
  }
}

/**
 * D√©clencher la r√©cup√©ration pour session expir√©e
 */
async function triggerSessionExpiredRecovery(booking: any, session: any): Promise<void> {
  try {
    const customer = booking.customer;
    const amount = session.amount_total / 100;

    // Notification avec urgence pour session expir√©e
    const notification = {
      id: `expired_recovery_${booking.id}`,
      type: 'payment_recovery' as const,
      priority: 'urgent' as const,
      channels: ['email', 'sms', 'push'] as const,
      recipient: {
        email: customer.email,
        phone: customer.phone,
        userId: customer.id
      },
      content: {
        title: 'Session expir√©e - Reprenez votre paiement',
        message: `Votre session de paiement de ${amount}‚Ç¨ a expir√©. Cr√©ez un nouveau lien de paiement.`,
        actionText: 'Nouveau paiement',
        actionUrl: `/payment/${booking.id}`,
        deadline: '2 heures'
      },
      metadata: { bookingId: booking.id, amount }
    };

    // Ancien syst√®me de notification supprim√©

    logger.info(`‚è∞ R√©cup√©ration d√©clench√©e pour session expir√©e: ${booking.id}`);

  } catch (error) {
    logger.error('Erreur lors du d√©clenchement de r√©cup√©ration de session:', error);
  }
}

/**
 * D√©clencher la r√©cup√©ration d'abonnement
 */
async function triggerSubscriptionRecovery(subscription: any): Promise<void> {
  try {
    // R√©cup√©rer le client
    const customerId = subscription.customer;
    
    // Cr√©er une offre de retour
    const notification = {
      id: `subscription_recovery_${subscription.id}`,
      type: 'incentive_offer' as const,
      priority: 'medium' as const,
      channels: ['email', 'whatsapp'] as const,
      recipient: {
        userId: customerId
      },
      content: {
        title: 'Nous vous manquons d√©j√† !',
        message: 'Revenez avec une offre sp√©ciale de 3 mois gratuits.',
        actionText: 'R√©activer mon abonnement',
        incentive: '3 mois gratuits'
      },
      schedule: {
        delay: 24 * 60 * 60 * 1000 // 24 heures
      }
    };

    // Ancien syst√®me de notification supprim√©

    logger.info(`üîÑ R√©cup√©ration d'abonnement d√©clench√©e: ${subscription.id}`);

  } catch (error) {
    logger.error('Erreur lors du d√©clenchement de r√©cup√©ration d\'abonnement:', error);
  }
}

/**
 * Programmer une s√©quence de r√©cup√©ration de paiement
 */
async function schedulePaymentRecoverySequence(booking: any, amount: number, errorMessage: string): Promise<void> {
  try {
    const customer = booking.customer;
    const recoverySteps = [
      {
        delay: 5 * 60 * 1000, // 5 minutes
        type: 'immediate_help',
        channels: ['email', 'sms'],
        message: 'Besoin d\'aide avec votre paiement ? Notre √©quipe est disponible.'
      },
      {
        delay: 30 * 60 * 1000, // 30 minutes
        type: 'alternative_payment',
        channels: ['email', 'call'],
        message: 'Essayez un autre moyen de paiement ou contactez-nous.'
      },
      {
        delay: 2 * 60 * 60 * 1000, // 2 heures
        type: 'manager_outreach',
        channels: ['call', 'email'],
        message: 'Notre responsable vous contactera pour r√©soudre le probl√®me.'
      },
      {
        delay: 24 * 60 * 60 * 1000, // 24 heures
        type: 'final_offer',
        channels: ['email', 'sms'],
        message: 'Derni√®re chance : finalisez avec une remise exceptionnelle.'
      }
    ];

    for (const step of recoverySteps) {
      setTimeout(async () => {
        const notification = {
          id: `recovery_${step.type}_${booking.id}`,
          type: 'payment_recovery' as const,
          priority: 'high' as const,
          channels: step.channels as any,
          recipient: {
            email: customer.email,
            phone: customer.phone,
            userId: customer.id
          },
          content: {
            title: 'Assistance paiement',
            message: step.message,
            actionText: 'R√©essayer le paiement',
            actionUrl: `/payment/${booking.id}`,
            incentive: step.type === 'final_offer' ? '15% de r√©duction' : undefined
          },
          metadata: { bookingId: booking.id, amount, step: step.type }
        };

        // Ancien syst√®me de notification supprim√©
        
        // Enregistrer la tentative de r√©cup√©ration
        await abandonAnalytics.recordRecoveryEvent(
          `payment_failed_${booking.id}`,
          step.type,
          step.channels[0],
          false,
          5 // Co√ªt approximatif
        );
      }, step.delay);
    }

    logger.info(`üìÖ S√©quence de r√©cup√©ration programm√©e pour: ${booking.id}`);

  } catch (error) {
    logger.error('Erreur lors de la programmation de s√©quence de r√©cup√©ration:', error);
  }
}

/**
 * Envoie les notifications de confirmation de paiement
 */
async function sendPaymentConfirmationNotifications(booking: any, paymentIntent: any): Promise<void> {
  console.log(`üí≥ Envoi notifications de confirmation de paiement pour r√©servation ${booking.id}`);
  
  try {
    // R√©cup√©rer le syst√®me de notifications
    const notificationSystem = await getNotificationSystem();
    if (!notificationSystem) {
      console.warn('‚ö†Ô∏è Syst√®me de notifications non disponible');
      return;
    }

    // Pr√©parer les donn√©es pour les notifications
    const paymentData = {
      customerName: `${booking.customer.firstName} ${booking.customer.lastName}`,
      customerEmail: booking.customer.email,
      customerPhone: booking.customer.phone,
      amount: paymentIntent.amount / 100, // Stripe en centimes
      currency: paymentIntent.currency,
      paymentMethod: getPaymentMethodDisplayName(paymentIntent.payment_method_types?.[0]),
      transactionId: paymentIntent.id,
      paymentDate: new Date().toISOString(),
      bookingId: booking.id,
      bookingReference: `EQ-${booking.id.slice(-8).toUpperCase()}`,
      serviceType: booking.quoteRequest?.type || 'SERVICE',
      serviceName: getServiceDisplayName(booking.quoteRequest?.type || 'SERVICE'),
      serviceDate: booking.scheduledDate ? booking.scheduledDate.toISOString().split('T')[0] : null,
      serviceTime: booking.scheduledDate ? booking.scheduledDate.toTimeString().slice(0, 5) : null,
      invoiceNumber: `INV-${booking.id.slice(-8).toUpperCase()}-${new Date().getFullYear()}`
    };

    // 1. Email de confirmation avec template React
    await notificationSystem.sendEmail({
      to: booking.customer.email,
      subject: `Paiement confirm√© - ${paymentData.bookingReference}`,
      template: 'PaymentConfirmation',
      data: {
        ...paymentData,
        viewBookingUrl: `${process.env.NEXT_PUBLIC_APP_URL}/bookings/${booking.id}`,
        downloadInvoiceUrl: `${process.env.NEXT_PUBLIC_APP_URL}/bookings/${booking.id}/invoice`,
        supportUrl: `${process.env.NEXT_PUBLIC_APP_URL}/support`,
        companyName: 'Express Quote',
        companyAddress: process.env.COMPANY_ADDRESS || '123 Avenue des Services, 75001 Paris',
        companyPhone: process.env.SUPPORT_PHONE || '01 23 45 67 89',
        companyEmail: process.env.SUPPORT_EMAIL || 'support@expressquote.fr',
        refundPolicy: 'Remboursement possible sous 14 jours selon nos conditions g√©n√©rales',
        cancellationPolicy: 'Annulation gratuite jusqu\'√† 24h avant le service'
      }
    });

    // 2. WhatsApp si num√©ro disponible
    if (booking.customer.phone) {
      await notificationSystem.sendWhatsApp({
        to: booking.customer.phone,
        template: 'payment_confirmation',
        variables: {
          client_name: paymentData.customerName,
          amount: paymentData.amount,
          booking_id: paymentData.bookingReference,
          service_date: paymentData.serviceDate || '√Ä d√©finir'
        }
      });
    }

    // 3. SMS de confirmation
    if (booking.customer.phone) {
      await notificationSystem.sendSMS({
        to: booking.customer.phone,
        message: `‚úÖ Paiement de ${paymentData.amount}‚Ç¨ confirm√© ! Votre service du ${paymentData.serviceDate || 'date √† d√©finir'} est valid√©. Facture par email.`
      });
    }

    // 4. G√©n√©ration et envoi de la facture PDF
    try {
      const documentService = await import('@/documents/application/services/DocumentService');
      const docService = new documentService.DocumentService();
      
      const invoiceBuffer = await docService.generateDocument({
        type: 'INVOICE',
        bookingId: booking.id,
        customerEmail: booking.customer.email,
        additionalData: {
          invoiceNumber: paymentData.invoiceNumber,
          paymentInfo: {
            transactionId: paymentData.transactionId,
            paymentMethod: paymentData.paymentMethod,
            amount: paymentData.amount,
            paymentDate: paymentData.paymentDate
          }
        }
      });

      // Envoyer la facture par email
      await notificationSystem.sendEmail({
        to: booking.customer.email,
        subject: `Facture - ${paymentData.bookingReference}`,
        text: 'Veuillez trouver en pi√®ce jointe votre facture de paiement.',
        attachments: [{
          filename: `facture_${paymentData.bookingReference}.pdf`,
          content: invoiceBuffer,
          contentType: 'application/pdf'
        }]
      });
    } catch (pdfError) {
      console.warn('‚ö†Ô∏è Erreur g√©n√©ration facture PDF:', pdfError);
    }

    console.log(`‚úÖ Notifications de confirmation de paiement envoy√©es pour r√©servation ${booking.id}`);

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'envoi des notifications de paiement:', error);
    throw error;
  }
}

/**
 * Obtient le nom d'affichage de la m√©thode de paiement
 */
function getPaymentMethodDisplayName(paymentMethod: string): string {
  switch (paymentMethod) {
    case 'card': return 'Carte bancaire';
    case 'sepa_debit': return 'Pr√©l√®vement SEPA';
    case 'paypal': return 'PayPal';
    case 'apple_pay': return 'Apple Pay';
    case 'google_pay': return 'Google Pay';
    default: return 'Paiement en ligne';
  }
}

/**
 * Obtient le nom d'affichage du service
 */
function getServiceDisplayName(serviceType: string): string {
  switch (serviceType) {
    case 'MOVING': return 'D√©m√©nagement';
    case 'PACK': return 'Emballage';
    case 'SERVICE': return 'Service √† domicile';
    case 'DELIVERY': return 'Livraison';
    default: return 'Service Express Quote';
  }
} 