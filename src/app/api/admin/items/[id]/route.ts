/**
 * API Routes pour la gestion d'un item sp√©cifique
 * Architecture DDD avec ItemController - Migration vers DDD
 */

import { NextRequest, NextResponse } from 'next/server';
import { ItemController } from '@/quotation/interfaces/http/controllers/ItemController';
import { ItemService } from '@/quotation/application/services/ItemService';
import { PrismaItemRepository } from '@/quotation/infrastructure/repositories/PrismaItemRepository';
import { logger } from '@/lib/logger';

// Instance partag√©e du contr√¥leur avec injection de d√©pendances DDD
let controllerInstance: ItemController | null = null;

function getController(): ItemController {
  if (!controllerInstance) {
    // Injection de d√©pendances selon l'architecture DDD
    const itemRepository = new PrismaItemRepository();
    const itemService = new ItemService(itemRepository);
    controllerInstance = new ItemController(itemService);

    logger.info('üèóÔ∏è Admin ItemController ([id]) initialis√© avec architecture DDD');
  }

  return controllerInstance;
}

/**
 * GET /api/admin/items/[id]
 * R√©cup√®re un item sp√©cifique
 */
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
): Promise<NextResponse> {
  try {
    logger.info('üîç DEBUG: GET /api/admin/items/[id] - D√âBUT', {
      id: params?.id,
      paramsType: typeof params,
      fullParams: JSON.stringify(params)
    });

    logger.info('üîç DEBUG: V√©rification du controller...');
    const controller = getController();
    logger.info('üîç DEBUG: Controller r√©cup√©r√©:', !!controller);

    logger.info('üîç DEBUG: Appel controller.getItem...');
    const result = await controller.getItem(request, params);
    logger.info('üîç DEBUG: R√©sultat controller:', !!result);

    return result;

  } catch (error) {
    logger.error('‚ùå ERREUR COMPL√àTE dans GET /api/admin/items/[id]:', {
      error: error instanceof Error ? error.message : 'Erreur inconnue',
      stack: error instanceof Error ? error.stack : 'Pas de stack',
      params: params,
      id: params?.id
    });

    return NextResponse.json(
      {
        success: false,
        error: 'Erreur lors de la r√©cup√©ration de l\'item',
        message: error instanceof Error ? error.message : 'Erreur inconnue',
        stack: error instanceof Error ? error.stack : undefined
      },
      { status: 500 }
    );
  }
}

/**
 * PUT /api/admin/items/[id]
 * Met √† jour un item sp√©cifique
 */
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
): Promise<NextResponse> {
  try {
    logger.info('üìù PUT /api/admin/items/[id] - Via ItemController DDD corrig√©', { id: params.id });

    const controller = getController();
    return await controller.updateItem(request, params);

  } catch (error) {
    logger.error('‚ùå Erreur dans PUT /api/admin/items/[id]:', error);

    return NextResponse.json(
      {
        success: false,
        error: 'Erreur lors de la mise √† jour de l\'item',
        message: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/admin/items/[id]
 * Supprime un item sp√©cifique
 */
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
): Promise<NextResponse> {
  try {
    logger.info('üóëÔ∏è DELETE /api/admin/items/[id] - Via ItemController DDD corrig√©', { id: params.id });

    const controller = getController();
    return await controller.deleteItem(request, params);

  } catch (error) {
    logger.error('‚ùå Erreur dans DELETE /api/admin/items/[id]:', error);

    return NextResponse.json(
      {
        success: false,
        error: 'Erreur lors de la suppression de l\'item',
        message: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    );
  }
} 