'use server'

import { ServiceType } from '@/quotation/domain/enums/ServiceType';
import {
  BusinessRulesConfigKey,
  LimitsConfigKey,
  ServiceParamsConfigKey
} from '@/quotation/domain/configuration/ConfigurationKey';
// Ancienne imports d√©sormais inutiles - migration vers UnifiedDataService
// import { ConfigurationRepository } from '@/quotation/infrastructure/repositories/ConfigurationRepository';
// import { Configuration } from '@/quotation/domain/configuration/Configuration';
import { UnifiedDataService, ConfigurationCategory as UnifiedConfigCategory } from '@/quotation/infrastructure/services/UnifiedDataService';
import { logger } from '@/lib/logger';

/**
 * Interface pour les r√®gles m√©tier
 */
export interface BusinessRulesConfig {
  // R√®gles de r√©servation
  minAdvanceBookingHours: string;
  maxDaysInAdvance: string;
  cancellationDeadlineHours: string;
  
  // R√®gles de remboursement
  fullRefundHours: string;
  partialRefundPercentage: string;
  
  // R√®gles de planification
  minServiceDuration: string;
  maxServiceDuration: string;
  bufferBetweenBookings: string;
  
  // R√®gles par type de service
  movingEarlyBookingDays: string;
  movingEarlyBookingDiscount: string;
  movingWeekendSurcharge: string;
  
  serviceEarlyBookingDays: string;
  serviceEarlyBookingDiscount: string;
  serviceWeekendSurcharge: string;
  
  packEarlyBookingDays: string;
  packEarlyBookingDiscount: string;
  packWeekendSurcharge: string;
  packUrgentBookingSurcharge: string;
}

/**
 * Interface pour les limites
 */
export interface LimitsConfig {
  // Limites de r√©servation
  maxActiveBookingsPerUser: string;
  maxBookingsPerDay: string;
  maxActivePromoCodes: string;
  
  // Limites de service
  maxWorkersPerService: string;
  maxWorkersPerPack: string;
  maxItemsPerBooking: string;
  
  // Limites de distance
  maxServiceDistance: string;
  maxPackDistance: string;
  
  // Limites g√©n√©rales
  minBookingHours: string;
  maxBookingDaysAhead: string;
  minWorkers: string;
  maxWorkers: string;
}

/**
 * Interface pour les param√®tres de service
 */
export interface ServiceParamsConfig {
  // Types de service
  enabledServiceTypes: string[];
  enabledPackTypes: string[];
  
  // Param√®tres de disponibilit√©
  workingHoursStart: string;
  workingHoursEnd: string;
  workingDays: string[];
  
  // Param√®tres de trajet
  defaultTravelSpeed: string;
  workerSetupTime: string;
}

/**
 * R√©cup√®re les r√®gles m√©tier actuelles
 */
export async function getBusinessRulesConfig(): Promise<BusinessRulesConfig> {
  logger.info('üîç [ADMIN-RULES] R√©cup√©ration des r√®gles m√©tier...');
  logger.info('üîç [ADMIN-RULES] Origine: adminRules.getBusinessRulesConfig via UnifiedDataService');

  const unifiedService = UnifiedDataService.getInstance();

  // R√©cup√©ration depuis le syst√®me unifi√© avec fallback
  return {
    // R√®gles de r√©servation
    minAdvanceBookingHours: '24',
    maxDaysInAdvance: '90',
    cancellationDeadlineHours: '48',
    
    // R√®gles de remboursement
    fullRefundHours: '72',
    partialRefundPercentage: '50',
    
    // R√®gles de planification
    minServiceDuration: '1',
    maxServiceDuration: '8',
    bufferBetweenBookings: '1',
    
    // R√®gles par type de service - r√©cup√©ration depuis UnifiedDataService
    movingEarlyBookingDays: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.MOVING_EARLY_BOOKING_DAYS,
      '30'
    ),
    movingEarlyBookingDiscount: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.MOVING_EARLY_BOOKING_DISCOUNT,
      '10'
    ),
    movingWeekendSurcharge: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.MOVING_WEEKEND_SURCHARGE,
      '15'
    ),

    serviceEarlyBookingDays: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.SERVICE_EARLY_BOOKING_DAYS,
      '14'
    ),
    serviceEarlyBookingDiscount: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.SERVICE_EARLY_BOOKING_DISCOUNT,
      '5'
    ),
    serviceWeekendSurcharge: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.SERVICE_WEEKEND_SURCHARGE,
      '10'
    ),

    packEarlyBookingDays: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.PACK_EARLY_BOOKING_DAYS,
      '14'
    ),
    packEarlyBookingDiscount: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.PACK_EARLY_BOOKING_DISCOUNT,
      '5'
    ),
    packWeekendSurcharge: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.PACK_WEEKEND_SURCHARGE,
      '10'
    ),
    packUrgentBookingSurcharge: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.PACK_URGENT_BOOKING_SURCHARGE,
      '20'
    ),
  };
}

/**
 * R√©cup√®re les limites actuelles
 */
export async function getLimitsConfig(): Promise<LimitsConfig> {
  logger.info('üîç [ADMIN-RULES] R√©cup√©ration des limites...');
  logger.info('üîç [ADMIN-RULES] Origine: adminRules.getLimitsConfig via UnifiedDataService');

  const unifiedService = UnifiedDataService.getInstance();

  // R√©cup√©ration depuis le syst√®me unifi√© avec fallback
  return {
    // Limites de r√©servation
    maxActiveBookingsPerUser: '5',
    maxBookingsPerDay: '10',
    maxActivePromoCodes: '3',
    
    // Limites de service
    maxWorkersPerService: '5',
    maxWorkersPerPack: '8',
    maxItemsPerBooking: '20',
    
    // Limites de distance
    maxServiceDistance: '50',
    maxPackDistance: '100',
    
    // Limites g√©n√©rales - r√©cup√©ration depuis UnifiedDataService
    minBookingHours: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.LIMITS,
      LimitsConfigKey.MIN_BOOKING_HOURS,
      '24'
    ),
    maxBookingDaysAhead: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.LIMITS,
      LimitsConfigKey.MAX_BOOKING_DAYS_AHEAD,
      '90'
    ),
    minWorkers: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.LIMITS,
      LimitsConfigKey.MIN_WORKERS,
      '1'
    ),
    maxWorkers: await unifiedService.getConfigurationValue(
      UnifiedConfigCategory.LIMITS,
      LimitsConfigKey.MAX_WORKERS,
      '10'
    ),
  };
}

/**
 * R√©cup√®re les param√®tres de service actuels
 */
export async function getServiceParamsConfig(): Promise<ServiceParamsConfig> {
  logger.info('üîç [ADMIN-RULES] R√©cup√©ration des param√®tres de service...');
  logger.info('üîç [ADMIN-RULES] Origine: adminRules.getServiceParamsConfig via UnifiedDataService');

  const unifiedService = UnifiedDataService.getInstance();

  // R√©cup√©ration depuis le syst√®me unifi√© avec fallback
  const enabledServiceTypes = await unifiedService.getConfigurationValue(
    UnifiedConfigCategory.SERVICE_PARAMS,
    ServiceParamsConfigKey.AVAILABLE_SERVICE_TYPES,
    [
      ServiceType.MOVING,
      ServiceType.CLEANING,
      ServiceType.PACKING,
      ServiceType.DELIVERY
    ]
  );

  const enabledPackTypes = await unifiedService.getConfigurationValue(
    UnifiedConfigCategory.SERVICE_PARAMS,
    ServiceParamsConfigKey.AVAILABLE_PACK_TYPES,
    ['basic', 'standard', 'premium']
  );

  // R√©cup√©rer les param√®tres de disponibilit√©
  const workingHoursStart = await unifiedService.getConfigurationValue(
    UnifiedConfigCategory.SERVICE_PARAMS,
    ServiceParamsConfigKey.WORKING_HOURS_START,
    '8:00'
  );

  const workingHoursEnd = await unifiedService.getConfigurationValue(
    UnifiedConfigCategory.SERVICE_PARAMS,
    ServiceParamsConfigKey.WORKING_HOURS_END,
    '18:00'
  );

  const workingDays = await unifiedService.getConfigurationValue(
    UnifiedConfigCategory.SERVICE_PARAMS,
    ServiceParamsConfigKey.WORKING_DAYS,
    ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']
  );

  // R√©cup√©rer les param√®tres de trajet
  const defaultTravelSpeed = await unifiedService.getConfigurationValue(
    UnifiedConfigCategory.SERVICE_PARAMS,
    ServiceParamsConfigKey.DEFAULT_TRAVEL_SPEED,
    '30'
  );

  const workerSetupTime = await unifiedService.getConfigurationValue(
    UnifiedConfigCategory.SERVICE_PARAMS,
    ServiceParamsConfigKey.WORKER_SETUP_TIME,
    '15'
  );
  
  return {
    // Types de service
    enabledServiceTypes,
    enabledPackTypes,
    
    // Param√®tres de disponibilit√©
    workingHoursStart,
    workingHoursEnd,
    workingDays,
    
    // Param√®tres de trajet
    defaultTravelSpeed,
    workerSetupTime,
  };
}

/**
 * Sauvegarde les r√®gles m√©tier avec vraie persistance BDD
 */
export async function saveBusinessRulesConfig(config: BusinessRulesConfig): Promise<{ success: boolean, message: string }> {
  try {
    logger.info('üîß [ADMIN-RULES] Sauvegarde des r√®gles m√©tier en cours...');
    logger.info('üîç [ADMIN-RULES] Origine: adminRules.saveBusinessRulesConfig via UnifiedDataService');
    const unifiedService = UnifiedDataService.getInstance();
    
    // Enregistrer toutes les r√®gles m√©tier en BDD avec rafra√Æchissement automatique
    await Promise.all([
    // Moving rules
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.MOVING_EARLY_BOOKING_DAYS,
      config.movingEarlyBookingDays,
      'Jours pour r√©duction de r√©servation anticip√©e (d√©m√©nagement)'
      ),
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.MOVING_EARLY_BOOKING_DISCOUNT,
      config.movingEarlyBookingDiscount,
      'Pourcentage de r√©duction pour r√©servation anticip√©e (d√©m√©nagement)'
      ),
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.MOVING_WEEKEND_SURCHARGE,
      config.movingWeekendSurcharge,
      'Suppl√©ment pour d√©m√©nagement en week-end'
      ),
    
    // Service rules
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.SERVICE_EARLY_BOOKING_DAYS,
      config.serviceEarlyBookingDays,
      'Jours pour r√©duction de r√©servation anticip√©e (service)'
      ),
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.SERVICE_EARLY_BOOKING_DISCOUNT,
      config.serviceEarlyBookingDiscount,
      'Pourcentage de r√©duction pour r√©servation anticip√©e (service)'
      ),
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.SERVICE_WEEKEND_SURCHARGE,
      config.serviceWeekendSurcharge,
      'Suppl√©ment pour service en week-end'
      ),
    
    // Pack rules
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.PACK_EARLY_BOOKING_DAYS,
      config.packEarlyBookingDays,
      'Jours pour r√©duction de r√©servation anticip√©e (pack)'
      ),
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.PACK_EARLY_BOOKING_DISCOUNT,
      config.packEarlyBookingDiscount,
      'Pourcentage de r√©duction pour r√©servation anticip√©e (pack)'
      ),
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.PACK_WEEKEND_SURCHARGE,
      config.packWeekendSurcharge,
      'Suppl√©ment pour pack en week-end'
      ),
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.BUSINESS_RULES,
      BusinessRulesConfigKey.PACK_URGENT_BOOKING_SURCHARGE,
      config.packUrgentBookingSurcharge,
      'Suppl√©ment pour r√©servation urgente de pack'
      ),
    ]);
    
    logger.info('‚úÖ [ADMIN-RULES] R√®gles m√©tier sauvegard√©es avec succ√®s via UnifiedDataService');
    
    return {
      success: true,
      message: "R√®gles m√©tier mises √† jour avec succ√®s en base de donn√©es"
    };
  } catch (error) {
    logger.error(error as Error, "‚ùå [ADMIN-RULES] Erreur lors de la sauvegarde des r√®gles m√©tier via UnifiedDataService");
    return {
      success: false,
      message: "Une erreur est survenue lors de la mise √† jour des r√®gles m√©tier"
    };
  }
}

/**
 * Sauvegarde les limites avec vraie persistance BDD
 */
export async function saveLimitsConfig(config: LimitsConfig): Promise<{ success: boolean, message: string }> {
  try {
    logger.info('üîß [ADMIN-RULES] Sauvegarde des limites en cours...');
    logger.info('üîç [ADMIN-RULES] Origine: adminRules.saveLimitsConfig via UnifiedDataService');
    const unifiedService = UnifiedDataService.getInstance();
    
    // Enregistrer toutes les limites en BDD avec rafra√Æchissement automatique
    await Promise.all([
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.LIMITS,
      LimitsConfigKey.MIN_BOOKING_HOURS,
      config.minBookingHours,
      'Heures minimales avant r√©servation'
      ),
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.LIMITS,
      LimitsConfigKey.MAX_BOOKING_DAYS_AHEAD,
      config.maxBookingDaysAhead,
      'Jours maximum √† l\'avance pour une r√©servation'
      ),
    ]);
    
    logger.info('‚úÖ [ADMIN-RULES] Limites sauvegard√©es avec succ√®s via UnifiedDataService');
    
    return {
      success: true,
      message: "Limites mises √† jour avec succ√®s en base de donn√©es"
    };
  } catch (error) {
    logger.error(error as Error, "‚ùå [ADMIN-RULES] Erreur lors de la sauvegarde des limites via UnifiedDataService");
    return {
      success: false,
      message: "Une erreur est survenue lors de la mise √† jour des limites"
    };
  }
}

/**
 * Sauvegarde les param√®tres de service avec vraie persistance BDD
 */
export async function saveServiceParamsConfig(config: ServiceParamsConfig): Promise<{ success: boolean, message: string }> {
  try {
    logger.info('üîß [ADMIN-RULES] Sauvegarde des param√®tres de service en cours...');
    logger.info('üîç [ADMIN-RULES] Origine: adminRules.saveServiceParamsConfig via UnifiedDataService');
    const unifiedService = UnifiedDataService.getInstance();
    
    // Enregistrer tous les param√®tres en BDD avec rafra√Æchissement automatique
    await Promise.all([
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.SERVICE_PARAMS,
      ServiceParamsConfigKey.AVAILABLE_SERVICE_TYPES,
      config.enabledServiceTypes,
      'Types de services activ√©s dans l\'application'
      ),
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.SERVICE_PARAMS,
      ServiceParamsConfigKey.AVAILABLE_PACK_TYPES,
      config.enabledPackTypes,
      'Types de forfaits activ√©s dans l\'application'
      ),
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.SERVICE_PARAMS,
      ServiceParamsConfigKey.WORKING_HOURS_START,
      config.workingHoursStart,
      'Heure de d√©but de la journ√©e de travail'
      ),
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.SERVICE_PARAMS,
      ServiceParamsConfigKey.WORKING_HOURS_END,
      config.workingHoursEnd,
      'Heure de fin de la journ√©e de travail'
      ),
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.SERVICE_PARAMS,
      ServiceParamsConfigKey.WORKING_DAYS,
      config.workingDays,
      'Jours de travail dans la semaine'
      ),
      unifiedService.updateConfiguration(
      UnifiedConfigCategory.SERVICE_PARAMS,
      ServiceParamsConfigKey.DEFAULT_TRAVEL_SPEED,
      config.defaultTravelSpeed,
        'Vitesse de d√©placement par d√©faut (km/h)'
      ),
    ]);
    
    logger.info('‚úÖ [ADMIN-RULES] Param√®tres de service sauvegard√©s avec succ√®s via UnifiedDataService');
    
    return {
      success: true,
      message: "Param√®tres de service mis √† jour avec succ√®s en base de donn√©es"
    };
  } catch (error) {
    logger.error(error as Error, "‚ùå [ADMIN-RULES] Erreur lors de la sauvegarde des param√®tres de service via UnifiedDataService");
    return {
      success: false,
      message: "Une erreur est survenue lors de la mise √† jour des param√®tres de service"
    };
  }
} 