import { AbstractQuoteCalculator } from './AbstractQuoteCalculator';
import { QuoteContext } from '../valueObjects/QuoteContext';
import { Money } from '../valueObjects/Money';
import { Rule } from '../valueObjects/Rule';
import { ServiceType } from '../enums/ServiceType';
import { QuoteCalculationError } from '../../interfaces/http/errors';
import { Quote } from '../valueObjects/Quote';
import { Discount, DiscountType } from '../valueObjects/Discount';
import { MovingResourceCalculator } from '../services/MovingResourceCalculator';
import { ConfigurationService } from '../services/ConfigurationService';
import { PricingConfigKey } from '../configuration/ConfigurationKey';
import { RuleEngine } from '../services/RuleEngine';

/**
 * Calculateur de devis pour les services de d√©m√©nagement, emballage et autres services
 * 
 * Terminologie des prix:
 * - defaultPrice: Prix unitaire de base sans consid√©ration des quantit√©s, dur√©es, etc.
 * - basePrice: Prix ajust√© apr√®s multiplication par les quantit√©s, dur√©es, nombre de travailleurs
 * - finalPrice: Prix final apr√®s application des r√©ductions et majorations
 */
export class QuoteCalculator extends AbstractQuoteCalculator {
  private readonly resourceCalculator: MovingResourceCalculator;
  private readonly packRules: Rule[];
  private readonly serviceRules: Rule[];
  private readonly configService: ConfigurationService;

  constructor(
    configService: ConfigurationService,
    movingRules: Rule[] = [], 
    packRules: Rule[] = [], 
    serviceRules: Rule[] = []
  ) {
    super(movingRules);
    this.resourceCalculator = new MovingResourceCalculator();
    this.packRules = packRules;
    this.serviceRules = serviceRules;
    this.configService = configService;
  }

  /**
   * Calcule le prix de base (basePrice) ajust√© pour les quantit√©s et dur√©es
   * √† partir du prix unitaire (defaultPrice) et des autres param√®tres du contexte
   */
  getBasePrice(context: QuoteContext): Money {
    const serviceType = context.getServiceType();
    
    switch(serviceType) {
      case ServiceType.MOVING:
        return this.getMovingBasePrice(context);
      case ServiceType.PACK:
        return this.getPackBasePrice(context);
      case ServiceType.SERVICE:
        return this.getServiceBasePrice(context);
      default:
        throw new QuoteCalculationError(`Invalid service type: ${serviceType}`);
    }
  }

  private getMovingBasePrice(context: QuoteContext): Money {
    console.log("\nüöö D√âBUT GETMOVINGBASEPRICE - CALCUL D√âTAILL√â DU PRIX D√âM√âNAGEMENT");
    
    if (context.getServiceType() !== ServiceType.MOVING) {
      console.log("‚ùå ERREUR: Type de contexte invalide pour un devis de d√©m√©nagement");
      throw new QuoteCalculationError('Invalid context type for moving quote');
    }

    // 1. R√©cup√©rer les valeurs du contexte
    const volume = context.getValue<number>('volume') ?? 0;
    const distance = context.getValue<number>('distance') ?? 0;
    const workers = context.getValue<number>('workers') ?? 2; // Nombre de d√©m√©nageurs sp√©cifi√©
    const defaultWorkers = context.getValue<number>('defaultWorkers') ?? 2; // Nombre de d√©m√©nageurs par d√©faut
    // Calculer le nombre de d√©m√©nageurs bas√© sur le volume si non sp√©cifi√©
    const calculatedMovers = context.getValue<number>('numberOfMovers') ?? 
                             this.resourceCalculator.calculateRequiredMovers(volume);
    
    // Utiliser le nombre sp√©cifi√© de workers s'il existe, sinon utiliser le nombre calcul√©
    const numberOfMovers = workers > 0 ? workers : calculatedMovers;
    
    console.log("üìä DONN√âES DE BASE D√âM√âNAGEMENT:", {
      volume: `${volume} m¬≥`,
      distance: `${distance} km`,
      nombreD√©m√©nageurs: numberOfMovers,
      nombreCalcul√©SelonVolume: calculatedMovers
    });
    
    // 2. R√©cup√©ration des frais de carburant et de p√©age du contexte ou calcul si non fournis
    const fuelCost = context.getValue<number>('fuelCost') ?? this.calculateFuelCost(distance);
    const tollCost = context.getValue<number>('tollCost') ?? this.calculateTollCost(distance);
    
    console.log("‚õΩ FRAIS DE D√âPLACEMENT:", {
      carburant: `${Math.round(fuelCost)}‚Ç¨`,
      p√©ages: `${Math.round(tollCost)}‚Ç¨`
    });
    
    // 3. Calcul du prix bas√© sur le volume
    const pricePerM3 = this.configService.getNumberValue(
      PricingConfigKey.MOVING_BASE_PRICE_PER_M3, 
      10 // valeur par d√©faut
    );
    const volumePrice = volume * pricePerM3;
    
    console.log("üì¶ CALCUL PRIX AU VOLUME:", {
      tarifParM3: `${pricePerM3}‚Ç¨/m¬≥`,
      calcul: `${volume} m¬≥ √ó ${pricePerM3}‚Ç¨ = ${volumePrice}‚Ç¨`
    });
    
    // 4. Calcul du prix bas√© sur la distance (main d'≈ìuvre et usure du v√©hicule)
    const pricePerKm = this.configService.getNumberValue(
      PricingConfigKey.MOVING_DISTANCE_PRICE_PER_KM, 
      2 // valeur par d√©faut
    );
    const distancePrice = distance * pricePerKm;
    
    console.log("üöó CALCUL PRIX √Ä LA DISTANCE:", {
      tarifParKm: `${pricePerKm}‚Ç¨/km`,
      calcul: `${distance} km √ó ${pricePerKm}‚Ç¨ = ${distancePrice}‚Ç¨`
    });
    
    // 5. Calcul du co√ªt des d√©m√©nageurs suppl√©mentaires si applicable
    let extraMoversCost = 0;
    if (numberOfMovers > calculatedMovers) {
      const extraMovers = numberOfMovers - calculatedMovers;
      const moverPricePerHour = this.configService.getNumberValue(
        PricingConfigKey.SERVICE_WORKER_PRICE_PER_HOUR,
        40 // valeur par d√©faut
      );
      
      // Estimer la dur√©e du d√©m√©nagement en fonction du volume (environ 1h par 10m¬≥)
      const estimatedHours = Math.max(3, Math.ceil(volume / 10));
      
      console.log("üë∑ D√âM√âNAGEURS SUPPL√âMENTAIRES:", {
        d√©m√©nageursSupp: extraMovers,
        tarifHoraire: `${moverPricePerHour}‚Ç¨/h`,
        heuresEstim√©es: `${estimatedHours}h`
      });
      
      extraMoversCost = (extraMovers * estimatedHours) * moverPricePerHour;
      console.log(`üë∑ CO√õT D√âM√âNAGEURS SUPPL√âMENTAIRES: ${extraMovers} √ó ${estimatedHours}h √ó ${moverPricePerHour}‚Ç¨ = ${extraMoversCost}‚Ç¨`);
    } else {
      console.log("üë∑ PAS DE D√âM√âNAGEURS SUPPL√âMENTAIRES");
    }
    
    // 6. Calculer le prix de base final (basePrice)
    const basePrice = volumePrice + distancePrice + fuelCost + tollCost + extraMoversCost;

    console.log("üí∞ COMPOSANTES DU PRIX FINAL D√âM√âNAGEMENT:", {
      prixVolume: `${Math.round(volumePrice)}‚Ç¨`,
      prixDistance: `${Math.round(distancePrice)}‚Ç¨`,
      fraisCarburant: `${Math.round(fuelCost)}‚Ç¨`,
      fraisP√©ages: `${Math.round(tollCost)}‚Ç¨`,
      coutD√©m√©nageursSupp: `${Math.round(extraMoversCost)}‚Ç¨`,
      prixTotal: `${Math.round(basePrice)}‚Ç¨`
    });
    
    console.log("üöö FIN GETMOVINGBASEPRICE\n");
    return new Money(Math.round(basePrice));
  }
  
  private getPackBasePrice(context: QuoteContext): Money {
    console.log("\nüì¶ D√âBUT GETPACKBASEPRICE - CALCUL D√âTAILL√â DU PRIX EMBALLAGE");
    
    if (context.getServiceType() !== ServiceType.PACK) {
      console.log("‚ùå ERREUR: Type de contexte invalide pour un devis d'emballage");
      throw new QuoteCalculationError('Invalid context type for pack quote');
    }
    
    // 1. R√©cup√©rer les valeurs du contexte
    const defaultPrice = context.getValue<number>('defaultPrice') ?? 0; // Prix unitaire de base
    const duration = context.getValue<number>('duration') ?? 1;
    const workers = context.getValue<number>('workers') ?? 2;
    const baseWorkers = context.getValue<number>('baseWorkers') ?? 2;
    const baseDuration = context.getValue<number>('baseDuration') ?? 1;
    const distance = context.getValue<number>('distance') ?? 0;
    const pickupNeedsLift = context.getValue<boolean>('pickupNeedsLift') ?? false;
    const deliveryNeedsLift = context.getValue<boolean>('deliveryNeedsLift') ?? false;
    
    console.log("üìä DONN√âES DE BASE EMBALLAGE:", {
      defaultPrice: `${defaultPrice}‚Ç¨`,
      duration: `${duration} jour(s)`,
      workers: workers,
      baseWorkers: baseWorkers,
      baseDuration: `${baseDuration} jour(s)`,
      distance: `${distance} km`,
      monteMeubleEnl√®vement: pickupNeedsLift ? "Oui" : "Non",
      monteMeubleLivraison: deliveryNeedsLift ? "Oui" : "Non"
    });
    
    // 2. Calculer le co√ªt des jours suppl√©mentaires
    let extraDurationCost = 0;
    if (duration > baseDuration) {
      const extraDays = duration - baseDuration;
      // Utiliser le taux journalier fixe configur√© dans le projet
      const workerPricePerDay = this.configService.getNumberValue(
        PricingConfigKey.PACK_WORKER_PRICE, 
        120 // valeur par d√©faut
      );
      
      console.log("üìÖ JOURS SUPPL√âMENTAIRES:", {
        joursSupp: extraDays,
        tarifJournalier: `${workerPricePerDay}‚Ç¨/jour (taux fixe)`,
        travailleurs: workers // Nombre total de travailleurs
      });
      
      const extraDayDiscountRate = this.configService.getNumberValue(
        PricingConfigKey.PACK_EXTRA_DAY_DISCOUNT_RATE, 
        0.8 // valeur par d√©faut
      );
      console.log(`üìÖ TAUX DE R√âDUCTION JOURS SUPPL√âMENTAIRES: ${extraDayDiscountRate * 100}%`);
      
      // Multiplier par le nombre total de travailleurs
      extraDurationCost = (extraDays * workers) * workerPricePerDay * extraDayDiscountRate ;
      console.log(`üìÖ CO√õT JOURS SUPPL√âMENTAIRES: ${workerPricePerDay}‚Ç¨ √ó ${extraDays} jour(s) √ó ${extraDayDiscountRate} √ó ${workers} travailleur(s) = ${extraDurationCost.toFixed(2)}‚Ç¨`);
    } else {
      console.log("üìÖ PAS DE JOURS SUPPL√âMENTAIRES");
    }
    
    // 3. Calculer le co√ªt des travailleurs suppl√©mentaires
    let extraWorkerCost = 0;
    if (workers > baseWorkers) {
      const extraWorkers = workers - baseWorkers;
      const workerPricePerDay = this.configService.getNumberValue(
        PricingConfigKey.PACK_WORKER_PRICE, 
        120 // valeur par d√©faut
      );
      
      console.log("üë∑ TRAVAILLEURS SUPPL√âMENTAIRES:", {
        travailleursSupp: extraWorkers,
        tarifJournalier: `${workerPricePerDay}‚Ç¨/jour`,
        dur√©eTotale: `${duration} jour(s)`
      });
      
      const extraWorkerBaseCost = extraWorkers * workerPricePerDay * duration;
      console.log(`üë∑ CO√õT DE BASE: ${extraWorkers} √ó ${workerPricePerDay}‚Ç¨ √ó ${duration} jour(s) = ${extraWorkerBaseCost}‚Ç¨`);
      
      let reductionRate;
      if (duration === 1) {
        reductionRate = this.configService.getNumberValue(
          PricingConfigKey.PACK_WORKER_DISCOUNT_RATE_1_DAY, 
          0.05 // valeur par d√©faut
        );
        console.log(`üë∑ TAUX DE R√âDUCTION (1 JOUR): ${reductionRate * 100}%`);
      } else {
        reductionRate = this.configService.getNumberValue(
          PricingConfigKey.PACK_WORKER_DISCOUNT_RATE_MULTI_DAYS, 
          0.10 // valeur par d√©faut
        );
        console.log(`üë∑ TAUX DE R√âDUCTION (PLUSIEURS JOURS): ${reductionRate * 100}%`);
      }
      
      extraWorkerCost = extraWorkerBaseCost * (1 - reductionRate);
      console.log(`üë∑ CO√õT FINAL APR√àS R√âDUCTION: ${extraWorkerBaseCost}‚Ç¨ √ó ${(1 - reductionRate).toFixed(2)} = ${extraWorkerCost.toFixed(2)}‚Ç¨`);
    } else {
      console.log("üë∑ PAS DE TRAVAILLEURS SUPPL√âMENTAIRES");
    }
    
    // 4. Calculer les frais de distance (km au-del√† de l'inclus)
    let distanceCost = 0;
    const includedDistance = this.configService.getNumberValue(
      PricingConfigKey.PACK_INCLUDED_DISTANCE, 
      20 // valeur par d√©faut
    );
    
    console.log("üöó DISTANCE:", {
      distanceTotale: `${distance} km`,
      distanceIncluse: `${includedDistance} km`
    });
    
    if (distance > includedDistance) {
      const extraKm = distance - includedDistance;
      const pricePerExtraKm = this.configService.getNumberValue(
        PricingConfigKey.PACK_EXTRA_KM_PRICE, 
        1.5 // valeur par d√©faut
      );
      
      distanceCost = extraKm * pricePerExtraKm;
      console.log(`üöó CO√õT DISTANCE SUPPL√âMENTAIRE: (${distance} - ${includedDistance}) √ó ${pricePerExtraKm}‚Ç¨ = ${extraKm} km √ó ${pricePerExtraKm}‚Ç¨ = ${distanceCost.toFixed(2)}‚Ç¨`);
    } else {
      console.log("üöó PAS DE FRAIS DE DISTANCE SUPPL√âMENTAIRE (distance incluse)");
    }
    
    // 5. Calculer le co√ªt du monte-meuble
    let liftCost = 0;
    const liftPrice = this.configService.getNumberValue(
      PricingConfigKey.PACK_LIFT_PRICE, 
      200 // valeur par d√©faut
    );
    
    console.log("üèóÔ∏è MONTE-MEUBLE:", {
      tarifUnitaire: `${liftPrice}‚Ç¨`,
      enl√®vement: pickupNeedsLift ? "Oui" : "Non",
      livraison: deliveryNeedsLift ? "Oui" : "Non"
    });
    
    if (pickupNeedsLift) {
      liftCost += liftPrice;
      console.log(`üèóÔ∏è CO√õT MONTE-MEUBLE ENL√àVEMENT: ${liftPrice}‚Ç¨`);
    }
    
    if (deliveryNeedsLift) {
      liftCost += liftPrice;
      console.log(`üèóÔ∏è CO√õT MONTE-MEUBLE LIVRAISON: ${liftPrice}‚Ç¨`);
    }
    
    console.log(`üèóÔ∏è CO√õT TOTAL MONTE-MEUBLE: ${liftCost}‚Ç¨`);
    
    // 6. Calculer le prix de base final (basePrice)
    const basePrice = defaultPrice + extraDurationCost + extraWorkerCost + distanceCost + liftCost;
    
    console.log("üí∞ COMPOSANTES DU PRIX FINAL EMBALLAGE:", {
      prixDeBase: `${defaultPrice}‚Ç¨`,
      coutJoursSupp: `${extraDurationCost.toFixed(2)}‚Ç¨`,
      coutTravailleursSupp: `${extraWorkerCost.toFixed(2)}‚Ç¨`,
      fraisDistance: `${distanceCost.toFixed(2)}‚Ç¨`,
      fraisMonteMeuble: `${liftCost}‚Ç¨`,
      prixTotal: `${basePrice.toFixed(2)}‚Ç¨`,
      prixArrondi: `${Math.round(basePrice)}‚Ç¨`
    });
    
    console.log("üì¶ FIN GETPACKBASEPRICE\n");
    return new Money(Math.round(basePrice));
  }

  private getServiceBasePrice(context: QuoteContext): Money {
    console.log("\nüî¢ D√âBUT GETSERVICEBASEPRICE - CALCUL D√âTAILL√â DU PRIX");
    
    if (context.getServiceType() !== ServiceType.SERVICE) {
      console.log("‚ùå ERREUR: Type de contexte invalide pour un devis de service");
      throw new QuoteCalculationError('Invalid context type for service quote');
    }
    
    // 1. R√©cup√©rer les valeurs du contexte
    const defaultPrice = context.getValue<number>('defaultPrice') ?? 0; // Prix unitaire de base
    const duration = context.getValue<number>('duration') ?? 1;
    const workers = context.getValue<number>('workers') ?? 1;
    const defaultDuration = context.getValue<number>('defaultDuration') ?? 1;
    const defaultWorkers = context.getValue<number>('defaultWorkers') ?? 1;
    
    console.log("üìä DONN√âES DE BASE R√âCUP√âR√âES:", {
      defaultPrice: `${defaultPrice}‚Ç¨`,
      duration: `${duration}h`,
      workers: workers,
      defaultDuration: `${defaultDuration}h`,
      defaultWorkers: defaultWorkers
    });
    
    // 2. V√©rifier si c'est la configuration par d√©faut
    if (duration === defaultDuration && workers === defaultWorkers) {
      console.log("‚ÑπÔ∏è CONFIGURATION PAR D√âFAUT D√âTECT√âE - RETOUR DU PRIX PAR D√âFAUT");
      console.log(`üí∞ PRIX FINAL: ${defaultPrice}‚Ç¨`);
      return new Money(defaultPrice);
    }
    
    console.log("‚ÑπÔ∏è MODIFICATIONS D√âTECT√âES - CALCUL DU PRIX AJUST√â");
    
    // 3. Calculer le co√ªt des travailleurs suppl√©mentaires
    let extraWorkerCost = 0;
    if (workers > defaultWorkers) {
      const extraWorkers = workers - defaultWorkers;
      const workerPricePerHour = this.configService.getNumberValue(
        PricingConfigKey.SERVICE_WORKER_PRICE_PER_HOUR, 
        35 // valeur par d√©faut
      );
      
      console.log("üë∑ TRAVAILLEURS SUPPL√âMENTAIRES:", {
        extraWorkers: extraWorkers,
        tarifHoraire: `${workerPricePerHour}‚Ç¨/h`,
        dur√©eTotale: `${duration}h`
      });
      
      const extraWorkerBaseCost = (extraWorkers * duration) * workerPricePerHour;
      console.log(`üë∑ CO√õT DE BASE: ${extraWorkers} √ó ${workerPricePerHour}‚Ç¨ √ó ${duration}h = ${extraWorkerBaseCost}‚Ç¨`);
      
      let reductionRate;
      if (duration <= 2) {
        reductionRate = this.configService.getNumberValue(
          PricingConfigKey.SERVICE_WORKER_DISCOUNT_RATE_SHORT, 
          0.1 // valeur par d√©faut
        );
        console.log(`üë∑ TAUX DE R√âDUCTION (DUR√âE ‚â§ 2h): ${reductionRate * 100}%`);
      } else {
        reductionRate = this.configService.getNumberValue(
          PricingConfigKey.SERVICE_WORKER_DISCOUNT_RATE_LONG, 
          0.15 // valeur par d√©faut
        );
        console.log(`üë∑ TAUX DE R√âDUCTION (DUR√âE > 2h): ${reductionRate * 100}%`);
      }
      
      extraWorkerCost = extraWorkerBaseCost * (1 - reductionRate);
      console.log(`üë∑ CO√õT FINAL APR√àS R√âDUCTION: ${extraWorkerBaseCost}‚Ç¨ √ó ${(1 - reductionRate).toFixed(2)} = ${extraWorkerCost.toFixed(2)}‚Ç¨`);
    } else {
      console.log("üë∑ PAS DE TRAVAILLEURS SUPPL√âMENTAIRES");
    }
    
    // 4. Calculer le co√ªt des heures suppl√©mentaires
    let extraHoursCost = 0;
    if (duration > defaultDuration) {
      const extraHours = duration - defaultDuration;
      // Utiliser le taux horaire fixe configur√© dans le projet au lieu de calculer √† partir du prix par d√©faut
      const hourlyRate = this.configService.getNumberValue(
        PricingConfigKey.SERVICE_WORKER_PRICE_PER_HOUR, 
        35 // valeur par d√©faut
      );
      
      console.log("‚è±Ô∏è HEURES SUPPL√âMENTAIRES:", {
        extraHours: extraHours,
        tarifHoraire: `${hourlyRate}‚Ç¨/h (taux fixe)`,
        travailleurs: workers // Nombre total de travailleurs, pas seulement les travailleurs par d√©faut
      });
      
      const extraHourRate = this.configService.getNumberValue(
        PricingConfigKey.SERVICE_EXTRA_HOUR_RATE, 
        0.9 // valeur par d√©faut: 90% du tarif horaire standard
      );
      console.log(`‚è±Ô∏è FACTEUR TARIF HEURES SUPPL√âMENTAIRES: ${extraHourRate * 100}% du tarif standard`);
      
      // Multiplier par le nombre TOTAL de travailleurs (workers), pas seulement par le nombre de travailleurs par d√©faut
      extraHoursCost = hourlyRate * extraHours * extraHourRate * workers;
      console.log(`‚è±Ô∏è CO√õT HEURES SUPPL√âMENTAIRES: ${hourlyRate}‚Ç¨ √ó ${extraHours}h √ó ${extraHourRate} √ó ${workers} travailleur(s) = ${extraHoursCost.toFixed(2)}‚Ç¨`);
    } else {
      console.log("‚è±Ô∏è PAS D'HEURES SUPPL√âMENTAIRES");
    }
    
    // 5. Calculer le prix de base final (basePrice)
    const basePrice = defaultPrice + extraWorkerCost + extraHoursCost;
    
    console.log("üí∞ COMPOSANTES DU PRIX FINAL:", {
      prixDeBase: `${defaultPrice}‚Ç¨`,
      coutTravailleursSupp: `${extraWorkerCost.toFixed(2)}‚Ç¨`,
      coutHeuresSupp: `${extraHoursCost.toFixed(2)}‚Ç¨`,
      prixTotal: `${basePrice.toFixed(2)}‚Ç¨`,
      prixArrondi: `${Math.round(basePrice)}‚Ç¨`
    });
    
    console.log("üî¢ FIN GETSERVICEBASEPRICE\n");
    return new Money(Math.round(basePrice));
  }
  
  /**
   * Calcule les frais de carburant en fonction de la distance
   * @param distance Distance en km
   * @returns Co√ªt du carburant en euros
   */
  private calculateFuelCost(distance: number): number {
    // R√©cup√©rer les valeurs de configuration
    const fuelConsumptionPer100km = this.configService.getNumberValue(
      PricingConfigKey.FUEL_CONSUMPTION_PER_100KM, 
      25 // valeur par d√©faut
    );
    
    const fuelPricePerLiter = this.configService.getNumberValue(
      PricingConfigKey.FUEL_PRICE_PER_LITER, 
      1.8 // valeur par d√©faut
    );
    
    // Consommation totale en litres
    const fuelConsumption = (distance * fuelConsumptionPer100km) / 100;
    
    // Co√ªt du carburant
    return fuelConsumption * fuelPricePerLiter;
  }
  
  /**
   * Estime les frais de p√©age en fonction de la distance
   * @param distance Distance en km
   * @returns Co√ªt estim√© des p√©ages en euros
   */
  private calculateTollCost(distance: number): number {
    // R√©cup√©rer les valeurs de configuration
    const highwayRatio = this.configService.getNumberValue(
      PricingConfigKey.HIGHWAY_RATIO, 
      0.7 // valeur par d√©faut
    );
    
    const tollCostPerKm = this.configService.getNumberValue(
      PricingConfigKey.TOLL_COST_PER_KM, 
      0.15 // valeur par d√©faut
    );
    
    // Estimation de la distance sur autoroute
    const highwayDistance = distance * highwayRatio;
    
    // Co√ªt des p√©ages
    return highwayDistance * tollCostPerKm;
  }

  private enrichContextWithMovingResources(context: QuoteContext): QuoteContext {
    const volume = context.getValue<number>('volume') ?? 0;
    const distance = context.getValue<number>('distance') ?? 0;
    const numberOfMovers = this.resourceCalculator.calculateRequiredMovers(volume);
    const numberOfBoxes = this.resourceCalculator.calculateEstimatedBoxes(volume);
    
    // Utiliser les frais de carburant et de p√©age du contexte ou les calculer si non fournis
    const fuelCost = context.getValue<number>('fuelCost') ?? this.calculateFuelCost(distance);
    const tollCost = context.getValue<number>('tollCost') ?? this.calculateTollCost(distance);
    
    // Cr√©er un nouveau contexte avec le m√™me type de service que le contexte d'origine
    const serviceType = context.getServiceType();
    const newContext = new QuoteContext(serviceType);
    
    // Copier toutes les donn√©es existantes
    const existingData = context.getAllData();
    Object.keys(existingData).forEach(key => {
      newContext.setValue(key, existingData[key]);
    });
    
    // Ajouter les nouvelles donn√©es
    newContext.setValue('numberOfMovers', numberOfMovers);
    newContext.setValue('numberOfBoxes', numberOfBoxes);
    newContext.setValue('fuelCost', fuelCost);
    newContext.setValue('tollCost', tollCost);
    
    return newContext;
  }

  async calculate(context: QuoteContext): Promise<Quote> {
    console.log("\n==== D√âBUT QUOTEACLCULATOR.CALCULATE ====");
    console.log("üìã CONTEXTE RE√áU:", {
      serviceType: context.getServiceType(),
      data: context.getAllData()
    });
    
    try {
      const serviceType = context.getServiceType();
      console.log("üîç TYPE DE SERVICE:", serviceType);
      
      // V√©rifier si les valeurs ont √©t√© modifi√©es par rapport aux valeurs par d√©faut
      const data = context.getAllData();
      const hasModifications = this.hasModifications(context);
      
      console.log("üîç V√âRIFICATION DES MODIFICATIONS:");
      if (data.defaultDuration && data.duration) {
        console.log(`   - Dur√©e: ${data.duration} (d√©faut: ${data.defaultDuration}) - ${data.duration !== data.defaultDuration ? 'MODIFI√âE' : 'IDENTIQUE'}`);
      }
      if (data.defaultWorkers && data.workers) {
        console.log(`   - Travailleurs: ${data.workers} (d√©faut: ${data.defaultWorkers}) - ${data.workers !== data.defaultWorkers ? 'MODIFI√âS' : 'IDENTIQUES'}`);
      }
      console.log(`   - Conclusion: ${hasModifications ? 'MODIFICATIONS D√âTECT√âES' : 'AUCUNE MODIFICATION'}`);
      
      // Si aucune modification, retourner directement le prix par d√©faut sans appliquer de r√®gles
      if (!hasModifications) {
        console.log(`‚ÑπÔ∏è AUCUNE MODIFICATION - UTILISATION DU PRIX PAR D√âFAUT SANS APPLIQUER DE R√àGLES`);
        return new Quote(
          new Money(data.defaultPrice || 0),
          new Money(data.defaultPrice || 0),
          [],
          serviceType
        );
      }
      
      // Sinon, proc√©der au calcul normal avec enrichissement et application des r√®gles
      console.log(`‚ÑπÔ∏è MODIFICATIONS D√âTECT√âES - APPLICATION DES R√àGLES`);
      
      let enrichedContext = context;
      let rules: Rule[];
      
      // Choisir les r√®gles appropri√©es et enrichir le contexte selon le type
      console.log("üîÑ S√âLECTION DES R√àGLES en fonction du type de service");
      switch(serviceType) {
        case ServiceType.MOVING:
          console.log("üöö SERVICE DE TYPE MOVING");
          console.log("üîÑ ENRICHISSEMENT DU CONTEXTE MOVING:", {
            avant: context.getAllData()
          });
          enrichedContext = this.enrichContextWithMovingResources(context);
          console.log("‚úÖ CONTEXTE ENRICHI:", {
            apr√®s: enrichedContext.getAllData()
          });
          rules = this.rules;         
          console.log(`üìã ${this.rules.length} r√®gles MOVING charg√©es`);
          console.log("üìã R√àGLES MOVING:", this.rules);
          break;
        case ServiceType.PACK:
          console.log("üì¶ SERVICE DE TYPE PACK");
          rules = this.packRules;
          console.log(`üìã ${this.packRules.length} r√®gles PACK charg√©es`);
          console.log("üìã R√àGLES PACK:", this.packRules);
          break;
        case ServiceType.SERVICE:
          console.log("üõ†Ô∏è SERVICE DE TYPE SERVICE");
          rules = this.serviceRules;
          console.log(`üìã ${this.serviceRules.length} r√®gles SERVICE charg√©es`);
          console.log("üìã R√àGLES SERVICE:", this.serviceRules);
          break;
        default:
          console.log("‚ùå TYPE DE SERVICE INVALIDE:", serviceType);
          throw new QuoteCalculationError(`Invalid service type: ${serviceType}`);
      }
      
      console.log("üßÆ CALCUL DU PRIX DE BASE");
      try {
        // Calculer le prix de base
        const basePrice = this.getBasePrice(enrichedContext);
        console.log("‚úÖ PRIX DE BASE CALCUL√â:", basePrice.getAmount());
        
        console.log("‚öôÔ∏è CR√âATION D'UNE INSTANCE DE RULEENGINE");
        // Instancier un nouveau RuleEngine avec les r√®gles appropri√©es
        // pour s'assurer que les bonnes r√®gles sont utilis√©es
        const { RuleEngine } = require('../services/RuleEngine');
        const ruleEngine = new RuleEngine(rules);
        
        console.log("üîç EX√âCUTION DES R√àGLES pour ajuster le prix");
        // Appliquer les r√®gles sp√©cifiques au type de service
        try {
          const result = ruleEngine.execute(enrichedContext, basePrice);
          console.log("‚úÖ R√àGLES APPLIQU√âES AVEC SUCC√àS");
          console.log("üí∞ R√âSULTAT:", {
            basePrice: basePrice.getAmount(),
            finalPrice: result.finalPrice.getAmount(),
            discounts: result.discounts.length
          });
          
          const { finalPrice, discounts } = result;
          
          // Retourner le devis final
          const quote = new Quote(
            basePrice,
            finalPrice,
            discounts,
            serviceType // Passer directement le type de service au lieu du contexte
          );
          
          console.log("==== FIN QUOTEACLCULATOR.CALCULATE (SUCC√àS) ====\n");
          return quote;
        } catch (ruleError) {
          console.log("‚ùå ERREUR DANS L'EX√âCUTION DES R√àGLES:", ruleError);
          if (ruleError instanceof Error) {
            console.log("üìã TYPE D'ERREUR:", ruleError.constructor.name);
            console.log("üìã MESSAGE:", ruleError.message);
            console.log("üìã STACK:", ruleError.stack);
          }
          throw new QuoteCalculationError(`Error applying rules: ${ruleError instanceof Error ? ruleError.message : String(ruleError)}`);
        }
      } catch (basePriceError) {
        console.log("‚ùå ERREUR DANS LE CALCUL DU PRIX DE BASE:", basePriceError);
        if (basePriceError instanceof Error) {
          console.log("üìã TYPE D'ERREUR:", basePriceError.constructor.name);
          console.log("üìã MESSAGE:", basePriceError.message);
          console.log("üìã STACK:", basePriceError.stack);
        }
        throw basePriceError; // Propager l'erreur telle quelle
      }
    } catch (error) {
      console.log("‚ùå ERREUR GLOBALE DANS QUOTEACLCULATOR.CALCULATE:", error);
      if (error instanceof Error) {
        console.log("üìã TYPE D'ERREUR:", error.constructor.name);
        console.log("üìã MESSAGE:", error.message);
        console.log("üìã STACK:", error.stack);
      }
      console.log("==== FIN QUOTEACLCULATOR.CALCULATE (ERREUR) ====\n");
      throw error;
    }
  }
  
  /**
   * V√©rifie si les valeurs du contexte ont √©t√© modifi√©es par rapport aux valeurs par d√©faut
   */
  private hasModifications(context: QuoteContext): boolean {
    const data = context.getAllData();
    
    // V√©rifier si la dur√©e et le nombre de travailleurs ont √©t√© modifi√©s
    const isDurationModified = data.duration !== undefined && 
                              data.defaultDuration !== undefined && 
                              data.duration !== data.defaultDuration;
                            
    const isWorkersModified = data.workers !== undefined && 
                             data.defaultWorkers !== undefined && 
                             data.workers !== data.defaultWorkers;
    
    // Pour les types sp√©cifiques, v√©rifier d'autres modifications potentielles
    switch(context.getServiceType()) {
      case ServiceType.PACK:
        // V√©rifier les options de monte-meuble et la distance
        const hasLiftOption = data.pickupNeedsLift === true || data.deliveryNeedsLift === true;
        const hasExtraDistance = (data.distance ?? 0) > (data.includedDistance || 20);
        return isDurationModified || isWorkersModified || hasLiftOption || hasExtraDistance;
        
      case ServiceType.MOVING:
        // Pour les d√©m√©nagements, v√©rifier le volume et la distance
        const hasCustomVolume = data.volume !== undefined && data.defaultVolume !== undefined && 
                              data.volume !== data.defaultVolume;
        return isDurationModified || isWorkersModified || hasCustomVolume;
        
      case ServiceType.SERVICE:
        // Pour les services, seules la dur√©e et le nombre de travailleurs comptent
        return isDurationModified || isWorkersModified;
        
      default:
        // Par d√©faut, consid√©rer qu'il y a des modifications
        return true;
    }
  }
} 