/**
 * ============================================================================
 * SERVICE D'AUTO-D√âTECTION DES CONTRAINTES LOGISTIQUES
 * ============================================================================
 *
 * üéØ OBJECTIF :
 * Centraliser toute la logique d'auto-d√©tection pour monte-meuble et distance
 * de portage. Ce service √©limine les duplications identifi√©es dans :
 * - MovingConstraintsAndServicesModal.tsx
 * - moving-service/index.ts
 * - MovingConstraintsModule.ts
 *
 * üìã FONCTIONNALIT√âS :
 * - D√©tection automatique monte-meuble selon √©tage/ascenseur/volume
 * - D√©tection automatique distance de portage selon distance d√©clar√©e
 * - Calcul automatique des surcharges associ√©es
 * - Support pour adresses de d√©part ET d'arriv√©e
 *
 * üîß UTILISATION :
 * ```typescript
 * const result = AutoDetectionService.detectAutomaticConstraints(
 *   pickupData,
 *   deliveryData,
 *   volume
 * );
 *
 * if (result.pickup.furnitureLiftRequired) {
 *   // Ajouter contrainte monte-meuble au d√©part
 * }
 *
 * if (result.delivery.longCarryingDistance) {
 *   // Ajouter contrainte distance de portage √† l'arriv√©e
 * }
 * ```
 */

import { DefaultValues } from '../configuration/DefaultValues';

/**
 * üìã INTERFACES
 */

/**
 * Donn√©es d'une adresse (d√©part ou arriv√©e)
 */
export interface AddressData {
  floor: number;
  elevator: 'no' | 'small' | 'medium' | 'large';
  elevatorUnavailable?: boolean;
  elevatorUnsuitable?: boolean;
  elevatorForbiddenMoving?: boolean;
  carryDistance?: '0-10' | '10-30' | '30+';
  constraints?: string[];
}

/**
 * Donn√©es brutes depuis un formulaire
 */
export interface FormAddressData {
  floor?: string | number;
  elevator?: string;
  carryDistance?: string;
  selectedConstraints?: string[];
}

/**
 * R√©sultat de la d√©tection pour une adresse
 */
export interface AddressDetectionResult {
  furnitureLiftRequired: boolean;
  furnitureLiftReason?: string;
  longCarryingDistance: boolean;
  carryingDistanceReason?: string;
}

/**
 * R√©sultat complet de l'auto-d√©tection
 */
export interface AutoDetectionResult {
  pickup: AddressDetectionResult;
  delivery: AddressDetectionResult;
  totalSurcharge: number;
  appliedConstraints: Array<{
    id: string;
    location: 'pickup' | 'delivery';
    reason: string;
    surcharge: number;
  }>;
}

/**
 * ============================================================================
 * SERVICE D'AUTO-D√âTECTION
 * ============================================================================
 */
export class AutoDetectionService {

  /**
   * CONSTANTES DE CONFIGURATION
   */
  private static readonly FURNITURE_LIFT_FLOOR_THRESHOLD = 3; // √âtage √† partir duquel le monte-meuble est requis
  private static readonly FURNITURE_LIFT_SURCHARGE = 200; // Surcharge pour monte-meuble (en ‚Ç¨)
  private static readonly LONG_CARRYING_DISTANCE_THRESHOLD = '30+'; // Seuil distance de portage
  private static readonly LONG_CARRYING_DISTANCE_SURCHARGE = 50; // Surcharge distance portage (en ‚Ç¨)

  /**
   * üéØ D√âTECTION COMPL√àTE DES CONTRAINTES AUTOMATIQUES
   *
   * Analyse les deux adresses (d√©part et arriv√©e) et d√©tecte automatiquement :
   * - Monte-meuble requis
   * - Distance de portage longue
   *
   * @param pickupData Donn√©es de l'adresse de d√©part
   * @param deliveryData Donn√©es de l'adresse d'arriv√©e
   * @param volume Volume du d√©m√©nagement (optionnel)
   * @returns R√©sultat complet de l'auto-d√©tection
   */
  static detectAutomaticConstraints(
    pickupData: AddressData,
    deliveryData: AddressData,
    volume?: number
  ): AutoDetectionResult {
    // D√©tection monte-meuble pour chaque adresse
    const pickupFurnitureLift = this.detectFurnitureLift(pickupData, volume);
    const deliveryFurnitureLift = this.detectFurnitureLift(deliveryData, volume);

    // D√©tection distance de portage pour chaque adresse
    const pickupCarrying = this.detectLongCarryingDistance(pickupData);
    const deliveryCarrying = this.detectLongCarryingDistance(deliveryData);

    // Compilation des contraintes appliqu√©es
    const appliedConstraints: Array<{
      id: string;
      location: 'pickup' | 'delivery';
      reason: string;
      surcharge: number;
    }> = [];

    let totalSurcharge = 0;

    // Ajout monte-meuble d√©part
    if (pickupFurnitureLift.furnitureLiftRequired) {
      appliedConstraints.push({
        id: 'furniture_lift',
        location: 'pickup',
        reason: pickupFurnitureLift.furnitureLiftReason || 'Monte-meuble requis au d√©part',
        surcharge: this.FURNITURE_LIFT_SURCHARGE
      });
      totalSurcharge += this.FURNITURE_LIFT_SURCHARGE;
    }

    // Ajout monte-meuble arriv√©e
    if (deliveryFurnitureLift.furnitureLiftRequired) {
      appliedConstraints.push({
        id: 'furniture_lift',
        location: 'delivery',
        reason: deliveryFurnitureLift.furnitureLiftReason || 'Monte-meuble requis √† l\'arriv√©e',
        surcharge: this.FURNITURE_LIFT_SURCHARGE
      });
      totalSurcharge += this.FURNITURE_LIFT_SURCHARGE;
    }

    // Ajout distance portage d√©part
    if (pickupCarrying.longCarryingDistance) {
      appliedConstraints.push({
        id: 'long_carrying_distance',
        location: 'pickup',
        reason: pickupCarrying.carryingDistanceReason || 'Distance de portage longue au d√©part',
        surcharge: this.LONG_CARRYING_DISTANCE_SURCHARGE
      });
      totalSurcharge += this.LONG_CARRYING_DISTANCE_SURCHARGE;
    }

    // Ajout distance portage arriv√©e
    if (deliveryCarrying.longCarryingDistance) {
      appliedConstraints.push({
        id: 'long_carrying_distance',
        location: 'delivery',
        reason: deliveryCarrying.carryingDistanceReason || 'Distance de portage longue √† l\'arriv√©e',
        surcharge: this.LONG_CARRYING_DISTANCE_SURCHARGE
      });
      totalSurcharge += this.LONG_CARRYING_DISTANCE_SURCHARGE;
    }

    return {
      pickup: {
        furnitureLiftRequired: pickupFurnitureLift.furnitureLiftRequired,
        furnitureLiftReason: pickupFurnitureLift.furnitureLiftReason,
        longCarryingDistance: pickupCarrying.longCarryingDistance,
        carryingDistanceReason: pickupCarrying.carryingDistanceReason
      },
      delivery: {
        furnitureLiftRequired: deliveryFurnitureLift.furnitureLiftRequired,
        furnitureLiftReason: deliveryFurnitureLift.furnitureLiftReason,
        longCarryingDistance: deliveryCarrying.longCarryingDistance,
        carryingDistanceReason: deliveryCarrying.carryingDistanceReason
      },
      totalSurcharge,
      appliedConstraints
    };
  }

  /**
   * üö™ D√âTECTION MONTE-MEUBLE POUR UNE ADRESSE
   *
   * Logique unifi√©e et harmonis√©e bas√©e sur :
   * - √âtage (> 3 = requis)
   * - Type d'ascenseur (no/small/medium/large)
   * - √âtat de l'ascenseur (indisponible/inadapt√©/interdit)
   * - Volume (petits volumes peuvent √™tre exempt√©s)
   *
   * @param addressData Donn√©es de l'adresse √† analyser
   * @param volume Volume du d√©m√©nagement (optionnel)
   * @returns R√©sultat de la d√©tection monte-meuble
   */
  static detectFurnitureLift(
    addressData: AddressData,
    volume?: number
  ): AddressDetectionResult {
    const floor = addressData.floor || 0;
    const elevator = addressData.elevator || 'no';
    const elevatorUnavailable = addressData.elevatorUnavailable || false;
    const elevatorUnsuitable = addressData.elevatorUnsuitable || false;
    const elevatorForbiddenMoving = addressData.elevatorForbiddenMoving || false;

    // CAS 1: Ascenseur medium/large fonctionnel ‚Üí PAS de monte-meuble
    if (
      ['medium', 'large'].includes(elevator) &&
      !elevatorUnavailable &&
      !elevatorUnsuitable &&
      !elevatorForbiddenMoving
    ) {
      return {
        furnitureLiftRequired: false,
        longCarryingDistance: false
      };
    }

    // CAS 2: Aucun ascenseur - Logique harmonis√©e
    if (elevator === 'no') {
      if (floor > this.FURNITURE_LIFT_FLOOR_THRESHOLD) {
        return {
          furnitureLiftRequired: true,
          furnitureLiftReason: `√âtage ${floor} sans ascenseur (seuil: ${this.FURNITURE_LIFT_FLOOR_THRESHOLD})`,
          longCarryingDistance: false
        };
      }
      // √âtage <= seuil ‚Üí pas de monte-meuble
      return {
        furnitureLiftRequired: false,
        longCarryingDistance: false
      };
    }

    // CAS 3: Ascenseur small ou probl√®mes avec ascenseur medium/large
    if (
      elevator === 'small' ||
      elevatorUnavailable ||
      elevatorUnsuitable ||
      elevatorForbiddenMoving
    ) {
      // √âtage > seuil ‚Üí monte-meuble requis
      if (floor > this.FURNITURE_LIFT_FLOOR_THRESHOLD) {
        let reason = `√âtage ${floor} avec ascenseur ${elevator}`;
        if (elevatorUnavailable) reason += ' (indisponible)';
        if (elevatorUnsuitable) reason += ' (inadapt√©)';
        if (elevatorForbiddenMoving) reason += ' (interdit d√©m√©nagement)';

        return {
          furnitureLiftRequired: true,
          furnitureLiftReason: reason,
          longCarryingDistance: false
        };
      }

      // √âtage <= seuil ‚Üí pas de monte-meuble (m√™me avec petit ascenseur)
      return {
        furnitureLiftRequired: false,
        longCarryingDistance: false
      };
    }

    // Par d√©faut : pas de monte-meuble
    return {
      furnitureLiftRequired: false,
      longCarryingDistance: false
    };
  }

  /**
   * üìè D√âTECTION DISTANCE DE PORTAGE LONGUE
   *
   * Logique unifi√©e bas√©e sur la distance d√©clar√©e :
   * - '0-10' : courte (pas de surcharge)
   * - '10-30' : moyenne (pas de surcharge)
   * - '30+' : longue (surcharge appliqu√©e)
   *
   * @param addressData Donn√©es de l'adresse √† analyser
   * @returns R√©sultat de la d√©tection distance de portage
   */
  static detectLongCarryingDistance(
    addressData: AddressData
  ): AddressDetectionResult {
    const carryDistance = addressData.carryDistance;

    // V√©rifier si la distance est longue (30+)
    if (carryDistance === this.LONG_CARRYING_DISTANCE_THRESHOLD) {
      return {
        furnitureLiftRequired: false,
        longCarryingDistance: true,
        carryingDistanceReason: 'Distance de portage > 30m'
      };
    }

    // Sinon, pas de distance longue d√©tect√©e
    return {
      furnitureLiftRequired: false,
      longCarryingDistance: false
    };
  }

  /**
   * üîç OBTENIR LES IDS DES CONTRAINTES AUTOMATIQUES
   *
   * Utilitaire pour obtenir les IDs des contraintes √† ajouter/retirer
   * dans les listes de contraintes s√©lectionn√©es.
   *
   * @param result R√©sultat de l'auto-d√©tection
   * @returns Liste des IDs de contraintes √† appliquer
   */
  static getAutomaticConstraintIds(result: AutoDetectionResult): {
    pickup: string[];
    delivery: string[];
  } {
    const pickupIds: string[] = [];
    const deliveryIds: string[] = [];

    result.appliedConstraints.forEach(constraint => {
      if (constraint.location === 'pickup') {
        pickupIds.push(constraint.id);
      } else {
        deliveryIds.push(constraint.id);
      }
    });

    return {
      pickup: pickupIds,
      delivery: deliveryIds
    };
  }

  /**
   * üí∞ CALCULER LA SURCHARGE TOTALE DES CONTRAINTES AUTOMATIQUES
   *
   * Utilitaire pour obtenir le montant total des surcharges automatiques.
   *
   * @param result R√©sultat de l'auto-d√©tection
   * @returns Montant total des surcharges (en ‚Ç¨)
   */
  static calculateAutomaticSurcharges(result: AutoDetectionResult): number {
    return result.totalSurcharge;
  }

  /**
   * üìä OBTENIR UN R√âSUM√â TEXTUEL DES D√âTECTIONS
   *
   * G√©n√®re un r√©sum√© lisible des contraintes d√©tect√©es.
   * Utile pour affichage dans l'UI ou logging.
   *
   * @param result R√©sultat de l'auto-d√©tection
   * @returns Tableau de messages descriptifs
   */
  static getSummary(result: AutoDetectionResult): string[] {
    const summary: string[] = [];

    result.appliedConstraints.forEach(constraint => {
      const location = constraint.location === 'pickup' ? 'd√©part' : 'arriv√©e';
      summary.push(`[${location}] ${constraint.reason} (+${constraint.surcharge}‚Ç¨)`);
    });

    if (summary.length === 0) {
      summary.push('Aucune contrainte automatique d√©tect√©e');
    } else {
      summary.push(`TOTAL SURCHARGES: ${result.totalSurcharge}‚Ç¨`);
    }

    return summary;
  }

  /**
   * ‚úÖ VALIDER LES DONN√âES D'ADRESSE
   *
   * V√©rifie que les donn√©es fournies sont valides avant traitement.
   *
   * @param addressData Donn√©es d'adresse √† valider
   * @returns true si valide, false sinon
   */
  static validateAddressData(addressData: AddressData): boolean {
    // V√©rifier que l'√©tage est un nombre positif
    if (typeof addressData.floor !== 'number' || addressData.floor < 0) {
      return false;
    }

    // V√©rifier que l'ascenseur a une valeur valide
    const validElevatorValues = ['no', 'small', 'medium', 'large'];
    if (!validElevatorValues.includes(addressData.elevator)) {
      return false;
    }

    // V√©rifier la distance de portage si fournie
    if (addressData.carryDistance) {
      const validCarryDistances = ['0-10', '10-30', '30+'];
      if (!validCarryDistances.includes(addressData.carryDistance)) {
        return false;
      }
    }

    return true;
  }

  /**
   * üîß CONSTRUIRE AddressData DEPUIS DONN√âES FORMULAIRE
   *
   * Convertit les donn√©es brutes d'un formulaire en AddressData typ√©.
   * Centralise la logique de parsing et normalisation.
   *
   * @param formData Donn√©es brutes du formulaire
   * @returns AddressData normalis√©
   */
  static buildAddressDataFromForm(formData: FormAddressData): AddressData {
    const floor = typeof formData.floor === 'string'
      ? parseInt(formData.floor) || 0
      : formData.floor || 0;

    const elevator = (formData.elevator || 'no') as 'no' | 'small' | 'medium' | 'large';
    const selectedConstraints = formData.selectedConstraints || [];

    return {
      floor,
      elevator,
      elevatorUnavailable: selectedConstraints.includes('elevator_unavailable'),
      elevatorUnsuitable: selectedConstraints.includes('elevator_unsuitable_size'),
      elevatorForbiddenMoving: selectedConstraints.includes('elevator_forbidden_moving'),
      carryDistance: formData.carryDistance as '0-10' | '10-30' | '30+' | undefined,
      constraints: selectedConstraints
    };
  }

  /**
   * üìã OBTENIR LES RAISONS D√âTAILL√âES DU MONTE-MEUBLE
   *
   * Analyse les contraintes s√©lectionn√©es et g√©n√®re une liste d√©taill√©e
   * des raisons expliquant pourquoi le monte-meuble est requis.
   *
   * @param addressData Donn√©es de l'adresse
   * @param volume Volume du d√©m√©nagement (optionnel)
   * @returns Liste des raisons d√©taill√©es
   */
  static getDetailedReasonsForFurnitureLift(
    addressData: AddressData,
    volume?: number
  ): string[] {
    const reasons: string[] = [];
    const constraints = addressData.constraints || [];

    // Raisons li√©es √† l'ascenseur
    if (constraints.includes('elevator_unavailable')) {
      reasons.push('ascenseur indisponible');
    }
    if (constraints.includes('difficult_stairs')) {
      reasons.push('escalier difficile');
    }
    if (constraints.includes('narrow_corridors')) {
      reasons.push('couloirs √©troits');
    }
    if (constraints.includes('elevator_unsuitable_size')) {
      reasons.push('ascenseur trop petit');
    }
    if (constraints.includes('elevator_forbidden_moving')) {
      reasons.push('ascenseur interdit d√©m√©nagement');
    }
    if (constraints.includes('indirect_exit')) {
      reasons.push('sortie indirecte');
    }

    // Raisons li√©es aux objets
    if (constraints.includes('bulky_furniture')) {
      reasons.push('meubles encombrants');
    }
    if (constraints.includes('fragile_valuable_items')) {
      reasons.push('objets fragiles/pr√©cieux');
    }
    if (constraints.includes('heavy_items')) {
      reasons.push('objets tr√®s lourds');
    }

    // Raisons li√©es √† l'√©tage
    const hasNoElevator = !addressData.elevator || addressData.elevator === 'no';
    const hasSmallElevator = addressData.elevator === 'small';
    if (addressData.floor > this.FURNITURE_LIFT_FLOOR_THRESHOLD && (hasNoElevator || hasSmallElevator)) {
      reasons.push(`√©tage √©lev√© (${addressData.floor})`);
    }

    // Raison li√©e au volume (seuil: 10 m¬≥)
    if (volume && volume >= 10) {
      reasons.push(`volume important (${volume} m¬≥)`);
    }

    return reasons;
  }

  /**
   * ‚ö†Ô∏è V√âRIFIER SI UN AVERTISSEMENT EST N√âCESSAIRE
   *
   * D√©termine si l'utilisateur doit √™tre averti d'une situation
   * n√©cessitant un monte-meuble.
   *
   * @param addressData Donn√©es de l'adresse
   * @returns true si avertissement n√©cessaire
   */
  static shouldWarnUser(addressData: AddressData): boolean {
    const floor = addressData.floor || 0;
    const elevator = addressData.elevator || 'no';
    const constraints = addressData.constraints || [];

    // Avertir si √©tage √©lev√© sans ascenseur adapt√©
    if (floor > 2 && (elevator === 'no' || elevator === 'small')) {
      return true;
    }

    // Avertir si contraintes critiques d√©tect√©es
    const criticalConstraints = [
      'elevator_unavailable',
      'elevator_unsuitable_size',
      'difficult_stairs',
      'heavy_items',
      'bulky_furniture'
    ];

    return constraints.some(c => criticalConstraints.includes(c));
  }

  /**
   * ‚úÖ VALIDER LA S√âLECTION DE CONTRAINTES
   *
   * V√©rifie si une tentative de d√©s√©lection de contrainte automatique doit √™tre bloqu√©e.
   * Utilis√© dans les modals pour emp√™cher l'utilisateur de d√©cocher des contraintes obligatoires.
   *
   * @param previousSelectedIds IDs des contraintes pr√©c√©demment s√©lectionn√©es
   * @param newSelectedIds IDs des contraintes nouvellement s√©lectionn√©es
   * @param addressData Donn√©es de l'adresse pour d√©tection automatique
   * @param volume Volume du d√©m√©nagement (optionnel)
   * @returns R√©sultat de validation avec contrainte bloqu√©e si applicable
   */
  static validateConstraintSelection(
    previousSelectedIds: string[],
    newSelectedIds: string[],
    addressData: AddressData,
    volume?: number
  ): {
    isValid: boolean;
    blockedConstraintId?: 'furniture_lift_required' | 'long_carrying_distance';
    reason?: string;
  } {
    // D√©tecter les contraintes automatiques requises
    const furnitureLiftResult = this.detectFurnitureLift(addressData, volume);
    const longCarryingResult = this.detectLongCarryingDistance(addressData);

    // V√©rifier tentative de d√©s√©lection monte-meuble
    const wasFurnitureLiftSelected = previousSelectedIds.includes('furniture_lift_required');
    const isFurnitureLiftSelected = newSelectedIds.includes('furniture_lift_required');

    if (wasFurnitureLiftSelected && !isFurnitureLiftSelected && furnitureLiftResult.furnitureLiftRequired) {
      return {
        isValid: false,
        blockedConstraintId: 'furniture_lift_required',
        reason: furnitureLiftResult.furnitureLiftReason || 'Monte-meuble requis automatiquement'
      };
    }

    // V√©rifier tentative de d√©s√©lection distance portage
    const wasLongCarryingSelected = previousSelectedIds.includes('long_carrying_distance');
    const isLongCarryingSelected = newSelectedIds.includes('long_carrying_distance');

    if (wasLongCarryingSelected && !isLongCarryingSelected && longCarryingResult.longCarryingDistance) {
      return {
        isValid: false,
        blockedConstraintId: 'long_carrying_distance',
        reason: longCarryingResult.carryingDistanceReason || 'Distance de portage longue d√©tect√©e'
      };
    }

    // S√©lection valide
    return {
      isValid: true
    };
  }

  /**
   * üîÑ APPLIQUER LES CONTRAINTES AUTOMATIQUES
   *
   * Ajoute automatiquement les contraintes requises √† une s√©lection existante.
   * Retourne la liste mise √† jour avec les contraintes automatiques.
   *
   * @param currentSelectedIds IDs actuellement s√©lectionn√©s
   * @param addressData Donn√©es de l'adresse
   * @param volume Volume du d√©m√©nagement (optionnel)
   * @returns Liste mise √† jour avec contraintes automatiques
   */
  static applyAutomaticConstraints(
    currentSelectedIds: string[],
    addressData: AddressData,
    volume?: number
  ): string[] {
    const result = [...currentSelectedIds];

    // Ajouter monte-meuble si requis et pas d√©j√† pr√©sent
    const furnitureLiftResult = this.detectFurnitureLift(addressData, volume);
    if (furnitureLiftResult.furnitureLiftRequired && !result.includes('furniture_lift_required')) {
      result.push('furniture_lift_required');
    }

    // Ajouter distance portage si requise et pas d√©j√† pr√©sente
    const longCarryingResult = this.detectLongCarryingDistance(addressData);
    if (longCarryingResult.longCarryingDistance && !result.includes('long_carrying_distance')) {
      result.push('long_carrying_distance');
    }

    return result;
  }
}