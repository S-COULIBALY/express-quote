import { Money } from '../valueObjects/Money';
import { Rule } from '../valueObjects/Rule';
import { QuoteContext } from '../valueObjects/QuoteContext';
import { Discount, DiscountType } from '../valueObjects/Discount';
import { logger } from '../../../lib/logger';

interface RuleExecutionResult {
  finalPrice: Money;
  discounts: Discount[];
  appliedRules?: string[]; // Pour le logging
}

/**
 * Moteur d'ex√©cution des r√®gles m√©tier
 * Applique les r√®gles sur un prix de base pour obtenir un prix final
 */
export class RuleEngine {
  constructor(private rules: Rule[]) {
    // Trier les r√®gles par priorit√© - les r√®gles de tarif minimum doivent √™tre appliqu√©es en dernier
    this.rules.sort((a, b) => {
      // Priorit√© sp√©ciale pour la r√®gle de tarif minimum
      if (a.name === 'Tarif minimum') return 1;
      if (b.name === 'Tarif minimum') return -1;
      
      // Priorit√© pour les r√®gles en pourcentage par rapport aux r√®gles en montant fixe
      if (a.isPercentage() && !b.isPercentage()) return -1;
      if (!a.isPercentage() && b.isPercentage()) return 1;
      
      return 0;
    });
  }

  /**
   * Ex√©cute toutes les r√®gles applicables sur le prix
   */
  execute(
    context: QuoteContext,
    basePrice: Money
  ): RuleExecutionResult {
    console.log("\n==== D√âBUT RULEENGINE.EXECUTE ====");
    console.log("üìã CONTEXTE:", context.getAllData());
    console.log("üí∞ PRIX DE BASE:", basePrice.getAmount());
    console.log("üìã NOMBRE DE R√àGLES √Ä V√âRIFIER:", this.rules.length);
    
    try {
      // Valider le contexte
      try {
        console.log("üîç VALIDATION DU CONTEXTE...");
        context.validate();
        console.log("‚úÖ CONTEXTE VALID√â");
      } catch (error) {
        console.log("‚ùå ERREUR DE VALIDATION DU CONTEXTE:", error);
        throw error;
      }
      
      // Pr√©parer les variables de r√©sultat
      const discounts: Discount[] = [];
      let finalPrice = basePrice;
      const appliedRules: string[] = [];
      
      console.log("üîÑ TRAITEMENT DE CHAQUE R√àGLE...");
      
      // Traiter chaque r√®gle
      try {
        for (const rule of this.rules) {
          console.log("üîç V√âRIFICATION DE LA R√àGLE:", rule.name);
          
          try {
            // V√©rifier si la r√®gle est applicable
            const isApplicable = rule.isApplicable(context);
            console.log("üîç R√àGLE APPLICABLE?", isApplicable);
            
            if (isApplicable) {
              console.log("‚úÖ R√àGLE APPLICABLE - Application en cours...");
              
              try {
                // Appliquer la r√®gle
                const ruleResult = rule.apply(basePrice, context);
                
                if (ruleResult.isApplied) {
                  // Cr√©er un Discount √† partir du r√©sultat
                  let discountType = rule.isPercentage() ? DiscountType.PERCENTAGE : DiscountType.FIXED;
                  let impactValue = Math.abs(ruleResult.impact);
                  
                  // S'assurer que le pourcentage ne d√©passe pas 100%
                  if (discountType === DiscountType.PERCENTAGE && impactValue > 100) {
                    console.log("‚ö†Ô∏è POURCENTAGE > 100%, CONVERSION EN MONTANT FIXE");
                    discountType = DiscountType.FIXED;
                  }
                  
                  const discount = new Discount(
                    rule.name,
                    discountType,
                    impactValue
                  );
                  
                  console.log("üí∞ R√âDUCTION APPLIQU√âE:", discount.getAmount().getAmount());
                  
                  // Ajouter la r√©duction
                  discounts.push(discount);
                  appliedRules.push(rule.name);
                  
                  // Si c'est une r√®gle de pourcentage, l'appliquer imm√©diatement
                  if (discount.getType() === DiscountType.PERCENTAGE) {
                    console.log("üìä R√àGLE DE POURCENTAGE - Application imm√©diate");
                    finalPrice = new Money(
                      finalPrice.getAmount() - discount.getAmount().getAmount()
                    );
                  }
                }
              } catch (applyError) {
                console.log("‚ùå ERREUR LORS DE L'APPLICATION DE LA R√àGLE:", applyError);
                if (applyError instanceof Error) {
                  console.log("üìã TYPE D'ERREUR:", applyError.constructor.name);
                  console.log("üìã MESSAGE:", applyError.message);
                  console.log("üìã STACK:", applyError.stack);
                }
                
                // Erreur sp√©cifique √† v√©rifier
                if (applyError instanceof Error && 
                    (applyError.message.includes('is not a function') || 
                     applyError.message.includes('is not defined'))) {
                  console.log("üö® ERREUR D'OP√âRATION D√âTECT√âE - Op√©ration non support√©e");
                  throw new Error('Op√©ration non support√©e');
                }
                
                throw applyError;
              }
            }
          } catch (ruleError) {
            console.log("‚ùå ERREUR SP√âCIFIQUE √Ä UNE R√àGLE:", ruleError);
            throw ruleError;
          }
        }
        
        // Appliquer les r√©ductions fixes apr√®s les pourcentages
        console.log("üîÑ APPLICATION DES R√âDUCTIONS FIXES...");
        try {
          for (const discount of discounts) {
            if (discount.getType() !== DiscountType.PERCENTAGE) {
              console.log("üí∞ APPLICATION D'UNE R√âDUCTION FIXE:", discount.getAmount().getAmount());
              finalPrice = new Money(
                finalPrice.getAmount() - discount.getAmount().getAmount()
              );
            }
          }
        } catch (fixedError) {
          console.log("‚ùå ERREUR LORS DE L'APPLICATION DES R√âDUCTIONS FIXES:", fixedError);
          throw fixedError;
        }
        
        // V√©rifier que le prix final n'est pas n√©gatif
        console.log("üîç V√âRIFICATION DU PRIX FINAL...");
        if (finalPrice.getAmount() < 0) {
          console.log("‚ö†Ô∏è PRIX N√âGATIF D√âTECT√â - Ajustement √† 0");
          finalPrice = new Money(0);
        }
        
        console.log("‚úÖ EXECUTION TERMIN√âE - R√©sultat:");
        console.log("üí∞ PRIX FINAL:", finalPrice.getAmount());
        console.log("üìã R√âDUCTIONS APPLIQU√âES:", discounts.length);
        console.log("==== FIN RULEENGINE.EXECUTE (SUCC√àS) ====\n");
        
        return {
          finalPrice,
          discounts,
          appliedRules
        };
      } catch (rulesError) {
        console.log("‚ùå ERREUR PENDANT LE TRAITEMENT DES R√àGLES:", rulesError);
        if (rulesError instanceof Error) {
          console.log("üìã TYPE D'ERREUR:", rulesError.constructor.name);
          console.log("üìã MESSAGE:", rulesError.message);
          console.log("üìã STACK:", rulesError.stack);
          
          // Si c'est l'erreur "Op√©ration non support√©e", la propager
          if (rulesError.message.includes('Op√©ration non support√©e')) {
            console.log("üö® PROPAGATION DE L'ERREUR 'Op√©ration non support√©e'");
          }
        }
        throw rulesError;
      }
    } catch (error) {
      console.log("‚ùå ERREUR G√âN√âRALE DANS RULEENGINE.EXECUTE:", error);
      if (error instanceof Error) {
        console.log("üìã TYPE D'ERREUR:", error.constructor.name);
        console.log("üìã MESSAGE:", error.message);
        console.log("üìã STACK:", error.stack);
      }
      console.log("==== FIN RULEENGINE.EXECUTE (ERREUR) ====\n");
      throw error;
    }
  }

  /**
   * Validation du contexte pour s'assurer que les champs n√©cessaires sont pr√©sents
   */
  private validateContext(context: QuoteContext): void {
    // Utilise la validation int√©gr√©e dans QuoteContext
    context.validate();
  }

  /**
   * R√©cup√©rer toutes les r√®gles
   */
  getRules(): Rule[] {
    return [...this.rules];
  }

  /**
   * Ajouter une r√®gle
   */
  addRule(rule: Rule): void {
    this.rules.push(rule);
  }

  /**
   * Supprimer une r√®gle
   */
  removeRule(ruleToRemove: Rule): void {
    this.rules = this.rules.filter(rule => !rule.equals(ruleToRemove));
  }
} 