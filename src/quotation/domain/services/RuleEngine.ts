import { Money } from '../valueObjects/Money';
import { Rule, RuleApplyResult } from '../valueObjects/Rule';
import { QuoteContext } from '../valueObjects/QuoteContext';
import { Discount, DiscountType } from '../valueObjects/Discount';
import { logger } from '../../../lib/logger';
import { calculationDebugLogger } from '../../../lib/calculation-debug-logger';

interface RuleExecutionResult {
  finalPrice: Money;
  discounts: Discount[];
  appliedRules?: string[]; // Pour le logging
}

/**
 * Moteur d'ex√©cution des r√®gles m√©tier
 * Applique les r√®gles sur un prix de base pour obtenir un prix final
 */
export class RuleEngine {
  constructor(private rules: Rule[]) {
    // Trier les r√®gles par priorit√© - les r√®gles de tarif minimum doivent √™tre appliqu√©es en dernier
    this.rules.sort((a, b) => {
      // Priorit√© sp√©ciale pour la r√®gle de tarif minimum
      if (a.name === 'Tarif minimum') return 1;
      if (b.name === 'Tarif minimum') return -1;
      
      // Priorit√© pour les r√®gles en pourcentage par rapport aux r√®gles en montant fixe
      if (a.isPercentage() && !b.isPercentage()) return -1;
      if (!a.isPercentage() && b.isPercentage()) return 1;
      
      return 0;
    });
  }

  /**
   * Ex√©cute toutes les r√®gles applicables sur le prix
   */
  execute(
    context: QuoteContext,
    basePrice: Money
  ): RuleExecutionResult {
    console.log("\n==== D√âBUT RULEENGINE.EXECUTE ====");
    console.log("üìã CONTEXTE:", context.getAllData());
    console.log("üí∞ PRIX DE BASE:", basePrice.getAmount());
    console.log("üìã NOMBRE DE R√àGLES √Ä V√âRIFIER:", this.rules.length);
    
    // D√©marrer le logging d√©taill√© du moteur de r√®gles
    calculationDebugLogger.startRulesEngine(this.rules, basePrice.getAmount(), context.getAllData());
    
    // ‚ú® OPTIMISATION: Analyser les contraintes consomm√©es UNE SEULE FOIS
    const contextData = context.getAllData();
    const furnitureLiftAnalysis = this.analyzeFurnitureLiftRequirement(contextData);
    
    // ‚ú® AFFICHAGE OPTIMIS√â: Contexte des contraintes consomm√©es (une seule fois)
    if (furnitureLiftAnalysis.required && furnitureLiftAnalysis.consumedConstraints.size > 0) {
      console.log('\nüèóÔ∏è [CONTEXTE] MONTE-MEUBLE REQUIS');
      console.log(`   üì¶ Contraintes consomm√©es: [${Array.from(furnitureLiftAnalysis.consumedConstraints).map(c => `'${c}'`).join(', ')}]`);
      console.log(`   ‚ÑπÔ∏è  Les r√®gles li√©es √† ces contraintes seront automatiquement ignor√©es\n`);
    }
    
    try {
      // Valider le contexte
      try {
        console.log("üîç VALIDATION DU CONTEXTE...");
        context.validate();
        console.log("‚úÖ CONTEXTE VALID√â");
      } catch (error) {
        console.log("‚ùå ERREUR DE VALIDATION DU CONTEXTE:", error);
        throw error;
      }
      
      // Pr√©parer les variables de r√©sultat
    const discounts: Discount[] = [];
      const basePriceAmount = basePrice.getAmount(); // Prix de base constant
      let totalImpact = 0; // Accumuler tous les impacts
    const appliedRules: string[] = [];
      let minimumPrice: number | null = null; // Stocker le prix minimum
      
      console.log("üîÑ TRAITEMENT DE CHAQUE R√àGLE...");
      
      // Traiter chaque r√®gle
      try {
        for (const rule of this.rules) {
          // ‚ú® OPTIMISATION: V√©rification rapide des contraintes consomm√©es
          if (furnitureLiftAnalysis.required && this.isRuleConstraintConsumed(rule, furnitureLiftAnalysis.consumedConstraints)) {
            calculationDebugLogger.logRuleSkipped(rule, "Contrainte consomm√©e par le monte-meuble");
            continue;
          }
          
          try {
            // V√©rifier si la r√®gle est applicable
            const isApplicable = rule.isApplicable(contextData);
            
            if (isApplicable) {
              // Application de la r√®gle - les d√©tails sont logg√©s par calculationDebugLogger
              
              try {
                // ‚úÖ CORRECTION: Toujours appliquer les r√®gles sur le prix de base
                const currentPrice = basePriceAmount + totalImpact;

                // Appliquer la r√®gle sur le prix de base (pour les pourcentages)
                const ruleResult: RuleApplyResult = rule.apply(new Money(currentPrice), contextData, basePrice);

                // V√©rifier si la r√®gle d√©finit un prix minimum
                if (ruleResult.minimumPrice !== undefined) {
                  console.log("‚ö†Ô∏è R√àGLE D√âFINIT UN PRIX MINIMUM:", ruleResult.minimumPrice);
                  minimumPrice = ruleResult.minimumPrice;
                  calculationDebugLogger.logRuleSkipped(rule, `R√®gle de prix minimum: ${ruleResult.minimumPrice}‚Ç¨`);
                  // Ne pas ajouter de r√©duction pour les r√®gles de prix minimum
                  continue;
                }

                // Pour les r√®gles normales avec un impact
                if (ruleResult.isApplied && ruleResult.impact !== 0) {
                  // Accumuler l'impact au lieu de remplacer le prix
                  totalImpact += ruleResult.impact;

                  // Logger l'application de la r√®gle (format Option D)
                  calculationDebugLogger.logRuleApplication(rule, currentPrice, ruleResult, contextData);
        
                  // D√©terminer le type de r√©duction
                  const discountType = rule.isPercentage() ? 
                    DiscountType.PERCENTAGE : 
                    DiscountType.FIXED;
                  
                  // Cr√©er un objet Discount avec l'impact absolu
                  try {
                    // D√©terminer si c'est une r√©duction (impact n√©gatif) ou une surcharge (impact positif)
                    const isReduction = ruleResult.impact < 0;
                    const absoluteImpact = Math.abs(ruleResult.impact);
                    
                    // ‚úÖ CORRECTION: Utiliser la valeur originale de la r√®gle directement
                    const discountValue = Math.abs(rule.value);
                    
                    const discount = new Discount(
                      rule.name,
                      discountType,
                      discountValue,
                      undefined, // code
                      undefined, // expirationDate
                      isReduction // isReductionFlag
                    );
    
                    // Ajouter la r√©duction
                    discounts.push(discount);
                    appliedRules.push(rule.name);
                  } catch (discountError) {
                    console.log("‚ùå ERREUR LORS DE LA CR√âATION DU DISCOUNT:", discountError);
                    throw discountError;
                  }
                } else {
                  console.log(`‚ÑπÔ∏è R√àGLE "${rule.name}" SANS IMPACT:`, {
                    isApplied: ruleResult.isApplied,
                    impact: ruleResult.impact
                  });
                  calculationDebugLogger.logRuleSkipped(rule, `R√®gle sans impact: isApplied=${ruleResult.isApplied}, impact=${ruleResult.impact}`);
                }
              } catch (applyError) {
                console.log("‚ùå ERREUR LORS DE L'APPLICATION DE LA R√àGLE:", applyError);
                if (applyError instanceof Error) {
                  console.log("üìã TYPE D'ERREUR:", applyError.constructor.name);
                  console.log("üìã MESSAGE:", applyError.message);
                  console.log("üìã STACK:", applyError.stack);
                }
                
                // Erreur sp√©cifique √† v√©rifier
                if (applyError instanceof Error && 
                    (applyError.message.includes('is not a function') || 
                     applyError.message.includes('is not defined'))) {
                  console.log("üö® ERREUR D'OP√âRATION D√âTECT√âE - Op√©ration non support√©e");
                  throw new Error('Op√©ration non support√©e');
                }
                
                throw applyError;
              }
            } else {
              // Logger l'√©valuation pour les r√®gles non applicables seulement
              calculationDebugLogger.logRuleEvaluation(rule, contextData, false);
            }
          } catch (ruleError) {
            console.log("‚ùå ERREUR SP√âCIFIQUE √Ä UNE R√àGLE:", ruleError);
            calculationDebugLogger.logRuleEvaluation(rule, context.getAllData(), false, ruleError);
            throw ruleError;
          }
        }
        
        // Calculer le prix final = prix de base + tous les impacts
        let finalPrice = basePriceAmount + totalImpact;

        // V√©rifier que le prix final n'est pas inf√©rieur au prix minimum
        console.log("üîç V√âRIFICATION DU PRIX FINAL...");
        const priceBeforeMinimumCheck = finalPrice;
        if (minimumPrice !== null && finalPrice < minimumPrice) {
          console.log(`‚ö†Ô∏è PRIX FINAL (${finalPrice}) INF√âRIEUR AU MINIMUM (${minimumPrice}) - AJUSTEMENT`);
          finalPrice = minimumPrice;
          calculationDebugLogger.logMinimumPriceCheck(priceBeforeMinimumCheck, minimumPrice, finalPrice);
        }
        // V√©rifier que le prix final n'est pas n√©gatif
        else if (finalPrice < 0) {
          console.log("‚ö†Ô∏è PRIX N√âGATIF D√âTECT√â - Ajustement √† 0");
          finalPrice = 0;
      } else if (minimumPrice !== null) {
          calculationDebugLogger.logMinimumPriceCheck(priceBeforeMinimumCheck, minimumPrice, finalPrice);
        }

        console.log("‚úÖ EXECUTION TERMIN√âE - R√©sultat:");
        console.log("üí∞ PRIX FINAL:", finalPrice);
        console.log("üìã R√àGLES APPLIQU√âES:", discounts.length);
        if (discounts.length > 0) {
          // S√©parer les surcharges des r√©ductions
          const surcharges = discounts.filter(d => d.getAmount().getAmount() > 0);
          const reductions = discounts.filter(d => d.getAmount().getAmount() < 0);
          
          if (surcharges.length > 0) {
            console.log("üìà SURCHARGES APPLIQU√âES:", surcharges.length);
            console.log("üìà D√âTAIL DES SURCHARGES:", surcharges.map(d => ({
            nom: d.getName(),
            type: d.getType() === DiscountType.PERCENTAGE ? 'pourcentage' : 'montant fixe',
            valeur: d.getAmount().getAmount()
          })));
          }
          
          if (reductions.length > 0) {
            console.log("üìâ R√âDUCTIONS APPLIQU√âES:", reductions.length);
            console.log("üìâ D√âTAIL DES R√âDUCTIONS:", reductions.map(d => ({
              nom: d.getName(),
              type: d.getType() === DiscountType.PERCENTAGE ? 'pourcentage' : 'montant fixe',
              valeur: Math.abs(d.getAmount().getAmount()) // Afficher en valeur absolue pour les r√©ductions
            })));
          }
        }
        console.log("==== FIN RULEENGINE.EXECUTE (SUCC√àS) ====\n");
        
        return {
          finalPrice: new Money(finalPrice),
          discounts,
          appliedRules
        };
      } catch (rulesError) {
        console.log("‚ùå ERREUR PENDANT LE TRAITEMENT DES R√àGLES:", rulesError);
        if (rulesError instanceof Error) {
          console.log("üìã TYPE D'ERREUR:", rulesError.constructor.name);
          console.log("üìã MESSAGE:", rulesError.message);
          console.log("üìã STACK:", rulesError.stack);
        
          // Si c'est l'erreur "Op√©ration non support√©e", la propager
          if (rulesError.message.includes('Op√©ration non support√©e')) {
            console.log("üö® PROPAGATION DE L'ERREUR 'Op√©ration non support√©e'");
          }
        }
        throw rulesError;
        }
    } catch (error) {
      console.log("‚ùå ERREUR G√âN√âRALE DANS RULEENGINE.EXECUTE:", error);
      if (error instanceof Error) {
        console.log("üìã TYPE D'ERREUR:", error.constructor.name);
        console.log("üìã MESSAGE:", error.message);
        console.log("üìã STACK:", error.stack);
      }
      console.log("==== FIN RULEENGINE.EXECUTE (ERREUR) ====\n");
      throw new Error(`Impossible d'ex√©cuter les r√®gles: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
  }

  /**
   * Validation du contexte pour s'assurer que les champs n√©cessaires sont pr√©sents
   */
  private validateContext(context: QuoteContext): void {
    // Utilise la validation int√©gr√©e dans QuoteContext
    context.validate();
  }

  /**
   * R√©cup√©rer toutes les r√®gles
   */
  getRules(): Rule[] {
    return [...this.rules];
  }

  /**
   * Ajouter une r√®gle
   */
  addRule(rule: Rule): void {
    this.rules.push(rule);
  }

  /**
   * Supprimer une r√®gle
   */
  removeRule(ruleToRemove: Rule): void {
    this.rules = this.rules.filter(rule => !rule.equals(ruleToRemove));
  }

  // ============================================================================
  // M√âTHODES UTILITAIRES POUR L'OPTIMISATION DES LOGS
  // ============================================================================
  
  /**
   * Analyse si le monte-meuble est requis et quelles contraintes sont consomm√©es
   * (R√©utilise la logique de Rule.analyzeFurnitureLiftRequirement)
   */
  private analyzeFurnitureLiftRequirement(context: any): { required: boolean; consumedConstraints: Set<string> } {
    const consumedConstraints = new Set<string>();
    let required = false;
    
    // R√©cup√©rer les donn√©es d'√©tage et d'ascenseur
    const pickupFloor = parseInt(context.pickupFloor || '0');
    const deliveryFloor = parseInt(context.deliveryFloor || '0');
    const pickupElevator = context.pickupElevator;
    const deliveryElevator = context.deliveryElevator;
    
    // V√©rifier si le monte-meuble est explicitement requis
    if (this.hasLogisticsConstraint(context, 'furniture_lift_required')) {
      required = true;
      consumedConstraints.add('furniture_lift_required');
    }
    
    // Logique d'activation automatique du monte-meuble
    const hasNoElevator = !pickupElevator || pickupElevator === 'no' || !deliveryElevator || deliveryElevator === 'no';
    const hasSmallElevator = pickupElevator === 'small' || deliveryElevator === 'small';
    const hasElevatorProblems = this.hasLogisticsConstraint(context, 'elevator_unavailable') ||
                               this.hasLogisticsConstraint(context, 'elevator_unsuitable_size') ||
                               this.hasLogisticsConstraint(context, 'elevator_forbidden_moving');
    
    const maxFloor = Math.max(pickupFloor, deliveryFloor);
    
    // CAS 1: √âtage √©lev√© (> 3) sans ascenseur fonctionnel
    if (maxFloor > 3 && (hasNoElevator || hasElevatorProblems)) {
      required = true;
      if (hasElevatorProblems) {
        if (this.hasLogisticsConstraint(context, 'elevator_unavailable')) consumedConstraints.add('elevator_unavailable');
        if (this.hasLogisticsConstraint(context, 'elevator_unsuitable_size')) consumedConstraints.add('elevator_unsuitable_size');
        if (this.hasLogisticsConstraint(context, 'elevator_forbidden_moving')) consumedConstraints.add('elevator_forbidden_moving');
      }
    }
    
    // CAS 2: Contraintes d'acc√®s difficile + objets lourds/encombrants
    const hasAccessConstraints = this.hasLogisticsConstraint(context, 'difficult_stairs') ||
                                this.hasLogisticsConstraint(context, 'narrow_corridors') ||
                                this.hasLogisticsConstraint(context, 'indirect_exit') ||
                                this.hasLogisticsConstraint(context, 'complex_multilevel_access');
    
    const hasHeavyItems = this.hasLogisticsConstraint(context, 'bulky_furniture');
    
    if (maxFloor >= 1 && hasAccessConstraints && hasHeavyItems) {
      required = true;
      
      // Marquer les contraintes comme consomm√©es
      if (this.hasLogisticsConstraint(context, 'difficult_stairs')) consumedConstraints.add('difficult_stairs');
      if (this.hasLogisticsConstraint(context, 'narrow_corridors')) consumedConstraints.add('narrow_corridors');
      if (this.hasLogisticsConstraint(context, 'indirect_exit')) consumedConstraints.add('indirect_exit');
      if (this.hasLogisticsConstraint(context, 'complex_multilevel_access')) consumedConstraints.add('complex_multilevel_access');
      if (this.hasLogisticsConstraint(context, 'bulky_furniture')) consumedConstraints.add('bulky_furniture');
    }
    
    // CAS 3: Ascenseur small + contraintes + objets lourds
    if (hasSmallElevator && hasAccessConstraints && hasHeavyItems && maxFloor >= 1) {
      required = true;
      
      // Marquer les contraintes comme consomm√©es (m√™me logique que CAS 2)
      if (this.hasLogisticsConstraint(context, 'difficult_stairs')) consumedConstraints.add('difficult_stairs');
      if (this.hasLogisticsConstraint(context, 'narrow_corridors')) consumedConstraints.add('narrow_corridors');
      if (this.hasLogisticsConstraint(context, 'indirect_exit')) consumedConstraints.add('indirect_exit');
      if (this.hasLogisticsConstraint(context, 'complex_multilevel_access')) consumedConstraints.add('complex_multilevel_access');
      if (this.hasLogisticsConstraint(context, 'bulky_furniture')) consumedConstraints.add('bulky_furniture');
    }
    
    return { required, consumedConstraints };
  }
  
  /**
   * V√©rifie si une r√®gle doit √™tre ignor√©e car sa contrainte est consomm√©e par le monte-meuble
   */
  private isRuleConstraintConsumed(rule: any, consumedConstraints: Set<string>): boolean {
    // Si cette r√®gle est la r√®gle du monte-meuble elle-m√™me, ne pas l'ignorer
    if (rule.condition === 'furniture_lift_required' || rule.name === 'Monte-meuble') {
      return false;
    }
    
    // V√©rifier si la condition de cette r√®gle correspond √† une contrainte consomm√©e
    if (consumedConstraints.has(rule.condition)) {
      return true;
    }
    
    // Cas sp√©ciaux pour les r√®gles qui v√©rifient des variables bool√©ennes
    const constraintMappings: Record<string, string> = {
      'difficult_stairs': 'difficult_stairs',
      'narrow_corridors': 'narrow_corridors', 
      'indirect_exit': 'indirect_exit',
      'complex_multilevel_access': 'complex_multilevel_access',
      'bulky_furniture': 'bulky_furniture',
      'elevator_unavailable': 'elevator_unavailable',
      'elevator_unsuitable_size': 'elevator_unsuitable_size',
      'elevator_forbidden_moving': 'elevator_forbidden_moving'
    };
    
    // V√©rifier si la condition correspond √† une contrainte mapp√©e qui est consomm√©e
    const mappedConstraint = constraintMappings[rule.condition];
    if (mappedConstraint && consumedConstraints.has(mappedConstraint)) {
      return true;
    }
    
    return false;
  }
  
  /**
   * V√©rifie si une contrainte logistique est pr√©sente dans le contexte
   */
  private hasLogisticsConstraint(context: any, constraint: string): boolean {
    const pickupConstraints = context.pickupLogisticsConstraints || [];
    const deliveryConstraints = context.deliveryLogisticsConstraints || [];
    
    return pickupConstraints.includes(constraint) || deliveryConstraints.includes(constraint);
  }

  /**
   * Compte combien de fois une contrainte logistique est pr√©sente (pickup + delivery)
   */
  private countLogisticsConstraint(context: any, constraint: string): number {
    const pickupConstraints = context.pickupLogisticsConstraints || [];
    const deliveryConstraints = context.deliveryLogisticsConstraints || [];
    
    let count = 0;
    if (pickupConstraints.includes(constraint)) count++;
    if (deliveryConstraints.includes(constraint)) count++;
    
    return count;
  }
} 