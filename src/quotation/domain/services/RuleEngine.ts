import { Money } from '../valueObjects/Money';
import { Rule, RuleApplyResult } from '../valueObjects/Rule';
import { QuoteContext } from '../valueObjects/QuoteContext';
import { Discount, DiscountType } from '../valueObjects/Discount';
import { logger } from '../../../lib/logger';

interface RuleExecutionResult {
  finalPrice: Money;
  discounts: Discount[];
  appliedRules?: string[]; // Pour le logging
}

/**
 * Moteur d'ex√©cution des r√®gles m√©tier
 * Applique les r√®gles sur un prix de base pour obtenir un prix final
 */
export class RuleEngine {
  constructor(private rules: Rule[]) {
    // Trier les r√®gles par priorit√© - les r√®gles de tarif minimum doivent √™tre appliqu√©es en dernier
    this.rules.sort((a, b) => {
      // Priorit√© sp√©ciale pour la r√®gle de tarif minimum
      if (a.name === 'Tarif minimum') return 1;
      if (b.name === 'Tarif minimum') return -1;
      
      // Priorit√© pour les r√®gles en pourcentage par rapport aux r√®gles en montant fixe
      if (a.isPercentage() && !b.isPercentage()) return -1;
      if (!a.isPercentage() && b.isPercentage()) return 1;
      
      return 0;
    });
  }

  /**
   * Ex√©cute toutes les r√®gles applicables sur le prix
   */
  execute(
    context: QuoteContext,
    basePrice: Money
  ): RuleExecutionResult {
    console.log("\n==== D√âBUT RULEENGINE.EXECUTE ====");
    console.log("üìã CONTEXTE:", context.getAllData());
    console.log("üí∞ PRIX DE BASE:", basePrice.getAmount());
    console.log("üìã NOMBRE DE R√àGLES √Ä V√âRIFIER:", this.rules.length);
    
    try {
      // Valider le contexte
      try {
        console.log("üîç VALIDATION DU CONTEXTE...");
        context.validate();
        console.log("‚úÖ CONTEXTE VALID√â");
      } catch (error) {
        console.log("‚ùå ERREUR DE VALIDATION DU CONTEXTE:", error);
        throw error;
      }
      
      // Pr√©parer les variables de r√©sultat
    const discounts: Discount[] = [];
      let finalPrice = basePrice.getAmount(); // Utiliser directement le montant pour plus de clart√©
    const appliedRules: string[] = [];
      let minimumPrice: number | null = null; // Stocker le prix minimum
      
      console.log("üîÑ TRAITEMENT DE CHAQUE R√àGLE...");
      
      // Traiter chaque r√®gle
      try {
        for (const rule of this.rules) {
          console.log("üîç V√âRIFICATION DE LA R√àGLE:", rule.name);
          
          try {
            // V√©rifier si la r√®gle est applicable
            const isApplicable = rule.isApplicable(context);
            console.log("üîç R√àGLE APPLICABLE?", isApplicable);
            
            if (isApplicable) {
              console.log("‚úÖ R√àGLE APPLICABLE - Application en cours...");
              
              try {
                // Stocker le prix avant application de la r√®gle
                const priceBeforeRule = finalPrice;
                
                // Appliquer la r√®gle
                const ruleResult: RuleApplyResult = rule.apply(new Money(finalPrice), context);
                
                // V√©rifier si la r√®gle d√©finit un prix minimum
                if (ruleResult.minimumPrice !== undefined) {
                  console.log("‚ö†Ô∏è R√àGLE D√âFINIT UN PRIX MINIMUM:", ruleResult.minimumPrice);
                  minimumPrice = ruleResult.minimumPrice;
                  // Ne pas ajouter de r√©duction pour les r√®gles de prix minimum
                  continue;
                }
                
                // Pour les r√®gles normales avec un impact
                if (ruleResult.isApplied && ruleResult.impact !== 0) {
                  // Calculer le nouveau prix final
                  finalPrice = ruleResult.newPrice.getAmount();
                  
                  const absoluteImpact = Math.abs(ruleResult.impact);
                  console.log(`üí∞ R√àGLE "${rule.name}" APPLIQU√âE:`, {
                    prixAvant: priceBeforeRule,
                    prixApr√®s: finalPrice,
                    impact: ruleResult.impact,
                    r√©duction: absoluteImpact
        });
        
                  // D√©terminer le type de r√©duction
                  const discountType = rule.isPercentage() ? 
                    DiscountType.PERCENTAGE : 
                    DiscountType.FIXED;
                  
                  // Cr√©er un objet Discount avec l'impact absolu
                  try {
                    const discount = new Discount(
            rule.name,
                      discountType,
                      // Si c'est un pourcentage, utiliser directement un pourcentage s√ªr (valeur absolue du pourcentage)
                      // plut√¥t que l'impact calcul√© qui peut √™tre trop grand comme valeur
                      discountType === DiscountType.PERCENTAGE ? Math.min(Math.abs(ruleResult.impact / priceBeforeRule * 100), 100) : absoluteImpact
                    );
    
                    // Ajouter la r√©duction
                    discounts.push(discount);
                    appliedRules.push(rule.name);
                  } catch (discountError) {
                    console.log("‚ùå ERREUR LORS DE LA CR√âATION DU DISCOUNT:", discountError);
                    throw discountError;
                  }
                } else {
                  console.log(`‚ÑπÔ∏è R√àGLE "${rule.name}" SANS IMPACT:`, {
                    isApplied: ruleResult.isApplied,
                    impact: ruleResult.impact
                  });
                }
              } catch (applyError) {
                console.log("‚ùå ERREUR LORS DE L'APPLICATION DE LA R√àGLE:", applyError);
                if (applyError instanceof Error) {
                  console.log("üìã TYPE D'ERREUR:", applyError.constructor.name);
                  console.log("üìã MESSAGE:", applyError.message);
                  console.log("üìã STACK:", applyError.stack);
                }
                
                // Erreur sp√©cifique √† v√©rifier
                if (applyError instanceof Error && 
                    (applyError.message.includes('is not a function') || 
                     applyError.message.includes('is not defined'))) {
                  console.log("üö® ERREUR D'OP√âRATION D√âTECT√âE - Op√©ration non support√©e");
                  throw new Error('Op√©ration non support√©e');
                }
                
                throw applyError;
              }
            }
          } catch (ruleError) {
            console.log("‚ùå ERREUR SP√âCIFIQUE √Ä UNE R√àGLE:", ruleError);
            throw ruleError;
          }
        }
        
        // V√©rifier que le prix final n'est pas inf√©rieur au prix minimum
        console.log("üîç V√âRIFICATION DU PRIX FINAL...");
        if (minimumPrice !== null && finalPrice < minimumPrice) {
          console.log(`‚ö†Ô∏è PRIX FINAL (${finalPrice}) INF√âRIEUR AU MINIMUM (${minimumPrice}) - AJUSTEMENT`);
          finalPrice = minimumPrice;
        }
        // V√©rifier que le prix final n'est pas n√©gatif
        else if (finalPrice < 0) {
          console.log("‚ö†Ô∏è PRIX N√âGATIF D√âTECT√â - Ajustement √† 0");
          finalPrice = 0;
      }
      
        console.log("‚úÖ EXECUTION TERMIN√âE - R√©sultat:");
        console.log("üí∞ PRIX FINAL:", finalPrice);
        console.log("üìã R√âDUCTIONS APPLIQU√âES:", discounts.length);
        if (discounts.length > 0) {
          console.log("üìã D√âTAIL DES R√âDUCTIONS:", discounts.map(d => ({
            nom: d.getName(),
            type: d.getType() === DiscountType.PERCENTAGE ? 'pourcentage' : 'montant fixe',
            valeur: d.getAmount().getAmount()
          })));
        }
        console.log("==== FIN RULEENGINE.EXECUTE (SUCC√àS) ====\n");
        
        return {
          finalPrice: new Money(finalPrice),
          discounts,
          appliedRules
        };
      } catch (rulesError) {
        console.log("‚ùå ERREUR PENDANT LE TRAITEMENT DES R√àGLES:", rulesError);
        if (rulesError instanceof Error) {
          console.log("üìã TYPE D'ERREUR:", rulesError.constructor.name);
          console.log("üìã MESSAGE:", rulesError.message);
          console.log("üìã STACK:", rulesError.stack);
        
          // Si c'est l'erreur "Op√©ration non support√©e", la propager
          if (rulesError.message.includes('Op√©ration non support√©e')) {
            console.log("üö® PROPAGATION DE L'ERREUR 'Op√©ration non support√©e'");
          }
        }
        throw rulesError;
        }
    } catch (error) {
      console.log("‚ùå ERREUR G√âN√âRALE DANS RULEENGINE.EXECUTE:", error);
      if (error instanceof Error) {
        console.log("üìã TYPE D'ERREUR:", error.constructor.name);
        console.log("üìã MESSAGE:", error.message);
        console.log("üìã STACK:", error.stack);
      }
      console.log("==== FIN RULEENGINE.EXECUTE (ERREUR) ====\n");
      throw error;
    }
  }

  /**
   * Validation du contexte pour s'assurer que les champs n√©cessaires sont pr√©sents
   */
  private validateContext(context: QuoteContext): void {
    // Utilise la validation int√©gr√©e dans QuoteContext
    context.validate();
  }

  /**
   * R√©cup√©rer toutes les r√®gles
   */
  getRules(): Rule[] {
    return [...this.rules];
  }

  /**
   * Ajouter une r√®gle
   */
  addRule(rule: Rule): void {
    this.rules.push(rule);
  }

  /**
   * Supprimer une r√®gle
   */
  removeRule(ruleToRemove: Rule): void {
    this.rules = this.rules.filter(rule => !rule.equals(ruleToRemove));
  }
} 