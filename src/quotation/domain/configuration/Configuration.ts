import { Entity } from '../../../shared/domain/Entity';
import { ConfigurationCategory } from './ConfigurationKey';

/**
 * ============================================================================
 * ENTIT√â CONFIGURATION - Gestion centralis√©e des param√®tres syst√®me
 * ============================================================================
 * 
 * üéØ OBJECTIF :
 * Cette classe repr√©sente une configuration syst√®me avec gestion de version,
 * validit√© temporelle et tra√ßabilit√© des modifications.
 * 
 * üìã CARACT√âRISTIQUES :
 * 
 * ‚úÖ VERSIONING : Chaque configuration a une p√©riode de validit√©
 * ‚úÖ AUDIT : Tra√ßabilit√© des modifications avec timestamps
 * ‚úÖ ACTIVATION : Possibilit√© d'activer/d√©sactiver les configurations
 * ‚úÖ CAT√âGORISATION : Organisation par cat√©gories m√©tier
 * ‚úÖ IMMUTABILIT√â : Les objets sont immutables, cr√©ation de nouvelles instances
 * 
 * üîß UTILISATION :
 * 
 * 1. CR√âATION :
 *    - Configuration.create() pour nouvelles configurations
 *    - Valeurs par d√©faut depuis DefaultValues.ts
 * 
 * 2. MODIFICATION :
 *    - update() pour changer la valeur
 *    - deactivate() pour d√©sactiver
 *    - Cr√©ation d'une nouvelle instance (immutabilit√©)
 * 
 * 3. VALIDATION :
 *    - isValid() pour v√©rifier la validit√© temporelle
 *    - V√©rification des dates de d√©but/fin
 * 
 * üìä STRUCTURE :
 * 
 * - category : Type de configuration (PRICING, BUSINESS_RULES, etc.)
 * - key : Identifiant unique de la configuration
 * - value : Valeur de la configuration (any type)
 * - description : Description optionnelle
 * - isActive : Statut d'activation
 * - validFrom/validTo : P√©riode de validit√©
 * - updatedAt : Timestamp de derni√®re modification
 * 
 * üöÄ AVANTAGES :
 * 
 * ‚úÖ Historique : Conservation de l'historique des modifications
 * ‚úÖ Rollback : Possibilit√© de revenir √† une version pr√©c√©dente
 * ‚úÖ A/B Testing : Comparaison de diff√©rentes configurations
 * ‚úÖ S√©curit√© : Validation des p√©riodes de validit√©
 * ‚úÖ Performance : Cache des configurations valides
 */
export class Configuration extends Entity {
  private readonly _value: any;
  private readonly _description: string | null;
  private readonly _isActive: boolean;
  private readonly _validFrom: Date;
  private readonly _validTo: Date | null;
  private readonly _updatedAt: Date;
  private readonly _category: ConfigurationCategory;
  private readonly _key: string;

  constructor(
    id: string,
    category: ConfigurationCategory,
    key: string,
    value: any,
    description: string | null,
    isActive: boolean,
    validFrom: Date,
    validTo: Date | null,
    updatedAt: Date
  ) {
    super(id);
    this._category = category;
    this._key = key;
    this._value = value;
    this._description = description;
    this._isActive = isActive;
    this._validFrom = validFrom;
    this._validTo = validTo;
    this._updatedAt = updatedAt;
  }

  get category(): ConfigurationCategory {
    return this._category;
  }

  get key(): string {
    return this._key;
  }

  get value(): any {
    return this._value;
  }

  get description(): string | null {
    return this._description;
  }

  get isActive(): boolean {
    return this._isActive;
  }

  get validFrom(): Date {
    return new Date(this._validFrom);
  }

  get validTo(): Date | null {
    return this._validTo ? new Date(this._validTo) : null;
  }

  get updatedAt(): Date {
    return new Date(this._updatedAt);
  }

  /**
   * VALIDATION TEMPORELLE - V√©rifie si la configuration est valide √† une date donn√©e
   * 
   * üéØ UTILIT√â :
   * - V√©rification de la p√©riode de validit√©
   * - Gestion des configurations expir√©es
   * - Support des tests avec dates sp√©cifiques
   * 
   * ‚úÖ CRIT√àRES DE VALIDIT√â :
   * - Configuration active (isActive = true)
   * - Date >= validFrom
   * - Date <= validTo (si d√©fini)
   * 
   * @param date Date de v√©rification (par d√©faut: maintenant)
   * @returns true si la configuration est valide √† cette date
   */
  public isValid(date: Date = new Date()): boolean {
    if (!this._isActive) return false;
    if (date < this._validFrom) return false;
    if (this._validTo && date > this._validTo) return false;
    return true;
  }

  /**
   * FACTORY METHOD - Cr√©ation d'une nouvelle configuration
   * 
   * üéØ UTILIT√â :
   * - Cr√©ation simplifi√©e avec valeurs par d√©faut
   * - G√©n√©ration automatique des timestamps
   * - Configuration active par d√©faut
   * 
   * üìã PARAM√àTRES :
   * - category : Cat√©gorie de la configuration
   * - key : Cl√© unique de la configuration
   * - value : Valeur de la configuration
   * - description : Description optionnelle
   * - validFrom : Date de d√©but (par d√©faut: maintenant)
   * - validTo : Date de fin (optionnelle)
   * 
   * @returns Nouvelle instance de Configuration
   */
  public static create(
    category: ConfigurationCategory,
    key: string,
    value: any,
    description?: string,
    validFrom: Date = new Date(),
    validTo?: Date
  ): Configuration {
    return new Configuration(
      '', // L'ID sera g√©n√©r√© par la base de donn√©es
      category,
      key,
      value,
      description || null,
      true,
      validFrom,
      validTo || null,
      new Date()
    );
  }

  /**
   * MISE √Ä JOUR - Cr√©ation d'une nouvelle version de la configuration
   * 
   * üéØ UTILIT√â :
   * - Modification de la valeur ou description
   * - Mise √† jour de la date de fin
   * - Conservation de l'historique (immutabilit√©)
   * 
   * ‚ö†Ô∏è IMPORTANT :
   * - Cr√©e une nouvelle instance (pas de modification directe)
   * - Met √† jour le timestamp updatedAt
   * - Conserve l'ID et les autres propri√©t√©s
   * 
   * @param value Nouvelle valeur
   * @param description Nouvelle description (optionnelle)
   * @param validTo Nouvelle date de fin (optionnelle)
   * @returns Nouvelle instance avec les modifications
   */
  public update(value: any, description?: string, validTo?: Date): Configuration {
    return new Configuration(
      this.getId(),
      this._category,
      this._key,
      value,
      description || this._description,
      this._isActive,
      this._validFrom,
      validTo || this._validTo,
      new Date()
    );
  }

  /**
   * D√âSACTIVATION - D√©sactive la configuration
   * 
   * üéØ UTILIT√â :
   * - D√©sactivation sans suppression
   * - Conservation de l'historique
   * - Possibilit√© de r√©activation future
   * 
   * ‚ö†Ô∏è IMPORTANT :
   * - Cr√©e une nouvelle instance inactive
   * - Met √† jour le timestamp updatedAt
   * - Conserve toutes les autres propri√©t√©s
   * 
   * @returns Nouvelle instance d√©sactiv√©e
   */
  public deactivate(): Configuration {
    return new Configuration(
      this.getId(),
      this._category,
      this._key,
      this._value,
      this._description,
      false,
      this._validFrom,
      this._validTo,
      new Date()
    );
  }
} 