import { QuoteCalculator } from "../application/services/QuoteCalculator";
import { QuoteContext } from "../domain/valueObjects/QuoteContext";
import { ServiceType } from "../domain/enums/ServiceType";

/**
 * Exemple d'utilisation du nouveau syst√®me de strat√©gies
 */
export class StrategyUsageExample {
  
  /**
   * Exemple 1: Utilisation directe du QuoteCalculator
   */
  static async exampleDirectUsage() {
    console.log("=== Exemple 1: Utilisation directe du QuoteCalculator ===");
    
    const calculator = QuoteCalculator.getInstance();
    
    // Cr√©er un contexte pour un d√©m√©nagement
    const movingContext = new QuoteContext(ServiceType.MOVING_PREMIUM);
    movingContext.setValue('volume', 30);
    movingContext.setValue('distance', 50);
    movingContext.setValue('defaultPrice', 500);
    movingContext.setValue('workers', 2);
    
    try {
      const quote = await calculator.calculateQuote(ServiceType.MOVING_PREMIUM, movingContext);
      console.log(`‚úÖ Devis d√©m√©nagement: ${quote.getTotalPrice().getAmount()}‚Ç¨`);
    } catch (error) {
      console.error("‚ùå Erreur:", error);
    }
  }

  /**
   * Exemple 2: Utilisation pour diff√©rents types de services
   */
  static async exampleMultipleServices() {
    console.log("\n=== Exemple 2: Utilisation pour diff√©rents types de services ===");
    
    const calculator = QuoteCalculator.getInstance();
    
    // Cr√©er un contexte pour le nettoyage
    const cleaningContext = new QuoteContext(ServiceType.CLEANING);
    cleaningContext.setValue('surface', 120);
    cleaningContext.setValue('rooms', 4);
    cleaningContext.setValue('defaultPrice', 200);
    
    try {
      const quote = await calculator.calculateQuote(ServiceType.CLEANING, cleaningContext);
      console.log(`‚úÖ Devis nettoyage: ${quote.getTotalPrice().getAmount()}‚Ç¨`);
      
      // Obtenir le prix de base directement depuis la strat√©gie
      const strategies = calculator.getAllStrategies();
      const cleaningStrategy = strategies.get(ServiceType.CLEANING);
      if (cleaningStrategy) {
        const basePrice = cleaningStrategy.getBasePrice(cleaningContext);
        console.log(`üí∞ Prix de base: ${basePrice}‚Ç¨`);
      }
    } catch (error) {
      console.error("‚ùå Erreur:", error);
    }
  }

  /**
   * Exemple 3: Utilisation pour la livraison
   */
  static async exampleDeliveryService() {
    console.log("\n=== Exemple 3: Utilisation pour la livraison ===");
    
    const calculator = QuoteCalculator.getInstance();
    
    // Cr√©er un contexte pour la livraison
    const deliveryContext = new QuoteContext(ServiceType.DELIVERY);
    deliveryContext.setValue('distance', 25);
    deliveryContext.setValue('weight', 50);
    deliveryContext.setValue('urgency', 'express');
    deliveryContext.setValue('defaultPrice', 100);
    
    try {
      const quote = await calculator.calculateQuote(ServiceType.DELIVERY, deliveryContext);
      console.log(`‚úÖ Devis livraison: ${quote.getTotalPrice().getAmount()}‚Ç¨`);
      
      // Obtenir le prix de base directement depuis la strat√©gie
      const strategies = calculator.getAllStrategies();
      const deliveryStrategy = strategies.get(ServiceType.DELIVERY);
      if (deliveryStrategy) {
        const basePrice = deliveryStrategy.getBasePrice(deliveryContext);
        console.log(`üí∞ Prix de base: ${basePrice}‚Ç¨`);
      }
    } catch (error) {
      console.error("‚ùå Erreur:", error);
    }
  }

  /**
   * Exemple 4: Lister toutes les strat√©gies disponibles
   */
  static exampleListStrategies() {
    console.log("\n=== Exemple 4: Lister toutes les strat√©gies disponibles ===");
    
    const calculator = QuoteCalculator.getInstance();
    const strategies = calculator.getAllStrategies();
    
    console.log("üìã Strat√©gies disponibles:");
    strategies.forEach((strategy, serviceType) => {
      console.log(`  - ${serviceType}: ${strategy.constructor.name}`);
    });
    
    console.log("\nüéØ Types de services support√©s:");
    strategies.forEach((strategy, serviceType) => {
      console.log(`  - ${serviceType}`);
    });
  }

  /**
   * Exemple 5: Hot-reload en d√©veloppement
   */
  static async exampleHotReload() {
    console.log("\n=== Exemple 5: Hot-reload en d√©veloppement ===");
    
    const calculator = QuoteCalculator.getInstance();
    
    // Forcer le rechargement des strat√©gies
    await calculator.refreshStrategies();
    
    console.log("üîÑ Strat√©gies recharg√©es avec succ√®s");
    
    // V√©rifier que les strat√©gies sont toujours disponibles
    const strategies = calculator.getAllStrategies();
    console.log(`üìä Nombre de strat√©gies charg√©es: ${strategies.size}`);
  }

  /**
   * Ex√©cute tous les exemples
   */
  static async runAllExamples() {
    console.log("üöÄ D√©marrage des exemples d'utilisation du pattern Strat√©gie\n");
    
    try {
      await this.exampleDirectUsage();
      await this.exampleMultipleServices();
      await this.exampleDeliveryService();
      this.exampleListStrategies();
      await this.exampleHotReload();
      
      console.log("\n‚úÖ Tous les exemples ont √©t√© ex√©cut√©s avec succ√®s !");
    } catch (error) {
      console.error("\n‚ùå Erreur lors de l'ex√©cution des exemples:", error);
    }
  }
}

// Exporter pour utilisation
export default StrategyUsageExample;
