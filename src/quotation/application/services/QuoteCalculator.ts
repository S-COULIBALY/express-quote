import { container, loadStrategies, getStrategy } from "../container";
import { QuoteStrategy } from "../../domain/interfaces/QuoteStrategy";
import { QuoteContext } from "../../domain/valueObjects/QuoteContext";
import { Quote } from "../../domain/valueObjects/Quote";
import { logger } from "../../../lib/logger";

let strategiesLoaded = false;

/**
 * Service centralis√© pour la gestion des strat√©gies de calcul de devis
 * Utilise le pattern Strat√©gie avec injection de d√©pendances
 */
export class QuoteCalculator {
  private static instance: QuoteCalculator;

  private constructor() {}

  /**
   * Obtient l'instance unique du service (pattern Singleton)
   */
  public static getInstance(): QuoteCalculator {
    if (!QuoteCalculator.instance) {
      QuoteCalculator.instance = new QuoteCalculator();
    }
    return QuoteCalculator.instance;
  }

  /**
   * Calcule un devis en utilisant la strat√©gie appropri√©e
   * @param serviceType Le type de service
   * @param context Le contexte de calcul
   * @returns Le devis calcul√©
   */
  public async calculateQuote(serviceType: string, context: QuoteContext): Promise<Quote> {
    logger.info(`üìä D√©but calcul pour service: ${serviceType}`);
    
    try {
      // En mode d√©veloppement, recharger les strat√©gies √† chaque appel
      if (process.env.NODE_ENV === "development") {
        strategiesLoaded = false;
      }

      // Charger les strat√©gies si n√©cessaire
      if (!strategiesLoaded) {
        logger.info("üîÑ Chargement des strat√©gies...");
        try {
          await loadStrategies(process.env.NODE_ENV === "development");
          strategiesLoaded = true;
          logger.info("‚úÖ Strat√©gies charg√©es avec succ√®s");
        } catch (loadError: any) {
          logger.error(`‚ùå √âchec du chargement des strat√©gies:`, loadError.message);
          throw new Error(`Impossible de charger les strat√©gies: ${loadError.message}`);
        }
      }

      // Obtenir la strat√©gie appropri√©e
      logger.info(`üîç Recherche de strat√©gie pour: ${serviceType}`);
      const strategy = getStrategy(serviceType);
      
      if (!strategy) {
        throw new Error(`Aucune strat√©gie trouv√©e pour le service: ${serviceType}`);
      }
      
      // V√©rifier que la strat√©gie peut g√©rer ce type de service
      if (!strategy.canHandle(serviceType)) {
        logger.error(`‚ùå Strat√©gie ${strategy.serviceType} ne peut pas g√©rer ${serviceType}`);
        throw new Error(`La strat√©gie ${strategy.serviceType} ne peut pas g√©rer le service ${serviceType}`);
      }

      logger.info(`üìä Calcul du devis avec la strat√©gie: ${strategy.constructor.name}`);
      
      // Calculer le devis
      const quote = await strategy.calculate(context);
      
      if (!quote) {
        throw new Error("La strat√©gie a retourn√© un devis vide");
      }
      
      logger.info(`‚úÖ Devis calcul√© avec succ√®s: ${quote.getTotalPrice().getAmount()}‚Ç¨`);
      
      return quote;
    } catch (error: any) {
      logger.error(`‚ùå Erreur lors du calcul du devis pour "${serviceType}":`, error.message);
      logger.error(`‚ùå Stack trace:`, error.stack?.substring(0, 500));
      throw new Error(`Impossible de calculer le devis pour "${serviceType}": ${error.message}`);
    }
  }

  /**
   * Obtient toutes les strat√©gies disponibles
   * @returns Map des strat√©gies par type de service
   */
  public getAllStrategies(): Map<string, QuoteStrategy> {
    const strategies = new Map<string, QuoteStrategy>();
    
    try {
      // Utiliser une approche diff√©rente pour r√©cup√©rer toutes les strat√©gies
      const serviceTypes = ['MOVING_PREMIUM', 'CLEANING', 'DELIVERY'];
      serviceTypes.forEach(serviceType => {
        try {
          const strategy = getStrategy(serviceType);
          strategies.set(serviceType, strategy);
        } catch (error) {
          logger.warn(`Strat√©gie non trouv√©e pour ${serviceType}`);
        }
      });
    } catch (error) {
      logger.warn("Erreur lors de la r√©cup√©ration des strat√©gies");
    }
    
    return strategies;
  }

  /**
   * V√©rifie si une strat√©gie existe pour un type de service
   * @param serviceType Le type de service
   * @returns true si une strat√©gie existe
   */
  public hasStrategy(serviceType: string): boolean {
    try {
      getStrategy(serviceType);
      return true;
    } catch {
      return false;
    }
  }

  /**
   * Force le rechargement des strat√©gies
   * Utile apr√®s une mise √† jour des strat√©gies
   */
  public async refreshStrategies(): Promise<void> {
    strategiesLoaded = false;
    await loadStrategies(true);
    logger.info("üîÑ Strat√©gies recharg√©es avec succ√®s");
  }
}

/**
 * Fonction d'export pour compatibilit√©
 */
export async function calculateQuote(serviceType: string, context: QuoteContext): Promise<Quote> {
  return QuoteCalculator.getInstance().calculateQuote(serviceType, context);
}
