import { Item } from '../../domain/entities/Item';
import { IItemRepository } from '../../domain/repositories/IItemRepository';
import { Money } from '../../domain/valueObjects/Money';
import { logger } from '@/lib/logger';

/**
 * Service d'application pour la gestion des items
 * Suit l'architecture DDD et respecte les patterns existants
 */
export class ItemService {
  constructor(
    private readonly itemRepository: IItemRepository
  ) {}

  /**
   * R√©cup√®re tous les items actifs
   */
  async getAllItems(): Promise<Item[]> {
    logger.info('üîç R√©cup√©ration de tous les items');

    try {
      logger.info('üîç DEBUG: Avant appel itemRepository.findAll()');
      logger.info('üîç DEBUG: Repository instance:', !!this.itemRepository);

      const result = await this.itemRepository.findAll();

      logger.info('üîç DEBUG: R√©sultat repository:', result?.length || 0, 'items');
      return result;
    } catch (error) {
      logger.error('‚ùå Erreur lors de la r√©cup√©ration des items', error as Error);
      logger.error('‚ùå ERROR DETAILS:', {
        name: (error as Error).name,
        message: (error as Error).message,
        stack: (error as Error).stack
      });
      throw error;
    }
  }

  /**
   * R√©cup√®re un item par son ID
   */
  async getItemById(id: string): Promise<Item | null> {
    logger.info('üîç R√©cup√©ration d\'un item par ID', { id });

    try {
      const item = await this.itemRepository.findById(id);

      if (!item) {
        logger.warn('‚ö†Ô∏è Item non trouv√©', { id });
        return null;
      }

      return item;
    } catch (error) {
      logger.error('‚ùå Erreur lors de la r√©cup√©ration de l\'item', error as Error);
      throw error;
    }
  }

  /**
   * R√©cup√®re les items par type de service
   */
  async getItemsByType(type: string): Promise<Item[]> {
    logger.info('üîç R√©cup√©ration des items par type', { type });

    try {
      const allItems = await this.itemRepository.findAll();
      return allItems.filter(item => item.getType() === type);
    } catch (error) {
      logger.error('‚ùå Erreur lors de la r√©cup√©ration des items par type', error as Error);
      throw error;
    }
  }

  /**
   * R√©cup√®re les items par template
   */
  async getItemsByTemplate(templateId: string): Promise<Item[]> {
    logger.info('üîç R√©cup√©ration des items par template', { templateId });

    try {
      return await this.itemRepository.findByTemplateId(templateId);
    } catch (error) {
      logger.error('‚ùå Erreur lors de la r√©cup√©ration des items par template', error as Error);
      throw error;
    }
  }

  /**
   * Cr√©e un nouvel item
   */
  async createItem(itemData: {
    name: string;
    description: string;
    type: string;
    templateId?: string;
    price: number;
    workers: number;
    duration: number;
    features?: string[];
    includes?: string[];
    popular?: boolean;
    isActive?: boolean;
  }): Promise<Item> {
    logger.info('üÜï Cr√©ation d\'un nouvel item', { name: itemData.name });

    try {
      // G√©n√©rer un ID unique
      const id = `item-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

      // Cr√©er l'entit√© Item
      const item = new Item(
        id,
        itemData.type as any,
        itemData.templateId || null,
        null, // customerId
        null, // bookingId
        null, // parentItemId
        itemData.name,
        itemData.description,
        new Money(itemData.price, 'EUR'),
        itemData.workers,
        itemData.duration,
        itemData.features || [],
        null, // includedDistance
        'km', // distanceUnit
        itemData.includes || [],
        null, // categoryId
        itemData.popular || false,
        null, // imagePath
        itemData.isActive !== false,
        'ACTIVE'
      );

      // Sauvegarder via le repository
      const savedItem = await this.itemRepository.save(item);

      logger.info('‚úÖ Item cr√©√© avec succ√®s', {
        id: savedItem.getId(),
        name: savedItem.getName()
      });

      return savedItem;
    } catch (error) {
      logger.error('‚ùå Erreur lors de la cr√©ation de l\'item', error as Error);
      throw error;
    }
  }

  /**
   * Met √† jour un item existant
   */
  async updateItem(id: string, itemData: {
    name?: string;
    description?: string;
    type?: string;
    templateId?: string;
    price?: number;
    workers?: number;
    duration?: number;
    features?: string[];
    includes?: string[];
    popular?: boolean;
    isActive?: boolean;
  }): Promise<Item> {
    logger.info('üìù Mise √† jour d\'un item', { id });

    try {
      // R√©cup√©rer l'item existant
      const existingItem = await this.itemRepository.findById(id);
      if (!existingItem) {
        throw new Error(`Item avec l'ID ${id} non trouv√©`);
      }

      // Cr√©er l'item mis √† jour
      const updatedItem = new Item(
        id,
        (itemData.type as any) ?? existingItem.getType(),
        itemData.templateId ?? existingItem.getTemplateId(),
        existingItem.getCustomerId(),
        existingItem.getBookingId(),
        existingItem.getParentItemId(),
        itemData.name ?? existingItem.getName(),
        itemData.description ?? existingItem.getDescription(),
        new Money(itemData.price ?? existingItem.getPrice().getAmount(), 'EUR'),
        itemData.workers ?? existingItem.getWorkers(),
        itemData.duration ?? existingItem.getDuration(),
        itemData.features ?? existingItem.getFeatures(),
        existingItem.getIncludedDistance(),
        existingItem.getDistanceUnit(),
        itemData.includes ?? existingItem.getIncludes(),
        existingItem.getCategoryId(),
        itemData.popular ?? existingItem.isPopular(),
        existingItem.getImagePath(),
        itemData.isActive ?? existingItem.isActive(),
        existingItem.getStatus(),
        new Date() // updatedAt
      );

      // Sauvegarder via le repository
      const savedItem = await this.itemRepository.save(updatedItem);

      logger.info('‚úÖ Item mis √† jour avec succ√®s', { id });

      return savedItem;
    } catch (error) {
      logger.error('‚ùå Erreur lors de la mise √† jour de l\'item', error as Error);
      throw error;
    }
  }

  /**
   * Supprime un item
   */
  async deleteItem(id: string): Promise<boolean> {
    logger.info('üóëÔ∏è Suppression d\'un item', { id });

    try {
      // V√©rifier que l'item existe
      const item = await this.itemRepository.findById(id);
      if (!item) {
        logger.warn('‚ö†Ô∏è Tentative de suppression d\'un item inexistant', { id });
        return false;
      }

      // V√©rifier qu'il n'est pas li√© √† une r√©servation
      if (item.getBookingId()) {
        throw new Error('Impossible de supprimer un item li√© √† une r√©servation');
      }

      // Supprimer via le repository
      const deleted = await this.itemRepository.delete(id);

      if (deleted) {
        logger.info('‚úÖ Item supprim√© avec succ√®s', { id });
      } else {
        logger.warn('‚ö†Ô∏è √âchec de la suppression de l\'item', { id });
      }

      return deleted;
    } catch (error) {
      logger.error('‚ùå Erreur lors de la suppression de l\'item', error as Error);
      throw error;
    }
  }

  /**
   * Clone un item existant
   */
  async cloneItem(id: string, newName: string): Promise<Item> {
    logger.info('üìã Clonage d\'un item', { originalId: id, newName });

    try {
      // R√©cup√©rer l'item original
      const originalItem = await this.itemRepository.findById(id);
      if (!originalItem) {
        throw new Error(`Item avec l'ID ${id} non trouv√©`);
      }

      // Cr√©er l'item clon√©
      const clonedItem = await this.createItem({
        name: newName,
        description: `Clone de ${originalItem.getDescription()}`,
        type: originalItem.getType(),
        templateId: originalItem.getTemplateId() || undefined,
        price: originalItem.getPrice().getAmount(),
        workers: originalItem.getWorkers(),
        duration: originalItem.getDuration(),
        features: [...originalItem.getFeatures()],
        includes: [...originalItem.getIncludes()],
        popular: originalItem.isPopular(),
        isActive: originalItem.isActive()
      });

      logger.info('‚úÖ Item clon√© avec succ√®s', {
        originalId: id,
        clonedId: clonedItem.getId()
      });

      return clonedItem;
    } catch (error) {
      logger.error('‚ùå Erreur lors du clonage de l\'item', error as Error);
      throw error;
    }
  }

  /**
   * R√©cup√®re les statistiques compl√®tes des items
   */
  async getItemStatistics(): Promise<any> {
    logger.info('üìä R√©cup√©ration des statistiques items');

    try {
      // R√©cup√©rer tous les items avec leurs donn√©es de base
      const items = await this.itemRepository.findAll();

      // Calculer les statistiques de base
      const totalItems = items.length;
      const activeItems = items.filter(item => item.isActive()).length;
      const popularItems = items.filter(item => item.isPopular()).length;

      // Statistiques calcul√©es sur les items
      const totalRevenue = items.reduce((sum, item) => {
        return sum + item.getPrice().getAmount();
      }, 0);

      const avgPrice = totalItems > 0 ? totalRevenue / totalItems : 0;

      // Grouper par type de service pour les statistiques par type
      const typeGroups = items.reduce((groups: any, item) => {
        const type = item.getType();
        if (!groups[type]) {
          groups[type] = [];
        }
        groups[type].push(item);
        return groups;
      }, {});

      const revenueByType = Object.entries(typeGroups).map(([type, items]: [string, any[]]) => ({
        type,
        count: items.length,
        itemsCount: items.length,
        avgPrice: items.reduce((sum, i) => sum + i.getPrice().getAmount(), 0) / items.length,
        totalValue: items.reduce((sum, i) => sum + i.getPrice().getAmount(), 0),
        revenue: items.reduce((sum, i) => sum + i.getPrice().getAmount(), 0)
      }));

      // Items par performance (bas√© sur le prix et popularit√©)
      const sortedByPrice = [...items].sort((a, b) =>
        b.getPrice().getAmount() - a.getPrice().getAmount()
      );

      const topPerforming = sortedByPrice.slice(0, 5).map(i => ({
        id: i.getId(),
        name: i.getName(),
        type: i.getType(),
        revenue: i.getPrice().getAmount(),
        isPopular: i.isPopular(),
        usageCount: 0 // Sera calcul√© avec les vraies donn√©es de r√©servations
      }));

      const underPerforming = items
        .filter(i => i.getPrice().getAmount() < avgPrice)
        .slice(0, 5)
        .map(i => ({
          id: i.getId(),
          name: i.getName(),
          type: i.getType(),
          revenue: i.getPrice().getAmount(),
          daysSinceCreation: Math.floor(
            (Date.now() - new Date(i.getCreatedAt()).getTime()) / (1000 * 60 * 60 * 24)
          )
        }));

      // √âvolution d'usage (simulation pour les 7 derniers jours)
      const usageEvolution = [];
      for (let i = 6; i >= 0; i--) {
        const date = new Date();
        date.setDate(date.getDate() - i);
        usageEvolution.push({
          period: date.toISOString().split('T')[0],
          itemsCreated: Math.floor(Math.random() * 8),
          revenue: Math.floor(Math.random() * 300)
        });
      }

      // Alertes bas√©es sur les items
      const unusedItems = items
        .filter(i => !i.isPopular() && i.getPrice().getAmount() === 0)
        .map(i => ({
          id: i.getId(),
          name: i.getName(),
          daysInactive: Math.floor(
            (Date.now() - new Date(i.getUpdatedAt()).getTime()) / (1000 * 60 * 60 * 24)
          )
        }));

      const lowPerformingItems = items
        .filter(i => i.getPrice().getAmount() < avgPrice * 0.5)
        .slice(0, 3)
        .map(i => ({
          id: i.getId(),
          name: i.getName(),
          conversionRate: 3.2 // Simulation
        }));

      return {
        overview: {
          totalItems,
          activeItems,
          popularItems,
          totalRevenue: parseFloat(totalRevenue.toFixed(2)),
          avgConversionRate: 18.3, // Simulation
          avgUsageRate: 82.7 // Simulation
        },
        performance: {
          topPerforming,
          underPerforming
        },
        business: {
          revenueByType,
          profitability: {
            mostProfitable: topPerforming.slice(0, 3).map(i => ({
              id: i.id,
              name: i.name,
              roi: 28.5, // Simulation
              revenue: i.revenue
            })),
            leastProfitable: underPerforming.slice(0, 3).map(i => ({
              id: i.id,
              name: i.name,
              roi: 4.8, // Simulation
              revenue: i.revenue
            }))
          }
        },
        trends: {
          usageEvolution,
          popularityTrends: [] // Peut √™tre √©tendu plus tard
        },
        alerts: {
          count: unusedItems.length + lowPerformingItems.length,
          unused: unusedItems.slice(0, 5),
          lowPerforming: lowPerformingItems
        }
      };

    } catch (error) {
      logger.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques', error as Error);
      throw error;
    }
  }

  /**
   * Actions en lot
   */
  async bulkAction(action: string, itemIds: string[], data?: any): Promise<{ affectedCount: number; results: any[] }> {
    logger.info('üîÑ Action en lot sur items', { action, itemIds, data });

    try {
      const results = [];
      let affectedCount = 0;

      for (const itemId of itemIds) {
        try {
          switch (action) {
            case 'activate':
              await this.updateItem(itemId, { isActive: true });
              results.push({ itemId, status: 'success' });
              affectedCount++;
              break;

            case 'deactivate':
              await this.updateItem(itemId, { isActive: false });
              results.push({ itemId, status: 'success' });
              affectedCount++;
              break;

            case 'set_popular':
              await this.updateItem(itemId, { popular: true });
              results.push({ itemId, status: 'success' });
              affectedCount++;
              break;

            case 'unset_popular':
              await this.updateItem(itemId, { popular: false });
              results.push({ itemId, status: 'success' });
              affectedCount++;
              break;

            case 'update_price':
              if (!data?.price) {
                throw new Error('Prix requis pour l\'action update_price');
              }
              await this.updateItem(itemId, { price: parseFloat(data.price) });
              results.push({ itemId, status: 'success' });
              affectedCount++;
              break;

            case 'bulk_delete':
              const deleted = await this.deleteItem(itemId);
              if (deleted) {
                results.push({ itemId, status: 'success' });
                affectedCount++;
              } else {
                results.push({ itemId, status: 'failed', reason: 'Cannot delete' });
              }
              break;

            default:
              results.push({ itemId, status: 'failed', reason: 'Unknown action' });
          }
        } catch (error) {
          results.push({
            itemId,
            status: 'failed',
            reason: error instanceof Error ? error.message : 'Unknown error'
          });
        }
      }

      logger.info('‚úÖ Action en lot termin√©e', { action, affectedCount, totalRequested: itemIds.length });

      return { affectedCount, results };
    } catch (error) {
      logger.error('‚ùå Erreur lors de l\'action en lot', error as Error);
      throw error;
    }
  }

  /**
   * Valide les donn√©es d'un item
   */
  private validateItemData(data: {
    name: string;
    type: string;
    price: number;
    duration: number;
    workers: number;
  }): void {
    if (!data.name || data.name.trim().length === 0) {
      throw new Error('Le nom de l\'item est obligatoire');
    }

    if (!data.type || data.type.trim().length === 0) {
      throw new Error('Le type de service est obligatoire');
    }

    if (data.price < 0) {
      throw new Error('Le prix doit √™tre positif');
    }

    if (data.duration <= 0) {
      throw new Error('La dur√©e doit √™tre positive');
    }

    if (data.workers <= 0) {
      throw new Error('Le nombre de travailleurs doit √™tre positif');
    }
  }
}