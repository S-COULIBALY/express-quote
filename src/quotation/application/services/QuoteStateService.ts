import { QuoteRequest, QuoteRequestStatus } from '../../domain/entities/QuoteRequest';
import { IQuoteRequestRepository } from '../../domain/repositories/IQuoteRequestRepository';
import { ValidationError } from '../../domain/errors/ValidationError';
import { logger } from '@/lib/logger';

/**
 * Service sp√©cialis√© pour la gestion des √©tats des demandes de devis
 * G√®re les transitions d'√©tat, l'expiration, la confirmation, etc.
 */
export class QuoteStateService {
    constructor(
        private readonly quoteRequestRepository: IQuoteRequestRepository
    ) {}

    /**
     * Confirme une demande de devis
     */
    async confirmQuoteRequest(temporaryId: string): Promise<QuoteRequest> {
        logger.info(`‚úÖ Confirmation demande de devis - temporaryId: ${temporaryId}`);
        
        try {
            const quoteRequest = await this.getQuoteRequestByTemporaryId(temporaryId);
            if (!quoteRequest) {
                throw new ValidationError('Demande de devis non trouv√©e ou expir√©e');
            }

            quoteRequest.updateStatus(QuoteRequestStatus.CONFIRMED);
            const confirmedQuoteRequest = await this.quoteRequestRepository.save(quoteRequest);
            
            logger.info(`‚úÖ Demande de devis confirm√©e - temporaryId: ${temporaryId}`);
            
            return confirmedQuoteRequest;
        } catch (error) {
            logger.error(`‚ùå Erreur lors de la confirmation de la demande de devis: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
            throw error;
        }
    }

    /**
     * Prolonge la dur√©e de validit√© d'une demande de devis
     */
    async extendQuoteRequest(temporaryId: string, additionalHours: number = 24): Promise<QuoteRequest> {
        logger.info(`‚è∞ Prolongation demande de devis - temporaryId: ${temporaryId}, additionalHours: ${additionalHours}`);
        
        try {
            const quoteRequest = await this.getQuoteRequestByTemporaryId(temporaryId);
            if (!quoteRequest) {
                throw new ValidationError('Demande de devis non trouv√©e');
            }

            quoteRequest.setExpirationHours(additionalHours);
            const extendedQuoteRequest = await this.quoteRequestRepository.save(quoteRequest);
            
            logger.info(`‚úÖ Demande de devis prolong√©e - temporaryId: ${temporaryId}, newExpiresAt: ${extendedQuoteRequest.getExpiresAt()}`);
            
            return extendedQuoteRequest;
        } catch (error) {
            logger.error(`‚ùå Erreur lors de la prolongation de la demande de devis: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
            throw error;
        }
    }

    /**
     * Traite les demandes expir√©es
     */
    async processExpiredQuotes(): Promise<void> {
        logger.info('üîÑ Traitement des demandes expir√©es');
        
        try {
            const expiredQuotes = await this.quoteRequestRepository.findExpired();
            
            for (const quote of expiredQuotes) {
                await this.markAsExpired(quote.getId());
            }
            
            logger.info(`‚úÖ Demandes expir√©es trait√©es - count: ${expiredQuotes.length}`);
        } catch (error) {
            logger.error(`‚ùå Erreur lors du traitement des demandes expir√©es: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
            throw error;
        }
    }

    /**
     * V√©rifie si une demande de devis est expir√©e et la marque si n√©cessaire
     */
    async checkAndHandleExpiration(temporaryId: string): Promise<QuoteRequest | null> {
        logger.info(`üîç V√©rification expiration - temporaryId: ${temporaryId}`);
        
        try {
            const quoteRequest = await this.quoteRequestRepository.findByTemporaryId(temporaryId);
            
            if (quoteRequest && quoteRequest.isExpired()) {
                logger.warn(`‚ö†Ô∏è Demande de devis expir√©e - temporaryId: ${temporaryId}`);
                await this.markAsExpired(quoteRequest.getId());
                return null;
            }
            
            return quoteRequest;
        } catch (error) {
            logger.error(`‚ùå Erreur lors de la v√©rification d'expiration: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
            throw error;
        }
    }

    /**
     * Change le statut d'une demande de devis
     */
    async changeQuoteRequestStatus(temporaryId: string, newStatus: QuoteRequestStatus): Promise<QuoteRequest> {
        logger.info(`üîÑ Changement de statut - temporaryId: ${temporaryId}, newStatus: ${newStatus}`);
        
        try {
            const quoteRequest = await this.getQuoteRequestByTemporaryId(temporaryId);
            if (!quoteRequest) {
                throw new ValidationError('Demande de devis non trouv√©e ou expir√©e');
            }

            quoteRequest.updateStatus(newStatus);
            const updatedQuoteRequest = await this.quoteRequestRepository.save(quoteRequest);
            
            logger.info(`‚úÖ Statut chang√© - temporaryId: ${temporaryId}, newStatus: ${newStatus}`);
            
            return updatedQuoteRequest;
        } catch (error) {
            logger.error(`‚ùå Erreur lors du changement de statut: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
            throw error;
        }
    }

    /**
     * Valide les transitions d'√©tat autoris√©es
     */
    validateStatusTransition(currentStatus: QuoteRequestStatus, newStatus: QuoteRequestStatus): boolean {
        const allowedTransitions: Record<QuoteRequestStatus, QuoteRequestStatus[]> = {
            [QuoteRequestStatus.TEMPORARY]: [QuoteRequestStatus.CONFIRMED, QuoteRequestStatus.EXPIRED],
            [QuoteRequestStatus.CONFIRMED]: [QuoteRequestStatus.EXPIRED],
            [QuoteRequestStatus.EXPIRED]: [] // Aucune transition depuis EXPIRED
        };

        const allowed = allowedTransitions[currentStatus] || [];
        const isValid = allowed.includes(newStatus);

        if (!isValid) {
            logger.warn(`‚ö†Ô∏è Transition d'√©tat invalide: ${currentStatus} -> ${newStatus}`);
        }

        return isValid;
    }

    // === M√âTHODES PRIV√âES ===

    /**
     * R√©cup√®re une demande de devis par son ID temporaire
     */
    private async getQuoteRequestByTemporaryId(temporaryId: string): Promise<QuoteRequest | null> {
        logger.info(`üîç Recherche demande de devis par temporaryId: ${temporaryId}`);
        
        try {
            const quoteRequest = await this.quoteRequestRepository.findByTemporaryId(temporaryId);
            
            if (quoteRequest) {
                logger.info(`‚úÖ Demande de devis trouv√©e - temporaryId: ${temporaryId}, id: ${quoteRequest.getId()}, status: ${quoteRequest.getStatus()}`);
            } else {
                logger.info(`‚ÑπÔ∏è Aucune demande de devis trouv√©e - temporaryId: ${temporaryId}`);
            }
            
            return quoteRequest;
        } catch (error) {
            logger.error(`‚ùå Erreur lors de la recherche de la demande de devis: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
            throw error;
        }
    }

    /**
     * Marque une demande comme expir√©e
     */
    private async markAsExpired(quoteRequestId: string): Promise<void> {
        await this.quoteRequestRepository.updateStatus(quoteRequestId, QuoteRequestStatus.EXPIRED);
        logger.info(`‚ö†Ô∏è Demande marqu√©e comme expir√©e - quoteRequestId: ${quoteRequestId}`);
    }
}
