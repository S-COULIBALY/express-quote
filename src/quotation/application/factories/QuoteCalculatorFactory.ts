import { QuoteCalculator } from '../../domain/calculators/MovingQuoteCalculator';
import { Rule } from '../../domain/valueObjects/Rule';
import { logger } from '../../../lib/logger';
import { ServiceType } from '../../domain/enums/ServiceType';
import { PrismaRuleRepository } from '../../infrastructure/repositories/PrismaRuleRepository';
import { PrismaConfigurationRepository } from '../../infrastructure/repositories/PrismaConfigurationRepository';
import { ConfigurationService } from '../../domain/services/ConfigurationService';
import { Configuration } from '../../domain/configuration/Configuration';
import { prisma } from '../../../lib/prisma';
import { ConfigurationCategory } from '../../domain/configuration/ConfigurationKey';

/**
 * Version de la factory utilisant les repositories corrig√©s pour acc√©der
 * aux r√®gles et configurations
 */
export class QuoteCalculatorFactory {
  // Utiliser les repositories pour acc√©der aux donn√©es
  private static ruleRepository: PrismaRuleRepository = new PrismaRuleRepository(prisma);
  private static configRepository: PrismaConfigurationRepository = new PrismaConfigurationRepository(prisma);
  private static initialized: boolean = false;
  
  /**
   * Initialise la factory
   */
  static async initialize(): Promise<void> {
    if (QuoteCalculatorFactory.initialized) {
      return;
    }
    
    console.log('==== INITIALISATION DE QUOTECALCULATORFACTORY ====');
    logger.info('üìã Initialisation de QuoteCalculatorFactory');
    
    // V√©rifier si la table de configuration est accessible
    const tableExists = await QuoteCalculatorFactory.configRepository.checkConfigurationTableExists();
    if (tableExists) {
      console.log('==== TABLE DE CONFIGURATION ACCESSIBLE ====');
      logger.info('‚úÖ La table de configuration est accessible');
    } else {
      console.log('==== TABLE DE CONFIGURATION NON ACCESSIBLE - UTILISATION DES VALEURS PAR D√âFAUT ====');
      logger.warn('‚ö†Ô∏è La table de configuration n\'est pas accessible - les valeurs par d√©faut seront utilis√©es');
    }
    
    QuoteCalculatorFactory.initialized = true;
  }
  
  /**
   * Cr√©e une instance de QuoteCalculator avec les r√®gles et configurations
   */
  static async createDefaultCalculator(): Promise<QuoteCalculator> {
    await QuoteCalculatorFactory.initialize();
    
    try {
      console.log('\n\n==== CR√âATION DU CALCULATEUR PAR D√âFAUT ====');
      logger.info('üìã Cr√©ation du calculateur par d√©faut');
      
      // R√©cup√©rer les r√®gles depuis le repository
      console.log('\n==== R√âCUP√âRATION DES R√àGLES ====');
      const movingRules = await QuoteCalculatorFactory.ruleRepository.findByServiceType(ServiceType.MOVING);
      const packRules = await QuoteCalculatorFactory.ruleRepository.findByServiceType(ServiceType.PACK); 
      const serviceRules = await QuoteCalculatorFactory.ruleRepository.findByServiceType(ServiceType.SERVICE);
      
      console.log(`\n==== R√àGLES R√âCUP√âR√âES : MOVING(${movingRules.length}), PACK(${packRules.length}), SERVICE(${serviceRules.length}) ====`);
      
      // Afficher des d√©tails sur les r√®gles MOVING
      console.log('\n=== D√âTAILS DES R√àGLES MOVING ===');
      movingRules.forEach((rule, index) => {
        if (index < 5) { // Limiter √† 5 r√®gles pour √©viter trop de logs
          console.log(`[${index + 1}/${movingRules.length}] ${rule.name}`);
          console.log(`  - ServiceType: ${rule.serviceType}`);
          console.log(`  - Valeur: ${rule.value} (${rule.isPercentage() ? '%' : '‚Ç¨'})`);
          console.log(`  - Actif: ${rule.isActive}`);
        } else if (index === 5) {
          console.log(`... et ${movingRules.length - 5} autres r√®gles MOVING`);
        }
      });
      
      // Afficher des d√©tails sur les r√®gles PACK
      console.log('\n=== D√âTAILS DES R√àGLES PACK ===');
      packRules.forEach((rule, index) => {
        if (index < 5) { // Limiter √† 5 r√®gles pour √©viter trop de logs
          console.log(`[${index + 1}/${packRules.length}] ${rule.name}`);
          console.log(`  - ServiceType: ${rule.serviceType}`);
          console.log(`  - Valeur: ${rule.value} (${rule.isPercentage() ? '%' : '‚Ç¨'})`);
          console.log(`  - Actif: ${rule.isActive}`);
        } else if (index === 5) {
          console.log(`... et ${packRules.length - 5} autres r√®gles PACK`);
        }
      });
      
      // Afficher des d√©tails sur les r√®gles SERVICE
      console.log('\n=== D√âTAILS DES R√àGLES SERVICE ===');
      serviceRules.forEach((rule, index) => {
        if (index < 5) { // Limiter √† 5 r√®gles pour √©viter trop de logs
          console.log(`[${index + 1}/${serviceRules.length}] ${rule.name}`);
          console.log(`  - ServiceType: ${rule.serviceType}`);
          console.log(`  - Valeur: ${rule.value} (${rule.isPercentage() ? '%' : '‚Ç¨'})`);
          console.log(`  - Actif: ${rule.isActive}`);
        } else if (index === 5) {
          console.log(`... et ${serviceRules.length - 5} autres r√®gles SERVICE`);
        }
      });
      
      logger.info('üìä R√®gles r√©cup√©r√©es:', { 
        moving: movingRules.length, 
        pack: packRules.length, 
        service: serviceRules.length 
      });
      
      // R√©cup√©rer les configurations √† partir des diff√©rentes cat√©gories
      console.log('\n==== R√âCUP√âRATION DES CONFIGURATIONS ====');
      const pricingConfigs = await QuoteCalculatorFactory.configRepository.findActiveByCategory(
        ConfigurationCategory.PRICING
      );
      
      const businessRulesConfigs = await QuoteCalculatorFactory.configRepository.findActiveByCategory(
        ConfigurationCategory.BUSINESS_RULES
      );
      
      const limitsConfigs = await QuoteCalculatorFactory.configRepository.findActiveByCategory(
        ConfigurationCategory.LIMITS
      );
      
      const serviceParamsConfigs = await QuoteCalculatorFactory.configRepository.findActiveByCategory(
        ConfigurationCategory.SERVICE_PARAMS
      );
      
      // Combiner les configurations
      const allConfigurations = [
        ...pricingConfigs,
        ...businessRulesConfigs,
        ...limitsConfigs,
        ...serviceParamsConfigs
      ];
      
      console.log(`\n==== CONFIGURATIONS R√âCUP√âR√âES : ${allConfigurations.length} ====`);
      
      // Afficher les d√©tails des configurations PRICING
      console.log('\n=== D√âTAILS DES CONFIGURATIONS PRICING ===');
      pricingConfigs.forEach((config, index) => {
        if (index < 5) { // Limiter √† 5 configurations pour √©viter trop de logs
          console.log(`[${index + 1}/${pricingConfigs.length}] ${config.key}`);
          console.log(`  - Valeur: ${JSON.stringify(config.value)}`);
          console.log(`  - Description: ${config.description || 'N/A'}`);
          console.log(`  - Actif: ${config.isActive}`);
        } else if (index === 5) {
          console.log(`... et ${pricingConfigs.length - 5} autres configurations PRICING`);
        }
      });
      
      // Afficher les d√©tails des configurations BUSINESS_RULES
      console.log('\n=== D√âTAILS DES CONFIGURATIONS BUSINESS_RULES ===');
      businessRulesConfigs.forEach((config, index) => {
        if (index < 5) { // Limiter √† 5 configurations pour √©viter trop de logs
          console.log(`[${index + 1}/${businessRulesConfigs.length}] ${config.key}`);
          console.log(`  - Valeur: ${JSON.stringify(config.value)}`);
          console.log(`  - Description: ${config.description || 'N/A'}`);
          console.log(`  - Actif: ${config.isActive}`);
        } else if (index === 5) {
          console.log(`... et ${businessRulesConfigs.length - 5} autres configurations BUSINESS_RULES`);
        }
      });
      
      // Afficher les d√©tails des autres configurations si elles existent
      if (limitsConfigs.length > 0 || serviceParamsConfigs.length > 0) {
        console.log('\n=== D√âTAILS DES AUTRES CONFIGURATIONS ===');
        [...limitsConfigs, ...serviceParamsConfigs].forEach((config, index) => {
          if (index < 5) {
            console.log(`[${index + 1}/${limitsConfigs.length + serviceParamsConfigs.length}] ${config.key} (${config.category})`);
            console.log(`  - Valeur: ${JSON.stringify(config.value)}`);
            console.log(`  - Description: ${config.description || 'N/A'}`);
            console.log(`  - Actif: ${config.isActive}`);
          } else if (index === 5) {
            console.log(`... et ${limitsConfigs.length + serviceParamsConfigs.length - 5} autres configurations`);
          }
        });
      }
      
      logger.info(`üìä Configurations r√©cup√©r√©es: ${allConfigurations.length}`);
      
      // Cr√©er le service de configuration
      const configService = new ConfigurationService(allConfigurations);
      
      // Cr√©er le calculateur
      console.log('\n==== CALCULATEUR CR√â√â AVEC SUCC√àS ====');
      logger.info('‚úÖ Calculateur cr√©√© avec succ√®s');
      return new QuoteCalculator(configService, movingRules, packRules, serviceRules);
    } catch (error) {
      logger.error('‚ùå Erreur lors de la cr√©ation du calculateur:', error as Error);
      throw new Error(`Impossible de cr√©er le calculateur: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
  }
  
  /**
   * Cr√©e une instance de QuoteCalculator avec des r√®gles personnalis√©es
   */
  static async createCalculatorWithRules(
    movingRules: Rule[] = [],
    packRules: Rule[] = [],
    serviceRules: Rule[] = []
  ): Promise<QuoteCalculator> {
    await QuoteCalculatorFactory.initialize();
    
    try {
      logger.info('üìã Cr√©ation du calculateur avec r√®gles personnalis√©es');
      
      // R√©cup√©rer les configurations √† partir des diff√©rentes cat√©gories
      const pricingConfigs = await QuoteCalculatorFactory.configRepository.findActiveByCategory(
        ConfigurationCategory.PRICING
      );
      
      const businessRulesConfigs = await QuoteCalculatorFactory.configRepository.findActiveByCategory(
        ConfigurationCategory.BUSINESS_RULES
      );
      
      const limitsConfigs = await QuoteCalculatorFactory.configRepository.findActiveByCategory(
        ConfigurationCategory.LIMITS
      );
      
      const serviceParamsConfigs = await QuoteCalculatorFactory.configRepository.findActiveByCategory(
        ConfigurationCategory.SERVICE_PARAMS
      );
      
      // Combiner les configurations
      const allConfigurations = [
        ...pricingConfigs,
        ...businessRulesConfigs,
        ...limitsConfigs,
        ...serviceParamsConfigs
      ];
      
      logger.info(`üìä Configurations r√©cup√©r√©es: ${allConfigurations.length}`);
      logger.info('üìä R√®gles personnalis√©es:', { 
        moving: movingRules.length, 
        pack: packRules.length, 
        service: serviceRules.length 
      });
      
      // Cr√©er le service de configuration
      const configService = new ConfigurationService(allConfigurations);
      
      // Cr√©er le calculateur
      logger.info('‚úÖ Calculateur avec r√®gles personnalis√©es cr√©√© avec succ√®s');
      return new QuoteCalculator(configService, movingRules, packRules, serviceRules);
    } catch (error) {
      logger.error('‚ùå Erreur lors de la cr√©ation du calculateur avec r√®gles personnalis√©es:', error as Error);
      throw new Error(`Impossible de cr√©er le calculateur: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
  }
  
  /**
   * M√©thode de compatibilit√© - ne fait rien dans cette version
   */
  static async invalidateConfigurationCache(): Promise<void> {
    logger.info('‚ÑπÔ∏è Invalidation du cache ignor√©e');
  }
} 