// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum BookingType {
  MOVING_QUOTE
  PACK
  SERVICE
}

enum BookingStatus {
  DRAFT
  CONFIRMED
  AWAITING_PAYMENT
  PAYMENT_PROCESSING
  PAYMENT_FAILED
  PAYMENT_COMPLETED
  CANCELED
  COMPLETED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DocumentType {
  BOOKING_CONFIRMATION
  INVOICE
  CONTRACT
  OTHER
}

enum EmailStatus {
  QUEUED
  SENT
  FAILED
}

model Customer {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings       Booking[]
  emailsReceived EmailLog[]
}

model Booking {
  id            String        @id @default(uuid())
  type          BookingType
  status        BookingStatus @default(DRAFT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Common fields for all booking types
  customerId    String
  customer      Customer      @relation(fields: [customerId], references: [id])
  totalAmount   Float
  paymentMethod String?
  
  // Moving quote specific fields
  moveDate      DateTime?
  pickupAddress String?
  deliveryAddress String?
  distance      Float?
  volume        Float?
  items         Json?         // Array of items to move
  
  // Pack specific fields
  packId        String?
  packName      String?
  scheduledDate DateTime?
  
  // Service specific fields
  serviceId     String?
  serviceName   String?
  description   String?
  scheduledTime String?
  location      String?
  
  // Relations
  transactions  Transaction[]
  documents     Document[]
  emailLogs     EmailLog[]
  
  @@index([customerId])
  @@index([status])
  @@index([type])
}

model Transaction {
  id                String            @id @default(uuid())
  bookingId         String
  booking           Booking           @relation(fields: [bookingId], references: [id])
  amount            Float
  currency          String            @default("EUR")
  status            TransactionStatus
  paymentMethod     String?
  paymentIntentId   String?           // Stripe payment intent ID
  stripeSessionId   String?           // Stripe checkout session ID
  errorMessage      String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([bookingId])
  @@index([status])
  @@index([paymentIntentId])
  @@index([stripeSessionId])
}

model Document {
  id            String       @id @default(uuid())
  bookingId     String
  booking       Booking      @relation(fields: [bookingId], references: [id])
  type          DocumentType
  filename      String
  content       Bytes        // PDF content stored as binary
  createdAt     DateTime     @default(now())
  
  // Related email attachments
  attachments   EmailAttachment[]
  
  @@index([bookingId])
  @@index([type])
}

model EmailLog {
  id            String       @id @default(uuid())
  bookingId     String
  booking       Booking      @relation(fields: [bookingId], references: [id])
  customerId    String
  customer      Customer     @relation(fields: [customerId], references: [id])
  subject       String
  text          String       @db.Text
  html          String?      @db.Text
  status        EmailStatus  @default(QUEUED)
  errorMessage  String?
  sentAt        DateTime?
  createdAt     DateTime     @default(now())
  
  // Relations
  attachments   EmailAttachment[]
  
  @@index([customerId])
  @@index([bookingId])
  @@index([status])
}

model EmailAttachment {
  id            String   @id @default(uuid())
  emailId       String
  email         EmailLog @relation(fields: [emailId], references: [id])
  documentId    String?
  document      Document? @relation(fields: [documentId], references: [id])
  filename      String
  contentType   String
  content       Bytes?   // Only stored here if not linked to a document
  
  @@index([emailId])
  @@index([documentId])
}
