#!/usr/bin/env ts-node

/**
 * ============================================================================
 * SCRIPT DE G√âN√âRATION AUTOMATIQUE DES FALLBACKS
 * ============================================================================
 *
 * üéØ OBJECTIF:
 * G√©n√©rer automatiquement les donn√©es de fallback (constraintsFallback,
 * additionalServicesFallback) depuis la base de donn√©es de production.
 *
 * üîß UTILISATION:
 * npm run generate:fallbacks
 * OU
 * ts-node scripts/generate-fallbacks.ts
 *
 * üì¶ SORTIE:
 * - src/data/fallbacks/movingFallback.ts
 * - src/data/fallbacks/cleaningFallback.ts
 * - src/data/fallbacks/index.ts (export centralis√©)
 *
 * ‚úÖ B√âN√âFICES:
 * - Fallbacks toujours synchronis√©s avec la BDD
 * - √âlimination duplication dans modaux
 * - Source unique de v√©rit√©
 */

import { PrismaClient } from '@prisma/client';
import * as fs from 'fs';
import * as path from 'path';

const prisma = new PrismaClient();

// Types
interface GeneratedConstraint {
  id: string;
  name: string;
  description?: string;
  category?: string;
  icon?: string;
  type: 'constraint' | 'service';
  value?: number;
  impact?: string;
  autoDetection?: boolean;
}

// ============================================================================
// FONCTIONS DE G√âN√âRATION
// ============================================================================

/**
 * R√©cup√©rer les r√®gles depuis la BDD
 */
async function fetchRulesFromDatabase(serviceType: 'MOVING' | 'CLEANING') {
  console.log(`üì• R√©cup√©ration des r√®gles ${serviceType} depuis la BDD...`);

  const businessRules = await prisma.rule.findMany({
    where: {
      serviceType,
      isActive: true
    },
    orderBy: [
      { category: 'asc' },
      { name: 'asc' }
    ]
  });

  console.log(`‚úÖ ${businessRules.length} r√®gles ${serviceType} r√©cup√©r√©es`);
  return businessRules;
}

/**
 * Classifier une r√®gle (constraint vs service)
 */
function classifyRule(ruleName: string, ruleCategory: string): 'constraint' | 'service' {
  const name = ruleName.toLowerCase();
  const category = ruleCategory.toLowerCase();

  if (category === 'surcharge' || category === 'contrainte' || category === 'difficulte') {
    return 'constraint';
  }
  if (category === 'fixed' || category === 'service' || category === 'prestation') {
    return 'service';
  }

  const constraintKeywords = ['contrainte', 'difficult√©', 'majoration', 'surcharge'];
  for (const keyword of constraintKeywords) {
    if (name.includes(keyword)) return 'constraint';
  }

  return 'service';
}

/**
 * Obtenir l'ic√¥ne pour une r√®gle
 */
function getIconForRule(ruleName: string, serviceType: 'MOVING' | 'CLEANING', itemType: 'constraint' | 'service'): string {
  const name = ruleName.toLowerCase();

  if (serviceType === 'MOVING') {
    if (itemType === 'constraint') {
      if (name.includes('monte-meuble')) return 'üèóÔ∏è';
      if (name.includes('distance') && name.includes('portage')) return 'üìè';
      if (name.includes('zone pi√©tonne')) return 'üö∂';
      if (name.includes('rue') && name.includes('√©troite')) return 'üöß';
      if (name.includes('stationnement')) return 'üÖøÔ∏è';
      if (name.includes('circulation')) return 'üö¶';
      if (name.includes('ascenseur')) return 'üè¢';
      if (name.includes('escalier')) return 'ü™ú';
      return '‚ö†Ô∏è';
    } else {
      if (name.includes('d√©montage')) return 'üîß';
      if (name.includes('remontage')) return 'üî®';
      if (name.includes('piano')) return 'üéπ';
      if (name.includes('emballage')) return 'üì¶';
      if (name.includes('d√©ballage')) return 'üì≠';
      if (name.includes('stockage')) return 'üè™';
      if (name.includes('nettoyage')) return 'üßπ';
      return 'üîß';
    }
  } else {
    if (itemType === 'constraint') {
      if (name.includes('animaux')) return 'üêï';
      if (name.includes('urgence')) return 'üö®';
      if (name.includes('stationnement')) return 'üÖøÔ∏è';
      if (name.includes('ascenseur')) return 'üè¢';
      if (name.includes('allergie')) return 'ü§ß';
      return '‚ö†Ô∏è';
    } else {
      if (name.includes('grand nettoyage') || name.includes('printemps')) return 'üå∏';
      if (name.includes('vitres')) return 'ü™ü';
      if (name.includes('nettoyage')) return 'üßΩ';
      if (name.includes('tapis')) return 'üè†';
      if (name.includes('d√©sinfection')) return 'ü¶†';
      return 'üßΩ';
    }
  }
}

/**
 * Transformer les r√®gles BDD en format fallback
 */
function transformToFallback(
  businessRules: any[],
  serviceType: 'MOVING' | 'CLEANING'
): { constraints: GeneratedConstraint[]; services: GeneratedConstraint[] } {
  const constraints: GeneratedConstraint[] = [];
  const services: GeneratedConstraint[] = [];

  for (const rule of businessRules) {
    const itemType = classifyRule(rule.name, rule.category);
    const icon = getIconForRule(rule.name, serviceType, itemType);

    const item: GeneratedConstraint = {
      id: rule.configKey || `rule_${rule.id}`,
      name: rule.name,
      description: rule.description || undefined,
      category: rule.category.toLowerCase(),
      icon,
      type: itemType,
      value: rule.value || undefined,
      impact: rule.value > 0 ? `+${rule.value}‚Ç¨` : undefined,
      autoDetection: rule.condition?.autoDetection || false
    };

    if (itemType === 'constraint') {
      constraints.push(item);
    } else {
      services.push(item);
    }
  }

  return { constraints, services };
}

/**
 * G√©n√©rer le code TypeScript pour un fichier fallback
 */
function generateTypeScriptFile(
  constraints: GeneratedConstraint[],
  services: GeneratedConstraint[],
  serviceType: 'MOVING' | 'CLEANING'
): string {
  const serviceName = serviceType === 'MOVING' ? 'D√©m√©nagement' : 'Nettoyage';
  const date = new Date().toISOString().split('T')[0];

  // Fonction pour √©chapper correctement les apostrophes dans les cha√Ænes
  const escapeString = (str: string) => {
    return str.replace(/\\/g, '\\\\').replace(/'/g, "\\'");
  };

  // G√©n√©rer le code avec des template literals pour √©viter les probl√®mes d'apostrophes
  const constraintsCode = JSON.stringify(constraints, null, 2)
    .replace(/"([^"]+)":/g, '$1:'); // Remove quotes from keys only

  const servicesCode = JSON.stringify(services, null, 2)
    .replace(/"([^"]+)":/g, '$1:'); // Remove quotes from keys only

  return `/**
 * ============================================================================
 * FALLBACK ${serviceType} - Donn√©es g√©n√©r√©es automatiquement
 * ============================================================================
 *
 * ü§ñ G√âN√âR√â AUTOMATIQUEMENT le ${date}
 * ‚ö†Ô∏è  NE PAS MODIFIER MANUELLEMENT
 *
 * Ce fichier est g√©n√©r√© via: npm run generate:fallbacks
 * Source: Base de donn√©es production (table BusinessRule)
 *
 * üìã Utilisation:
 * Ces donn√©es sont utilis√©es comme fallback si la BDD est indisponible.
 */

export interface Constraint {
  id: string;
  name: string;
  description?: string;
  category?: string;
  icon?: string;
  type: 'constraint' | 'service';
  value?: number;
  impact?: string;
  autoDetection?: boolean;
}

/**
 * ‚úÖ CONTRAINTES ${serviceName.toUpperCase()}
 * Total: ${constraints.length} contraintes
 */
export const ${serviceType.toLowerCase()}ConstraintsFallback: Constraint[] = ${constraintsCode};

/**
 * ‚úÖ SERVICES ${serviceName.toUpperCase()}
 * Total: ${services.length} services
 */
export const ${serviceType.toLowerCase()}ServicesFallback: Constraint[] = ${servicesCode};

/**
 * ‚úÖ TOUS LES ITEMS ${serviceName.toUpperCase()}
 * Total: ${constraints.length + services.length} items
 */
export const all${serviceType.charAt(0) + serviceType.slice(1).toLowerCase()}ItemsFallback = [
  ...${serviceType.toLowerCase()}ConstraintsFallback,
  ...${serviceType.toLowerCase()}ServicesFallback
];
`;
}

/**
 * G√©n√©rer le fichier index.ts centralis√©
 */
function generateIndexFile(): string {
  return `/**
 * ============================================================================
 * FALLBACKS CENTRALIS√âS - Export unique
 * ============================================================================
 *
 * üéØ OBJECTIF:
 * Point d'entr√©e centralis√© pour tous les fallbacks g√©n√©r√©s automatiquement.
 *
 * üìã UTILISATION:
 * \`\`\`typescript
 * import {
 *   movingConstraintsFallback,
 *   movingServicesFallback,
 *   cleaningConstraintsFallback,
 *   cleaningServicesFallback
 * } from '@/data/fallbacks';
 * \`\`\`
 */

// Exports MOVING
export {
  movingConstraintsFallback,
  movingServicesFallback,
  allMovingItemsFallback,
  type Constraint as MovingConstraint
} from './movingFallback';

// Exports CLEANING
export {
  cleaningConstraintsFallback,
  cleaningServicesFallback,
  allCleaningItemsFallback,
  type Constraint as CleaningConstraint
} from './cleaningFallback';
`;
}

// ============================================================================
// SCRIPT PRINCIPAL
// ============================================================================

async function main() {
  console.log('üöÄ G√©n√©ration automatique des fallbacks depuis la BDD\n');
  console.log('='.repeat(70));

  try {
    // 1. Cr√©er le dossier de sortie
    const outputDir = path.join(__dirname, '..', 'src', 'data', 'fallbacks');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
      console.log(`üìÅ Dossier cr√©√©: ${outputDir}`);
    }

    // 2. G√©n√©rer fallback MOVING
    console.log('\nüì¶ G√âN√âRATION FALLBACK MOVING');
    console.log('-'.repeat(70));
    const movingRules = await fetchRulesFromDatabase('MOVING');
    const movingData = transformToFallback(movingRules, 'MOVING');
    const movingCode = generateTypeScriptFile(
      movingData.constraints,
      movingData.services,
      'MOVING'
    );
    const movingPath = path.join(outputDir, 'movingFallback.ts');
    fs.writeFileSync(movingPath, movingCode, 'utf-8');
    console.log(`‚úÖ Fichier g√©n√©r√©: ${movingPath}`);
    console.log(`   - ${movingData.constraints.length} contraintes`);
    console.log(`   - ${movingData.services.length} services`);

    // 3. G√©n√©rer fallback CLEANING
    console.log('\nüì¶ G√âN√âRATION FALLBACK CLEANING');
    console.log('-'.repeat(70));
    const cleaningRules = await fetchRulesFromDatabase('CLEANING');
    const cleaningData = transformToFallback(cleaningRules, 'CLEANING');
    const cleaningCode = generateTypeScriptFile(
      cleaningData.constraints,
      cleaningData.services,
      'CLEANING'
    );
    const cleaningPath = path.join(outputDir, 'cleaningFallback.ts');
    fs.writeFileSync(cleaningPath, cleaningCode, 'utf-8');
    console.log(`‚úÖ Fichier g√©n√©r√©: ${cleaningPath}`);
    console.log(`   - ${cleaningData.constraints.length} contraintes`);
    console.log(`   - ${cleaningData.services.length} services`);

    // 4. G√©n√©rer index.ts
    console.log('\nüì¶ G√âN√âRATION INDEX CENTRALIS√â');
    console.log('-'.repeat(70));
    const indexCode = generateIndexFile();
    const indexPath = path.join(outputDir, 'index.ts');
    fs.writeFileSync(indexPath, indexCode, 'utf-8');
    console.log(`‚úÖ Fichier g√©n√©r√©: ${indexPath}`);

    // 5. R√©sum√©
    console.log('\n' + '='.repeat(70));
    console.log('üìä R√âSUM√â DE LA G√âN√âRATION');
    console.log('='.repeat(70));
    console.log(`‚úÖ MOVING: ${movingData.constraints.length + movingData.services.length} items`);
    console.log(`   - Contraintes: ${movingData.constraints.length}`);
    console.log(`   - Services: ${movingData.services.length}`);
    console.log(`‚úÖ CLEANING: ${cleaningData.constraints.length + cleaningData.services.length} items`);
    console.log(`   - Contraintes: ${cleaningData.constraints.length}`);
    console.log(`   - Services: ${cleaningData.services.length}`);
    console.log(`\n‚úÖ 3 fichiers g√©n√©r√©s dans: ${outputDir}`);
    console.log('\nüéâ G√©n√©ration termin√©e avec succ√®s!\n');

    // Retourner un JSON structur√© pour parsing par l'API
    console.log('RESULT_JSON:', JSON.stringify({
      movingConstraints: movingData.constraints.length,
      movingServices: movingData.services.length,
      movingTotal: movingData.constraints.length + movingData.services.length,
      cleaningConstraints: cleaningData.constraints.length,
      cleaningServices: cleaningData.services.length,
      cleaningTotal: cleaningData.constraints.length + cleaningData.services.length,
      filesGenerated: 3
    }));

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cution
main();
