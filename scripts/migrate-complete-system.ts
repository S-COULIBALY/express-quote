/**
 * ============================================================================
 * MIGRATION COMPL√àTE DU SYST√àME DE CONFIGURATION
 * ============================================================================
 * 
 * üéØ OBJECTIF :
 * Orchestrer la migration compl√®te du syst√®me de configuration :
 * 1. Migration de la base de donn√©es (ajout du champ businessType)
 * 2. Migration des configurations (ajout des nouvelles configurations)
 * 3. Validation de la migration
 * 
 * üöÄ UTILISATION :
 * npx ts-node scripts/migrate-complete-system.ts
 */

import { applyDatabaseMigration } from './apply-database-migration';
import { migrateBusinessTypeConfigurations } from './migrate-business-type-configurations';
import { validateMigratedConfigurations } from './validate-migrated-configurations';

interface MigrationSummary {
  databaseMigration: boolean;
  configurationMigration: boolean;
  validation: boolean;
  totalConfigurations: number;
  errors: string[];
}

/**
 * Ex√©cute la migration compl√®te du syst√®me
 */
async function migrateCompleteSystem(): Promise<MigrationSummary> {
  const summary: MigrationSummary = {
    databaseMigration: false,
    configurationMigration: false,
    validation: false,
    totalConfigurations: 0,
    errors: []
  };

  try {
    console.log('üöÄ MIGRATION COMPL√àTE DU SYST√àME DE CONFIGURATION');
    console.log('=' .repeat(70));
    console.log('üìÖ Date :', new Date().toISOString());
    console.log('');

    // √âTAPE 1 : Migration de la base de donn√©es
    console.log('üìã √âTAPE 1/3 : MIGRATION BASE DE DONN√âES');
    console.log('-' .repeat(50));
    try {
      await applyDatabaseMigration();
      summary.databaseMigration = true;
      console.log('‚úÖ Migration base de donn√©es : SUCC√àS');
    } catch (error) {
      const errorMsg = `‚ùå Migration base de donn√©es : √âCHEC - ${error}`;
      summary.errors.push(errorMsg);
      console.log(errorMsg);
      throw error;
    }

    console.log('');

    // √âTAPE 2 : Migration des configurations
    console.log('üìã √âTAPE 2/3 : MIGRATION DES CONFIGURATIONS');
    console.log('-' .repeat(50));
    try {
      const migrationResult = await migrateBusinessTypeConfigurations();
      summary.configurationMigration = migrationResult.success;
      summary.totalConfigurations = migrationResult.created + migrationResult.updated;
      
      if (migrationResult.success) {
        console.log('‚úÖ Migration configurations : SUCC√àS');
        console.log(`   - ${migrationResult.created} configurations cr√©√©es`);
        console.log(`   - ${migrationResult.updated} configurations mises √† jour`);
      } else {
        const errorMsg = `‚ùå Migration configurations : √âCHEC - ${migrationResult.errors.length} erreurs`;
        summary.errors.push(errorMsg);
        console.log(errorMsg);
        migrationResult.errors.forEach(error => console.log(`   ${error}`));
        throw new Error('Migration des configurations √©chou√©e');
      }
    } catch (error) {
      const errorMsg = `‚ùå Migration configurations : √âCHEC - ${error}`;
      summary.errors.push(errorMsg);
      console.log(errorMsg);
      throw error;
    }

    console.log('');

    // √âTAPE 3 : Validation de la migration
    console.log('üìã √âTAPE 3/3 : VALIDATION DE LA MIGRATION');
    console.log('-' .repeat(50));
    try {
      const validationResult = await validateMigratedConfigurations();
      summary.validation = validationResult.success;
      
      if (validationResult.success) {
        console.log('‚úÖ Validation migration : SUCC√àS');
        console.log(`   - ${validationResult.validatedConfigurations} configurations valid√©es`);
      } else {
        const errorMsg = `‚ùå Validation migration : √âCHEC - ${validationResult.errors.length} erreurs`;
        summary.errors.push(errorMsg);
        console.log(errorMsg);
        validationResult.errors.forEach(error => console.log(`   ${error}`));
        throw new Error('Validation de la migration √©chou√©e');
      }
    } catch (error) {
      const errorMsg = `‚ùå Validation migration : √âCHEC - ${error}`;
      summary.errors.push(errorMsg);
      console.log(errorMsg);
      throw error;
    }

    console.log('');

    // R√âSUM√â FINAL
    console.log('üéâ MIGRATION COMPL√àTE TERMIN√âE AVEC SUCC√àS !');
    console.log('=' .repeat(70));
    console.log('üìä R√âSUM√â FINAL :');
    console.log(`   ‚úÖ Migration base de donn√©es : ${summary.databaseMigration ? 'SUCC√àS' : '√âCHEC'}`);
    console.log(`   ‚úÖ Migration configurations : ${summary.configurationMigration ? 'SUCC√àS' : '√âCHEC'}`);
    console.log(`   ‚úÖ Validation migration : ${summary.validation ? 'SUCC√àS' : '√âCHEC'}`);
    console.log(`   üìà Total configurations trait√©es : ${summary.totalConfigurations}`);
    console.log(`   ‚ùå Erreurs : ${summary.errors.length}`);

    if (summary.errors.length > 0) {
      console.log('\nüö® ERREURS D√âTECT√âES :');
      summary.errors.forEach(error => console.log(`   ${error}`));
    }

    return summary;

  } catch (error) {
    console.log('\n‚ùå MIGRATION COMPL√àTE √âCHOU√âE !');
    console.log('=' .repeat(50));
    console.log(`‚ùå Erreur : ${error}`);
    console.log(`‚ùå Erreurs totales : ${summary.errors.length}`);
    
    if (summary.errors.length > 0) {
      console.log('\nüö® ERREURS D√âTECT√âES :');
      summary.errors.forEach(error => console.log(`   ${error}`));
    }

    throw error;
  }
}

/**
 * Fonction principale
 */
async function main(): Promise<void> {
  try {
    const summary = await migrateCompleteSystem();
    
    if (summary.databaseMigration && summary.configurationMigration && summary.validation) {
      console.log('\nüéâ TOUTES LES MIGRATIONS ONT R√âUSSI !');
      console.log('Le syst√®me de configuration est maintenant pr√™t √† √™tre utilis√©.');
      process.exit(0);
    } else {
      console.log('\n‚ùå CERTAINES MIGRATIONS ONT √âCHOU√â !');
      console.log('Veuillez corriger les erreurs avant de continuer.');
      process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå Erreur fatale :', error);
    process.exit(1);
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Erreur non g√©r√©e :', error);
    process.exit(1);
  });
}

export { migrateCompleteSystem };
