import { PrismaClient } from '@prisma/client';
import { createDefaultConfigurations } from '../src/quotation/domain/configuration/DefaultConfigurations';

const prisma = new PrismaClient();

/**
 * Initialise le syst√®me avec les configurations par d√©faut
 * ‚úÖ SIMPLIFI√â: G√®re uniquement les configurations (les r√®gles sont g√©r√©es ailleurs)
 */
async function initializeSystem() {
  try {
    console.log('=== Initialisation des configurations syst√®me ===');
    await initializeConfigurations();
    console.log('=== Initialisation termin√©e avec succ√®s ===');
  } catch (error) {
    console.error('Erreur lors de l\'initialisation du syst√®me:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Initialise les configurations par d√©faut
 * ‚úÖ MISE √Ä JOUR: Ajoute intelligemment les configurations manquantes
 * üìä Retourne un JSON structur√© avec les statistiques
 */
async function initializeConfigurations() {
  try {
    console.log('üîÑ V√©rification des configurations...');

    // Obtenir les configurations par d√©faut
    const defaultConfigs = createDefaultConfigurations();

    // R√©cup√©rer toutes les configurations existantes
    const existingConfigs = await prisma.configuration.findMany({
      select: {
        category: true,
        key: true
      }
    });

    // Cr√©er un Set des cl√©s existantes pour recherche rapide
    const existingKeys = new Set(
      existingConfigs.map(c => `${c.category}:${c.key}`)
    );

    // Filtrer pour obtenir seulement les configurations manquantes
    const missingConfigs = defaultConfigs.filter(config =>
      !existingKeys.has(`${config.category}:${config.key}`)
    );

    if (missingConfigs.length === 0) {
      console.log(`‚úÖ Toutes les ${existingConfigs.length} configurations sont d√©j√† pr√©sentes. Aucune mise √† jour n√©cessaire.`);
      // Retourner un JSON pour parsing par l'API
      console.log('RESULT_JSON:', JSON.stringify({
        existingCount: existingConfigs.length,
        addedCount: 0,
        totalCount: existingConfigs.length,
        addedConfigs: []
      }));
      return;
    }

    console.log(`üìä √âtat actuel:`);
    console.log(`   - Configurations existantes: ${existingConfigs.length}`);
    console.log(`   - Configurations √† ajouter: ${missingConfigs.length}`);
    console.log(`   - Total apr√®s ajout: ${existingConfigs.length + missingConfigs.length}`);
    console.log('');
    console.log('üîß Ajout des configurations manquantes...');

    // Ins√©rer seulement les configurations manquantes
    let addedCount = 0;
    const addedConfigs: string[] = [];

    for (const config of missingConfigs) {
      await prisma.configuration.create({
        data: {
          category: config.category,
          key: config.key,
          value: config.value,
          description: config.description || null,
          isActive: config.isActive,
          validFrom: config.validFrom,
          validTo: config.validTo,
          createdAt: new Date(),
          updatedAt: new Date()
        }
      });
      addedCount++;
      const configName = `${config.category}.${config.key}`;
      addedConfigs.push(configName);
      console.log(`   ‚úÖ ${configName} ajout√©e`);
    }

    console.log('');
    console.log(`‚úÖ ${addedCount} nouvelle(s) configuration(s) ajout√©e(s) avec succ√®s.`);

    // Retourner un JSON structur√© pour parsing par l'API
    console.log('RESULT_JSON:', JSON.stringify({
      existingCount: existingConfigs.length,
      addedCount: addedCount,
      totalCount: existingConfigs.length + addedCount,
      addedConfigs: addedConfigs
    }));
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation des configurations:', error);
    throw error;
  }
}

// Ex√©cuter le script
if (require.main === module) {
  initializeSystem()
    .then(() => console.log('Script termin√©.'))
    .catch(e => console.error('Erreur d\'ex√©cution:', e));
}

// Exporter la fonction pour permettre son appel depuis d'autres scripts
export { initializeSystem }; 