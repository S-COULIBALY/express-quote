/**
 * ============================================================================
 * R√âINITIALISATION COMPL√àTE DE LA BASE DE DONN√âES CONFIGURATION
 * ============================================================================
 * 
 * üéØ OBJECTIF :
 * Vider compl√®tement la table Configuration et recr√©er toutes les donn√©es
 * √† partir de DefaultValues.ts et DefaultConfigurations.ts
 * 
 * ‚ö†Ô∏è ATTENTION : Ce script est pour le mode D√âVELOPPEMENT uniquement !
 * 
 * üöÄ UTILISATION :
 * npx ts-node scripts/reset-configuration-database.ts
 */

import { PrismaClient } from '@prisma/client';
import { createDefaultConfigurations } from '../src/quotation/domain/configuration/DefaultConfigurations';
import { ConfigurationCategory } from '../src/quotation/domain/configuration/ConfigurationKey';

const prisma = new PrismaClient();

interface ResetResult {
  success: boolean;
  deletedCount: number;
  createdCount: number;
  errors: string[];
}

/**
 * D√©termine le businessType √† partir de la cl√© et de la cat√©gorie
 */
function getBusinessTypeFromKey(key: string, category: string): string | null {
  // Pour les configurations PRICING (g√©n√©riques)
  if (category === 'PRICING') {
    return 'GENERIC';
  }
  
  // Pour les configurations BUSINESS_TYPE_PRICING
  if (category === 'BUSINESS_TYPE_PRICING') {
    if (key.startsWith('MOVING_')) return 'D√âM√âNAGEMENT';
    if (key.startsWith('CLEANING_')) return 'NETTOYAGE';
    if (key.startsWith('DELIVERY_')) return 'LIVRAISON';
    if (key.startsWith('TRANSPORT_')) return 'TRANSPORT';
    if (key.startsWith('PACKING_')) return 'EMBALLAGE';
    if (key.startsWith('STORAGE_')) return 'STOCKAGE';
  }
  
  // Pour les autres cat√©gories
  if (['SYSTEM_VALUES', 'TECHNICAL_LIMITS', 'INSURANCE_CONFIG', 'SERVICE_PARAMS'].includes(category)) {
    return 'SYSTEM';
  }
  
  return null;
}

/**
 * R√©initialise compl√®tement la base de donn√©es Configuration
 */
async function resetConfigurationDatabase(): Promise<ResetResult> {
  const result: ResetResult = {
    success: true,
    deletedCount: 0,
    createdCount: 0,
    errors: []
  };

  try {
    console.log('üöÄ R√âINITIALISATION COMPL√àTE DE LA BASE DE DONN√âES CONFIGURATION');
    console.log('=' .repeat(70));
    console.log('‚ö†Ô∏è  ATTENTION : Ce script va SUPPRIMER TOUTES les configurations existantes !');
    console.log('');

    // 1. Compter les configurations existantes
    const existingCount = await prisma.configuration.count();
    console.log(`üìä Configurations existantes : ${existingCount}`);

    // 2. Supprimer TOUTES les configurations
    console.log('\nüóëÔ∏è  SUPPRESSION DE TOUTES LES CONFIGURATIONS...');
    const deleteResult = await prisma.configuration.deleteMany({});
    result.deletedCount = deleteResult.count;
    console.log(`‚úÖ ${result.deletedCount} configurations supprim√©es`);

    // 3. R√©cup√©rer toutes les configurations par d√©faut
    console.log('\nüìã CR√âATION DES NOUVELLES CONFIGURATIONS...');
    const configurations = createDefaultConfigurations();
    console.log(`üìä Total des configurations √† cr√©er : ${configurations.length}`);

    // 4. Cr√©er toutes les nouvelles configurations
    for (const config of configurations) {
      try {
        await prisma.configuration.create({
          data: {
            id: `config_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            category: config.category,
            key: config.key,
            value: config.value,
            description: config.description,
            businessType: getBusinessTypeFromKey(config.key, config.category),
            isActive: true,
            validFrom: new Date(),
            validTo: null,
            createdAt: new Date(),
            updatedAt: new Date()
          }
        });
        result.createdCount++;
        console.log(`‚úÖ Cr√©√© : ${config.key} = ${config.value}`);
      } catch (error) {
        const errorMsg = `‚ùå Erreur pour ${config.key}: ${error}`;
        result.errors.push(errorMsg);
        console.log(errorMsg);
        result.success = false;
      }
    }

    // 5. Afficher le r√©sum√©
    console.log('\nüìä R√âSUM√â DE LA R√âINITIALISATION :');
    console.log('=' .repeat(50));
    console.log(`üóëÔ∏è  Configurations supprim√©es : ${result.deletedCount}`);
    console.log(`‚úÖ Configurations cr√©√©es : ${result.createdCount}`);
    console.log(`‚ùå Erreurs : ${result.errors.length}`);

    if (result.errors.length > 0) {
      console.log('\nüö® ERREURS D√âTECT√âES :');
      result.errors.forEach(error => console.log(`   ${error}`));
    }

    // 6. V√©rifier la coh√©rence finale
    const finalCount = await prisma.configuration.count({
      where: { isActive: true }
    });
    console.log(`\nüìà Total des configurations actives en BDD : ${finalCount}`);

    // 7. Afficher les statistiques par cat√©gorie
    const pricingCount = await prisma.configuration.count({
      where: { 
        category: ConfigurationCategory.PRICING,
        isActive: true 
      }
    });
    
    const businessTypeCount = await prisma.configuration.count({
      where: { 
        category: ConfigurationCategory.BUSINESS_TYPE_PRICING,
        isActive: true 
      }
    });

    const systemCount = await prisma.configuration.count({
      where: { 
        category: ConfigurationCategory.SYSTEM_VALUES,
        isActive: true 
      }
    });

    console.log(`\nüìä CONFIGURATIONS PAR CAT√âGORIE :`);
    console.log(`   - PRICING : ${pricingCount}`);
    console.log(`   - BUSINESS_TYPE_PRICING : ${businessTypeCount}`);
    console.log(`   - SYSTEM_VALUES : ${systemCount}`);

    // 8. Afficher les statistiques par businessType
    const businessTypeStats = await prisma.configuration.groupBy({
      by: ['businessType'],
      _count: {
        id: true
      },
      where: {
        isActive: true
      }
    });

    console.log(`\nüìä CONFIGURATIONS PAR BUSINESS TYPE :`);
    businessTypeStats.forEach(stat => {
      console.log(`   - ${stat.businessType || 'NULL'}: ${stat._count.id} configurations`);
    });

  } catch (error) {
    const errorMsg = `‚ùå Erreur lors de la r√©initialisation : ${error}`;
    result.errors.push(errorMsg);
    result.success = false;
    console.log(errorMsg);
  }

  return result;
}

/**
 * Affiche les d√©tails des configurations cr√©√©es
 */
async function displayCreatedConfigurations(): Promise<void> {
  console.log('\nüîç D√âTAILS DES CONFIGURATIONS CR√â√âES :');
  console.log('=' .repeat(70));

  // Afficher les configurations PRICING
  const pricingConfigs = await prisma.configuration.findMany({
    where: { 
      category: ConfigurationCategory.PRICING,
      isActive: true 
    },
    orderBy: { key: 'asc' }
  });

  console.log(`\nüìã CONFIGURATIONS PRICING (${pricingConfigs.length}) :`);
  for (const config of pricingConfigs) {
    console.log(`   ${config.key}: ${config.value} (${config.businessType})`);
  }

  // Afficher les configurations BUSINESS_TYPE_PRICING
  const businessTypeConfigs = await prisma.configuration.findMany({
    where: { 
      category: ConfigurationCategory.BUSINESS_TYPE_PRICING,
      isActive: true 
    },
    orderBy: [{ businessType: 'asc' }, { key: 'asc' }]
  });

  console.log(`\nüè¢ CONFIGURATIONS BUSINESS_TYPE_PRICING (${businessTypeConfigs.length}) :`);
  for (const config of businessTypeConfigs) {
    console.log(`   ${config.key}: ${config.value} (${config.businessType})`);
  }
}

/**
 * Fonction principale
 */
async function main(): Promise<void> {
  try {
    // 1. R√©initialiser la base de donn√©es
    const result = await resetConfigurationDatabase();

    // 2. Afficher les d√©tails si la r√©initialisation a r√©ussi
    if (result.success) {
      await displayCreatedConfigurations();
      
      console.log('\nüéâ R√âINITIALISATION TERMIN√âE AVEC SUCC√àS !');
      console.log('=' .repeat(70));
      console.log(`üóëÔ∏è  ${result.deletedCount} configurations supprim√©es`);
      console.log(`‚úÖ ${result.createdCount} configurations cr√©√©es`);
      console.log(`üìä Total : ${result.createdCount} configurations actives`);
      console.log('');
      console.log('‚úÖ La base de donn√©es est maintenant propre et coh√©rente');
      console.log('‚úÖ Toutes les configurations sont align√©es avec DefaultValues.ts');
      console.log('‚úÖ Le syst√®me est pr√™t pour les tests et le d√©veloppement');
    } else {
      console.log('\n‚ùå R√âINITIALISATION √âCHOU√âE !');
      console.log('=' .repeat(50));
      console.log(`‚ùå ${result.errors.length} erreurs d√©tect√©es`);
      process.exit(1);
    }

  } catch (error) {
    console.error('‚ùå Erreur fatale :', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Erreur non g√©r√©e :', error);
    process.exit(1);
  });
}

export { resetConfigurationDatabase, displayCreatedConfigurations };
