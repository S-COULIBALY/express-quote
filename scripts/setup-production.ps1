# üöÄ Script de Setup Production Express Quote (Windows PowerShell)
#
# Ce script automatise la mise en place compl√®te du syst√®me sur Windows

param(
    [switch]$SkipDependencies,
    [switch]$SkipTestData,
    [switch]$SkipBuild
)

# Configuration des couleurs
$Host.UI.RawUI.WindowTitle = "Express Quote - Setup Production"

# Fonctions d'affichage
function Write-Info {
    param([string]$Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

function Write-Step {
    param([string]$Message)
    Write-Host "`nüîß $Message" -ForegroundColor Cyan
    Write-Host "=" * 50 -ForegroundColor Cyan
}

# D√©but du script
Clear-Host
Write-Host "üöÄ Express Quote - Setup Production" -ForegroundColor Magenta
Write-Host "=================================" -ForegroundColor Magenta
Write-Host ""

try {
    # 1. ====================================================================
    # V√âRIFICATION DES PR√âREQUIS
    # ====================================================================

    Write-Step "V√©rification des pr√©requis"

    # V√©rification Node.js
    try {
        $nodeVersion = node --version
        Write-Success "Node.js install√©: $nodeVersion"
    }
    catch {
        Write-Error "Node.js n'est pas install√© ou inaccessible"
        throw "Pr√©requis manquant: Node.js"
    }

    # V√©rification npm
    try {
        $npmVersion = npm --version
        Write-Success "npm install√©: $npmVersion"
    }
    catch {
        Write-Error "npm n'est pas install√©"
        throw "Pr√©requis manquant: npm"
    }

    # V√©rification PowerShell version
    $psVersion = $PSVersionTable.PSVersion
    if ($psVersion.Major -ge 5) {
        Write-Success "PowerShell version: $($psVersion.ToString())"
    }
    else {
        Write-Warning "PowerShell version ancienne: $($psVersion.ToString())"
    }

    # V√©rification du fichier .env
    if (Test-Path ".env") {
        Write-Success "Fichier .env trouv√©"
    }
    else {
        Write-Warning "Fichier .env non trouv√©"
        if (Test-Path ".env.example") {
            Write-Info "Copie de .env.example vers .env..."
            Copy-Item ".env.example" ".env"
            Write-Success "Fichier .env cr√©√© √† partir de .env.example"
            Write-Warning "‚ö†Ô∏è  IMPORTANT: Configurez les variables dans .env avant de continuer"

            $continue = Read-Host "Voulez-vous continuer? (o/N)"
            if ($continue -ne "o" -and $continue -ne "O") {
                Write-Info "Setup interrompu pour configuration .env"
                exit 0
            }
        }
        else {
            Write-Error "Aucun fichier .env ou .env.example trouv√©"
            throw "Configuration manquante"
        }
    }

    # 2. ====================================================================
    # INSTALLATION DES D√âPENDANCES
    # ====================================================================

    if (-not $SkipDependencies) {
        Write-Step "Installation des d√©pendances"

        Write-Info "Installation des packages npm..."
        npm install
        if ($LASTEXITCODE -ne 0) {
            throw "√âchec de l'installation npm"
        }
        Write-Success "D√©pendances npm install√©es"

        Write-Info "Installation des d√©pendances de d√©veloppement..."
        npm install --save-dev @faker-js/faker
        if ($LASTEXITCODE -ne 0) {
            Write-Warning "√âchec installation des d√©pendances dev (non critique)"
        }
        else {
            Write-Success "D√©pendances de d√©veloppement install√©es"
        }
    }

    # 3. ====================================================================
    # CONFIGURATION DE LA BASE DE DONN√âES
    # ====================================================================

    Write-Step "Configuration de la base de donn√©es"

    Write-Info "G√©n√©ration du client Prisma..."
    npx prisma generate
    if ($LASTEXITCODE -ne 0) {
        Write-Warning "Probl√®me avec la g√©n√©ration Prisma (tentative de continuer)"
    }
    else {
        Write-Success "Client Prisma g√©n√©r√©"
    }

    Write-Info "Validation du sch√©ma Prisma..."
    npx prisma validate
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Sch√©ma Prisma valide"
    }
    else {
        Write-Warning "Probl√®me de validation du sch√©ma"
    }

    Write-Info "Application des migrations..."
    npx prisma migrate deploy
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Migrations appliqu√©es"
    }
    else {
        Write-Warning "Probl√®me avec les migrations (base peut-√™tre d√©j√† √† jour)"
    }

    Write-Info "Test de connexion √† la base de donn√©es..."
    npx prisma db pull 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Connexion √† la base de donn√©es r√©ussie"
    }
    else {
        Write-Error "Impossible de se connecter √† la base de donn√©es"
        Write-Info "V√©rifiez la variable DATABASE_URL dans .env"
        throw "Erreur de connexion base de donn√©es"
    }

    # 4. ====================================================================
    # POPULATION DES DONN√âES
    # ====================================================================

    Write-Step "Population des donn√©es de production"

    if (Test-Path "scripts/seed-production-ready.ts") {
        Write-Info "Ex√©cution du script de population..."
        npx ts-node scripts/seed-production-ready.ts
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Donn√©es de production popul√©es"
        }
        else {
            Write-Warning "Probl√®me lors de la population (peut-√™tre d√©j√† faite)"
        }
    }
    else {
        Write-Warning "Script de population non trouv√©"
    }

    # 5. ====================================================================
    # G√âN√âRATION DE DONN√âES DE TEST (OPTIONNEL)
    # ====================================================================

    if (-not $SkipTestData) {
        $generateTestData = Read-Host "`nG√©n√©rer des donn√©es de test pour les tests de charge? (o/N)"
        if ($generateTestData -eq "o" -or $generateTestData -eq "O") {
            Write-Info "G√©n√©ration des donn√©es de test..."
            if (Test-Path "scripts/generate-test-data.ts") {
                npx ts-node scripts/generate-test-data.ts
                if ($LASTEXITCODE -eq 0) {
                    Write-Success "Donn√©es de test g√©n√©r√©es"
                }
                else {
                    Write-Warning "Probl√®me lors de la g√©n√©ration des donn√©es de test"
                }
            }
            else {
                Write-Warning "Script de g√©n√©ration de donn√©es de test non trouv√©"
            }
        }
    }

    # 6. ====================================================================
    # BUILD DE PRODUCTION
    # ====================================================================

    if (-not $SkipBuild) {
        Write-Step "Build de production"

        Write-Info "Build Next.js..."
        npm run build
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Build de production termin√©"
        }
        else {
            Write-Error "√âchec du build de production"
            throw "Erreur de build"
        }
    }

    # 7. ====================================================================
    # TESTS DE VALIDATION
    # ====================================================================

    Write-Step "Tests de validation"

    Write-Info "Test de l'√©tat des migrations..."
    npx prisma migrate status
    Write-Success "√âtat des migrations valid√©"

    Write-Info "Test de validation du sch√©ma..."
    npx prisma validate
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Sch√©ma Prisma valid√©"
    }
    else {
        Write-Warning "Probl√®me de validation du sch√©ma"
    }

    # Test simple de connectivit√© (si serveur d√©marr√©)
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:3000/api/health" -TimeoutSec 5 -ErrorAction SilentlyContinue
        if ($response.StatusCode -eq 200) {
            Write-Success "Endpoints API accessibles"
        }
    }
    catch {
        Write-Warning "Serveur non d√©marr√© - tests d'endpoints ignor√©s"
    }

    # 8. ====================================================================
    # V√âRIFICATIONS FINALES DE PRODUCTION
    # ====================================================================

    Write-Step "V√©rifications finales de production"

    if (Test-Path "scripts/finalize-production.ts") {
        Write-Info "Ex√©cution des v√©rifications de production..."
        npx ts-node scripts/finalize-production.ts
        Write-Success "V√©rifications de production termin√©es"
    }
    else {
        Write-Warning "Script de v√©rification de production non trouv√©"
    }

    # 9. ====================================================================
    # CONFIGURATION DES BACKUPS
    # ====================================================================

    Write-Step "Configuration des backups"

    # Cr√©er les dossiers de backup
    $backupDirs = @("backups", "backups/database", "backups/documents", "backups/logs")
    foreach ($dir in $backupDirs) {
        if (-not (Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
        }
    }
    Write-Success "Dossiers de backup cr√©√©s"

    if (Test-Path "scripts/backup-production.ts") {
        Write-Success "Script de backup configur√©"
    }
    else {
        Write-Warning "Script de backup non trouv√©"
    }

    # 10. ===================================================================
    # CONFIGURATION T√ÇCHES PROGRAMM√âES (OPTIONNEL)
    # ===================================================================

    $configureTasks = Read-Host "`nConfigurer les t√¢ches Windows programm√©es? (o/N)"
    if ($configureTasks -eq "o" -or $configureTasks -eq "O") {
        Write-Info "Configuration des t√¢ches programm√©es Windows..."

        # Cr√©er un script batch pour le backup
        $batchContent = @"
@echo off
cd /d "$PWD"
npx ts-node scripts/backup-production.ts >> logs/backup.log 2>&1
"@
        $batchContent | Out-File -FilePath "scripts/backup-task.bat" -Encoding ASCII

        Write-Success "Script de t√¢che backup cr√©√©: scripts/backup-task.bat"
        Write-Info "Pour cr√©er la t√¢che programm√©e: schtasks /create /tn 'Express Quote Backup' /tr '$PWD\scripts\backup-task.bat' /sc daily /st 02:00"
    }

    # 11. ===================================================================
    # R√âSUM√â FINAL
    # ===================================================================

    Write-Host "`n" -NoNewline
    Write-Success "üéâ SETUP PRODUCTION TERMIN√â AVEC SUCC√àS !"
    Write-Host ""

    Write-Host "üìã R√âSUM√â DU SETUP :" -ForegroundColor Cyan
    Write-Host "   ‚úÖ Pr√©requis v√©rifi√©s"
    Write-Host "   ‚úÖ D√©pendances install√©es"
    Write-Host "   ‚úÖ Base de donn√©es configur√©e"
    Write-Host "   ‚úÖ Donn√©es de production popul√©es"
    if (-not $SkipBuild) { Write-Host "   ‚úÖ Build de production termin√©" }
    Write-Host "   ‚úÖ Tests de validation pass√©s"
    Write-Host "   ‚úÖ V√©rifications de production OK"
    Write-Host "   ‚úÖ Syst√®me de backup configur√©"
    Write-Host ""

    Write-Info "üöÄ PROCHAINES √âTAPES :"
    Write-Host "   1. V√©rifier les variables d'environnement dans .env"
    Write-Host "   2. D√©marrer le serveur : npm run start"
    Write-Host "   3. Tester les fonctionnalit√©s principales"
    Write-Host "   4. Configurer le monitoring (optionnel)"
    Write-Host "   5. Activer les t√¢ches programm√©es"
    Write-Host ""

    Write-Info "üìö COMMANDES UTILES :"
    Write-Host "   ‚Ä¢ D√©marrer le serveur : npm run start"
    Write-Host "   ‚Ä¢ Backup manuel : npx ts-node scripts/backup-production.ts"
    Write-Host "   ‚Ä¢ Tests de sant√© : npx ts-node scripts/finalize-production.ts"
    Write-Host "   ‚Ä¢ R√©g√©n√©rer Prisma : npx prisma generate"
    Write-Host ""

    Write-Success "Express Quote est maintenant PR√äT POUR LA PRODUCTION ! üöÄ"
    Write-Host ""

    # Optionnel : D√©marrer le serveur automatiquement
    $startServer = Read-Host "D√©marrer le serveur maintenant? (o/N)"
    if ($startServer -eq "o" -or $startServer -eq "O") {
        Write-Info "D√©marrage du serveur Express Quote..."
        npm run start
    }

} catch {
    Write-Host "`n" -NoNewline
    Write-Error "üí• ERREUR CRITIQUE LORS DU SETUP:"
    Write-Host $_.Exception.Message -ForegroundColor Red
    Write-Host ""
    Write-Warning "V√©rifiez les logs ci-dessus et corrigez les erreurs avant de relancer"
    exit 1
}

Write-Host "Press any key to continue..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")